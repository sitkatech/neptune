@*-----------------------------------------------------------------------
    <copyright file="SupportForm.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Neptune.WebMvc.Views.Shared
@using Neptune.WebMvc.Common.HtmlHelperExtensions
@inherits SupportForm
@model SupportFormViewModel

@{
    ViewPageContent.RenderPartialView(Html, ViewDataTyped.ViewPageContentViewData);
}

@using (Html.BeginForm())
{
    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-sm-3 control-label">
                @Html.LabelWithSugarFor(x => x.RequestPersonName)
            </div>
            <div class="col-sm-9">
                @if (ViewDataTyped.IsUserAnonymous)
                {
                    @Html.TextBoxFor(x => x.RequestPersonName, new { style = "width:100%", @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.RequestPersonName)
                }
                else
                {
                    <div class="form-control-static">@Model.RequestPersonName</div>
                    @Html.HiddenFor(x => x.RequestPersonName)
                }
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-3 control-label">
                @Html.LabelWithSugarFor(x => x.RequestPersonEmail)
            </div>
            <div class="col-sm-9">
                @if (ViewDataTyped.IsUserAnonymous)
                {
                    @Html.TextBoxFor(x => x.RequestPersonEmail, new { style = "width:100%", @class = "form-control", @type = "email" })
                    @Html.ValidationMessageFor(x => x.RequestPersonEmail)
                }
                else
                {
                    <div class="form-control-static">@Model.RequestPersonEmail</div>
                    @Html.HiddenFor(x => x.RequestPersonEmail)
                }
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-3 control-label">
                @Html.LabelWithSugarFor(x => x.RequestPersonOrganization) (optional)
            </div>
            <div class="col-sm-9">
                @Html.TextBoxFor(x => x.RequestPersonOrganization, new { style = "width:100%", @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-3 control-label">
                @Html.LabelWithSugarFor(x => x.RequestPersonPhone) (optional)
            </div>
            <div class="col-sm-9">
                @Html.TextBoxFor(x => x.RequestPersonPhone, new { style = "width:auto", @class = "form-control", @type = "phone" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-3 control-label">
                @Html.LabelWithSugarFor(x => x.SupportRequestTypeEnum)
            </div>
            <div class="col-sm-9">
                @Html.DropDownListFor(x => x.SupportRequestTypeEnum, ViewDataTyped.SupportRequestTypes, new { style = "width:100%", @class = "form-control" })
                @Html.ValidationMessageFor(x => x.SupportRequestTypeEnum)
            </div>
        </div>
        <div class="form-group">
            <div class="col-sm-3 control-label">
                @Html.LabelWithSugarFor(x => x.RequestDescription)
            </div>
            <div class="col-sm-9">
                @Html.TextAreaWithMaxLengthFor(x => x.RequestDescription, new TextAreaForExtensions.TextAreaDimensions(null, 8), null, new List<string>() { "form-control" })
                @Html.ValidationMessageFor(x => x.RequestDescription)
            </div>
        </div>
        @Html.HiddenFor(x => x.CurrentPageUrl)

    </div>
    <hr>
    <div class="row">
        <div class="col-xs-12" style="text-align: right">
            @if (ViewDataTyped.IsUserAnonymous)
            {
                <script src="https://www.google.com/recaptcha/api.js"></script>

                <script type="text/javascript">
                    function onGoogleRecaptchaSubmitCallback(token) {
                        $("#RecaptchaToken").val(token);
                        document.forms[0].submit();
                    }
                </script>
                @Html.HiddenFor(x => x.RecaptchaToken)
                <button class="g-recaptcha btn btn-neptune"
                        data-sitekey="@ViewDataTyped.GoogleRecaptchaSiteKey"
                        data-callback="onGoogleRecaptchaSubmitCallback"
                        data-action="submit">
                    Submit Request
                </button>
            }
            else
            {
                <button class="btn btn-neptune" style="display: inline-block;" type="submit">
                    Submit Request
                </button>
            }
            <a href="@ViewDataTyped.CancelUrl" class="btn btn-neptune" style="display: inline-block;">Cancel</a>
        </div>
    </div>

    @Html.HiddenFor(x => x.ReturnUrl)
}
