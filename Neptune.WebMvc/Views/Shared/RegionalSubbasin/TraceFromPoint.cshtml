@inherits Neptune.WebMvc.Views.Shared.RegionalSubbasin.TraceFromPoint


    <script src="@Url.Content("~/Content/leaflet/leaflet.geometryutil/leaflet.geometryutil.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/leaflet/leaflet.arrowheads/leaflet-arrowheads.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.css")" rel="stylesheet" type="text/css" />

    <style>
        #legend {
            padding: 10px;
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);
        }

        .legend-container .glyphicon {
            margin-right: 5px;
        }
    </style>

<div id="legendContainer" style="display:none">
    <div id="legend" class="rsb-trace-legend">
        <div>
            <strong>Drainage Areas</strong>
        </div>
        <div>
            <span class="glyphicon glyphicon-stop" style="color: #F2BBE0"></span>Drainage Area Point of Interest
        </div>
        <div>
            <img src='/Content/img/legendImages/regionalSubbasinTraceDirectionOfFlow.png' height='12px' style='margin-bottom:3px; margin-right:5px'/>Direction of Flow
        </div>
        <div>
            <span class="glyphicon glyphicon-stop" style="color: #5600FF"></span>Upstream Regional Subbasin
        </div>
        <div>
            <span class="glyphicon glyphicon-stop" style="color: #FF4345"></span>Downstream Regional Subbasin
        </div>
    </div>
</div>


<div class="leaflet-bottom leaflet-right text-right">
    <button class="btn btn-xs btn-neptune" style="pointer-events:auto" onclick="toggleTraceFromPointMode()"><span id="traceButtonDisplayAction">View</span> Drainage Areas</button>
</div>

<script>
    var mapRef;
    var mapDivID = "@ViewDataTyped.MapDivID"
    var toolTip;
    var defaultCursorStyle;
    var rsbTraceLegend;
    var arrowHeadsStyle =  {
        frequency: '100px',
        size: '10px',
        fill: true,
        color: '#0099ab',
        fillColor: "#FFFFFF"
    }
    
    var upstreamStyle = {
        fillColor: "#5600FF",
        fill: true,
        fillOpacity: 0.4,
        color: "#5600FF",
        weight: 1,
        stroke: true
    };

    var downstreamStyle = {
        fillColor: "#FF4345",
        fill: true,
        fillOpacity: 0.4,
        color: "#FF4345",
        weight: 1,
        stroke: true
    };

    //To gain our map context and add a few variables, we'll extend Neptune Maps
    NeptuneMaps.Map.prototype.setupTraceFromPoint = function() {
        this.rsbTraceLayer = null;
        this.rsbTraceStartMarker = null;
        this.traceFromPointMode = false;
        mapRef = this;
        defaultCursorStyle = document.getElementById(mapDivID).style.cursor;
    }

    function clearAddedTraceLayers() {
        if (mapRef.rsbTraceLayer) {
             mapRef.removeLayerFromMap(mapRef.rsbTraceLayer);
             mapRef.rsbTraceLayer = null;
        }

        if (mapRef.rsbTraceStartMarker) {
            mapRef.removeLayerFromMap(mapRef.rsbTraceStartMarker);
            mapRef.rsbTraceStartMarker = null;
        }
    }

    function getRSBTraceFromPoint(e) {
         clearAddedTraceLayers();
         if (mapRef.traceFromPointMode) {
             var latLng = new L.LatLng(e.latlng.lat,
                e.latlng.lng);
             mapRef.rsbTraceStartMarker = L.marker(latLng,
                { icon: mapRef.buildDefaultLeafletMarkerFromMarkerPath('/Content/leaflet/images/marker-icon-F2BBE0.png') });
             mapRef.rsbTraceStartMarker.addTo(mapRef.map);
             jQuery.ajax({
                url: "/RegionalSubbasin/GetRegionalSubbasinGraphTraceAsFeatureCollectionFromPoint",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                data: JSON.stringify({"Longitude" : e.latlng.lng, "Latitude" : e.latlng.lat}),
                type: 'POST',
                dataType: 'json',
                jsonpCallback: 'getJson'
             }).then(function(response) {
                 mapRef.rsbTraceLayer = L.geoJson(response.features.sort((a, b) => b.geometry.type.localeCompare(a.geometry.type)),
                                        {
                                            style: function (feature) {
                                                var depth = feature.properties.Depth;
                                                if (feature.geometry.type == "LineString") {
                                                    var depthForWeight = Math.abs(depth) * 0.1;
                                                    return {
                                                        weight: depthForWeight > 2.5 ? 0.5 : 3 - depthForWeight,
                                                        color: '#0099ab'
                                                    }
                                                }

                                                return depth >= 0 ? upstreamStyle : downstreamStyle
                                            },
                                            arrowheads: arrowHeadsStyle,
                                            interactive: false
                                        });
                 mapRef.rsbTraceLayer.addTo(mapRef.map);
             });
         }
    };

    function updateTooltipPosition(e) {
        toolTip.setLatLng(mapRef.map.layerPointToLatLng(e.layerPoint));
    }

    function openRSBTraceTooltip(e) {
        mapRef.map.openTooltip(toolTip);
    }

    function closeRSBTraceTooltip(e) {
        mapRef.map.closeTooltip(toolTip);
    }

    function setupRSBTraceTooltip() {
        toolTip = L.tooltip({sticky: true, permanent: true})
                    //requires a default starting position, otherwise it will throw an error
                   .setLatLng([0,0])
                   .setContent("Click on the map to see<br/>the Regional Subbasins<br/>upstream and downstream<br/>of the selected point")
                   .addTo(mapRef.map);
        mapRef.map.on('mousemove', updateTooltipPosition);
        L.DomEvent.on(mapRef.map.getContainer(), "mouseleave", closeRSBTraceTooltip, this);
        L.DomEvent.on(mapRef.map.getContainer(), "mouseenter", openRSBTraceTooltip, this);
    }

    function tearDownRSBTraceTooltip() {
        mapRef.map.off('mousemove', updateTooltipPosition);
        L.DomEvent.off(mapRef.map.getContainer(), "mouseleave", closeRSBTraceTooltip, this);
        L.DomEvent.off(mapRef.map.getContainer(), "mouseenter", openRSBTraceTooltip, this);
        mapRef.removeLayerFromMap(toolTip);
        toolTip = null;
    }

    function setupLegend() {
        rsbTraceLegend = new L.Control.Legend({
            position: 'topleft',
            collapsed: false
        });
        mapRef.map.addControl(rsbTraceLegend);
        jQuery(rsbTraceLegend.getContainer()).addClass("rsb-trace-legend-container")
        jQuery(".rsb-trace-legend-container").append( jQuery(".rsb-trace-legend") );
        jQuery(".rsb-trace-legend").css("display", "");
    }

    function tearDownLegend() {
        jQuery("#legendContainer").append( jQuery(".rsb-trace-legend") );
        mapRef.map.removeControl(rsbTraceLegend);
    }

    function enterTraceFromPointMode() {
       mapRef.map.on("click", getRSBTraceFromPoint);
       setupRSBTraceTooltip();  
       setupLegend();
       jQuery("#" + mapDivID).css('cursor', 'crosshair');
       jQuery("#traceButtonDisplayAction").text("Clear");
       event.stopPropagation();
    }

    function exitTraceFromPointMode() {
        mapRef.map.off("click", getRSBTraceFromPoint);
        tearDownRSBTraceTooltip();
        tearDownLegend();
        jQuery("#" + mapDivID).css('cursor', defaultCursorStyle);
        jQuery("#traceButtonDisplayAction").text("View");
        clearAddedTraceLayers();
    }

    function toggleTraceFromPointMode() {
        mapRef.traceFromPointMode = !mapRef.traceFromPointMode;
        if (mapRef.traceFromPointMode) {
            enterTraceFromPointMode();
            return;
        }

        exitTraceFromPointMode();
    }
</script>
