@*-----------------------------------------------------------------------
    <copyright file="Index.cshtml" company="Tahoe Regional Planning Agency">
    Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Neptune.WebMvc.Common.DhtmlWrappers
@using Neptune.WebMvc.Views.Shared
@using Neptune.WebMvc.Common
@inherits Neptune.WebMvc.Views.LoadGeneratingUnit.Index
@section JavascriptAndStylesContent
{
    @{ DhtmlxGridIncludes.RenderPartialView(Html); }
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    <script type="text/javascript">
        var lguMap;
        var selectedFeature;
        jQuery(function () {
            var mapInitJson = @Html.Raw(ViewDataTyped.MapInitJson.ToJsonHtmlString());
            var geoserverUrl = @Html.Raw(ViewDataTyped.GeoServerUrl.ToJS());
            var jurisdictionCQLFilter = @Html.Raw(ViewDataTyped.JurisdictionCQLFilter.ToJS());

            lguMap = new NeptuneMaps.Map(mapInitJson, "Terrain", geoserverUrl);
            lguMap.wmsParams = lguMap.createWmsParamsWithLayerName("OCStormwater:LoadGeneratingUnits");
            lguMap.wfsParams = lguMap.createWfsParamsWithLayerName("OCStormwater:LoadGeneratingUnits");

            addDelineationWmsLayers(jurisdictionCQLFilter);

            var regionalSubbasinPane = lguMap.map.createPane("regionalSubbasinPane");
            regionalSubbasinPane.style.zIndex = 10000;
            lguMap.map.getPane("markerPane").style.zIndex = 10001;

            var regionalSubbasinLayer =
                lguMap.addWmsLayer("OCStormwater:RegionalSubbasins",
                    "<span><img src='/Content/img/legendImages/regionalSubbasin.png' height='12px' style='margin-bottom:3px;' /> Regional Subbasins</span>",
                    { pane: "regionalSubbasinPane" }, true);

            var lguLegendUrl = "/Content/img/legendImages/loagGeneratingUnit.png";
            var lguLabel = "<span><img src='" + lguLegendUrl + "' height='14px'/> LGUs</span>";
            lguMap.addWmsLayer("OCStormwater:LoadGeneratingUnits",
                lguLabel,
                {

                }, false);

            regionalSubbasinLayer.bringToFront();
             
            lguMap.map.on('click', selectLGU);
        });

        var addDelineationWmsLayers = function (jurisdictionCQLFilter) {
        
            if (!Sitka.Methods.isUndefinedNullOrEmpty(jurisdictionCQLFilter)) {
                jurisdictionCQLFilter = " AND " + jurisdictionCQLFilter;
            }
            // delete this line when the analysts realize that they actually do want the delineations hidden by jurisdiction
            jurisdictionCQLFilter = "";

            var verifiedLegendUrl = '/Content/img/legendImages/delineationVerified.png';
            var verifiedLabel = "<span>Delineations (Verified) </br><img src='" + verifiedLegendUrl + "'/></span>";
            lguMap.verifiedLayer = lguMap.addWmsLayer("OCStormwater:Delineations",
                verifiedLabel,
                {
                    styles: "delineation",
                    cql_filter: "DelineationStatus = 'Verified'" + jurisdictionCQLFilter,
                    maxZoom: 22
                },
                true);

            var provisionalLegendUrl = '/Content/img/legendImages/delineationProvisional.png';
            var provisionalLabel = "<span>Delineations (Provisional) </br><img src='" + provisionalLegendUrl + "'/></span>";
            lguMap.provisionalLayer = lguMap.addWmsLayer("OCStormwater:Delineations",
                provisionalLabel,
                {
                    styles: "delineation",
                    cql_filter: "DelineationStatus = 'Provisional'" + jurisdictionCQLFilter,
                    maxZoom: 22
                },
                true);

            var WQMPIconUrl = '/Content/img/legendImages/wqmp.png';
            var WQMPLabel = "<img src=" + WQMPIconUrl + " style='height: 15px'/> WQMPs";
            lguMap.WQMPsLayer = lguMap.addWmsLayer("OCStormwater:WaterQualityManagementPlans",
                WQMPLabel,
                {
                    maxZoom: 22
                },
                true);
        };

        var selectLGU = function (evt) {
            var customParams = {
                cql_filter: 'intersects(LoadGeneratingUnit4326Geometry, POINT(' + evt.latlng.lat + ' ' + evt.latlng.lng + '))'
            }
            selectLGUByWFS(customParams, evt.latlng);
        };

        var selectLGUByWFS = function (customParams, latlng) {
            if (!Sitka.Methods.isUndefinedNullOrEmpty(selectedFeature)) {
                lguMap.map.removeLayer(selectedFeature);
                lguMap.layerControl.removeLayer(selectedFeature);
            }

            var parameters = L.Util.extend(lguMap.wfsParams, customParams);
            SitkaAjax.ajax({
                url: lguMap.geoserverUrlOWS + L.Util.getParamString(parameters),
                dataType: 'json',
                jsonpCallback: 'getJson'
            },
                function (response) {
                    selectedFeature = L.geoJSON(response);
                    console.log(response);
                    console.log(selectedFeature);

                    if (response.features) {
                        var properties = response.features[0].properties;

                        var content = '<dl>' +
                            '<dt>LGU ID</dt>' +
                            '<dd>' +
                            properties.LoadGeneratingUnit4326ID +
                            '</dd>' +
                            '<dt>Regional Subbasin ID and Detail Link</dt>' +
                            '<dd>' +
                            "<a href='/RegionalSubbasin/Detail/" +
                            properties.RegionalSubbasinID +
                            "'>" +
                            properties.RegionalSubbasinID +
                            "</a>" +
                            '</dd>' +
                            '</dl>';

                        var popup = L.popup()
                            .setLatLng(latlng)
                            .setContent(content)
                            .openOn(lguMap.map);
                    }
                });
        };


    </script>

}


@section RightOfPageTitle
{
}

<div class="row">
    <div class="col-xs-12 col-sm-12">

            <div class="panel panelNeptune">
                <div class="panel-heading panelTitle">
                    Map
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-xs-12">
                            <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 500px;">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        
    </div>
    <div class="col-xs-12 col-sm-12">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Load Generating Units Table
            </div>
            <div class="panel-body">
                @Html.DhtmlxGrid(ViewDataTyped.GridSpec, ViewDataTyped.GridName, ViewDataTyped.GridDataUrl, "height:600px", DhtmlxGridResizeType.VerticalResizableHorizontalAutoFit)
            </div>
        </div>
    </div>
</div>

