@*-----------------------------------------------------------------------
    <copyright file="ProjectTypeSelection.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Neptune.WebMvc.Views.FieldVisit
@using Neptune.WebMvc.Common.HtmlHelperExtensions
@inherits EditDateAndType
@model EditDateAndTypeViewModel

<style>
    .bootstrap-datetimepicker-widget {
        z-index: 10000 !important;
    }
</style>

@using (Html.BeginForm())
{
    @Html.ValidationSummary()

    <text><strong>Please be sure to save any active changes prior editing the date and/or type of this visit</strong></text>
    <div class="form-group" id="fieldVisitInfo">
        <div id="fieldVisitType" style="padding-bottom:45px">
            <div class="col-xs-12 col-sm-5 control-label">
                @Html.LabelWithSugarFor(m => m.FieldVisitTypeID)
            </div>
            <div class="col-xs-12 col-sm-7">
                @Html.DropDownListFor(m => m.FieldVisitTypeID, ViewDataTyped.AllFieldVisitTypes, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
            </div>
        </div>
        <div id="fieldVisitDate">
            <div class="col-xs-12 col-sm-5 control-label">
                @Html.LabelWithSugarFor(m => m.FieldVisitDate)
            </div>
            <div class="col-xs-12 col-sm-7">
                <div class='input-group date' id='fieldVisitDatePicker'>
                    <input type='text' class="form-control" name="FieldVisitDate" readonly />
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
            </div>
        </div>
    </div>
}

<script>
    jQuery(document).ready(function() {
        debugger;
        //Because this lives inside the modal, we need to do some magic to get it to appear outside the modal
        jQuery('#fieldVisitDatePicker').datetimepicker({
            format: 'L',
            //attach to a parent with a relative position. This is the outside modal, but modalIDs are generated on the fly
            defaultDate: new Date("@ViewDataTyped.FieldVisitDate.ToString()"),
            ignoreReadonly: true,
            widgetParent: jQuery("#fieldVisitInfo").parent().parent().parent().parent()
        });

        var timeout;
        jQuery(window).resize(function() {
            clearTimeout(timeout);
            timeout = setTimeout(function() { datePickerPosition(jQuery('#fieldVisitDatePicker'))}, 100);
        });

        jQuery('[name="FieldVisitDate"]').on("click", function () {
            jQuery(this).next().trigger('click');
        });

        jQuery('#fieldVisitDatePicker').on('dp.show',
            function () {
                datePickerPosition(jQuery(this));
            });

        function datePickerPosition(datePicker) {
            var fieldVisitModal = jQuery("#fieldVisitInfo").parent().parent().parent().parent();
            var datepicker = fieldVisitModal.find('.bootstrap-datetimepicker-widget:last');
            if (datepicker.hasClass('bottom')) {
                var top = (datePicker.offset().top - fieldVisitModal.offset().top) + datePicker.outerHeight();
                var left = datePicker.offset().left - fieldVisitModal.offset().left;
                datepicker.css({
                    'top': top + 'px',
                    'bottom': 'auto',
                    'left': left + 'px'
                });
            } else if (datepicker.hasClass('top')) {
                var bottom = (fieldVisitModal.offset().top + fieldVisitModal.outerHeight()) -  datePicker.offset().top;
                var left = datePicker.offset().left - fieldVisitModal.offset().left;
                datepicker.css({
                    'top': 'auto',
                    'bottom': bottom + 'px',
                    'left': left + 'px'
                });
            }
        }
    })
</script>
