@using Neptune.EFModels.Entities
@using Neptune.WebMvc.Areas.Trash.Views.OnlandVisualTrashAssessment
@using Neptune.WebMvc.Common.BootstrapWrappers
@using Neptune.WebMvc.Common.HtmlHelperExtensions
@using Neptune.WebMvc.Common.ModalDialog
@using Neptune.WebMvc.Models
@inherits Neptune.WebMvc.Areas.Trash.Views.OnlandVisualTrashAssessment.FinalizeOVTA
@model FinalizeOVTAViewModel
@{ @SetLayout("SiteLayout.cshtml", ViewDataTyped) }


@if (!ViewDataTyped.OVTASection.IsSectionEnabled(ViewDataTyped.OVTA))
{
    <p class="systemText">@ViewDataTyped.OVTASection.GetSectionDisabledMessage()</p>
}
else
{

    using (Html.BeginForm())
    {
        <div class="form-horizontal">
            <div class="form-group row">
                <div class="col-sm-4 col-xs-12 control-label">
                    @Html.LabelWithSugarFor(m => m.AssessmentAreaName)
                </div>
                <div class="col-sm-8 col-xs-12">
                    @if (ViewDataTyped.OVTA.AssessingNewArea.GetValueOrDefault())
                    {
                        @Html.TextBoxFor(m => m.AssessmentAreaName, new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.AssessmentAreaName)
                    }
                    else
                    {
                        <span>@ViewDataTyped.OVTA.OnlandVisualTrashAssessmentArea.OnlandVisualTrashAssessmentAreaName</span>
                        @Html.HiddenFor(m => m.AssessmentAreaName)
                    }
                </div>
            </div>
            <div class="form-group row" style="margin-top: 30px">
                <div class="col-sm-4 col-xs-12 control-label">
                    @Html.LabelWithSugarFor(m => m.AssessmentAreaDescription)
                </div>
                @if (ViewDataTyped.OVTA.OnlandVisualTrashAssessmentArea != null)
                {
                    <div class="col-sm-8 col-xs-12">
                        @ViewDataTyped.AssessmentAreaDescription
                    </div>
                }
                else
                {
                    <div class="col-sm-8 col-xs-12">
                        @Html.TextAreaWithMaxLengthFor(m => m.AssessmentAreaDescription, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string> { "form-control" })
                        @Html.ValidationMessageFor(m => m.AssessmentAreaDescription)
                    </div>
                }
            </div>
            <div class="form-group row" style="margin-top: 30px">
                <div class="col-sm-4 col-xs-12 control-label">
                    @Html.LabelWithSugarFor(m => m.AssessmentDate)
                </div>
                <div class="col-sm-8 col-xs-12">
                    @Html.EditorFor(m => m.AssessmentDate)
                </div>
            </div>
            <div class="form-group row" style="margin-top: 30px">
                <div class="col-sm-4 col-xs-12 control-label">
                    @Html.LabelWithSugarFor(m => m.ScoreID)
                </div>
                <div class="col-sm-8 col-xs-12">
                    @Html.DropDownListFor(m => m.ScoreID, ViewDataTyped.Scores, new { @class = "form-control", style = "width:auto;" })
                    @Html.ValidationMessageFor(m => m.ScoreID)
                    <span style="float: right;">
                        @ModalDialogFormHelper.ModalDialogFormLink($"Score Definitions {BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-new-window")}", ViewDataTyped.ScoreDescriptionsUrl, "Score Definitions", 600, null, "Close", new List<string> { "systemText" }, null, null)
                    </span>
                </div>
            </div>
            <div class="form-group" style="margin-top: 30px">
                <div class="col-sm-4 col-xs-12 control-label">
                    @Html.LabelWithSugarFor(m => m.IsProgressAssessment)
                </div>
                <div class="col-sm-8 col-xs-12">
                    <div class="radio-inline">
                        <label>
                            @Html.RadioButtonFor(m => m.IsProgressAssessment, false)
                            Baseline
                        </label>
                    </div>
                    <div class="radio-inline">
                        <label>
                            @Html.RadioButtonFor(m => m.IsProgressAssessment, true)
                            Progress
                        </label>
                        @Html.ValidationMessageFor(m => m.IsProgressAssessment)
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-4 col-xs-12 control-label">
                    @Html.LabelWithSugarFor(m => m.Notes)
                </div>
                <div class="col-sm-8 col-xs-12">
                    @Html.TextAreaWithMaxLengthFor(m => m.Notes, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string> { "form-control" })
                    @Html.ValidationMessageFor(m => m.Notes)
                </div>
            </div>
        </div>
        <hr />
        <h4>Preliminary Source Identification</h4>
        <p>Stormwater trash sources identified within the assessment area during assessments. Check all sources that apply.</p>
        var br = true;
        foreach (var categoryRow in PreliminarySourceIdentificationCategory.All.Chunk(2))
        {
            <div class="row">
                @foreach (var category in categoryRow)
                {
                    <div class="col-sm-6 col-xs-12">
                        <label>@category.PreliminarySourceIdentificationCategoryDisplayName</label><br />
                        @foreach (var type in category.PreliminarySourceIdentificationTypes)
                        {
                            var checkBoxId = type.IsOther() ? type.PreliminarySourceIdentificationTypeName + "CheckBox" : "";

                            var preliminarySourceIdentificationSimple = Model.PreliminarySourceIdentifications.Single(x => x.PreliminarySourceIdentificationTypeID == type.PreliminarySourceIdentificationTypeID);
                            var index = Model.PreliminarySourceIdentifications.IndexOf(preliminarySourceIdentificationSimple);
                            <label style="font-weight: normal;">
                                @Html.CheckBoxFor(m => m.PreliminarySourceIdentifications[index].Has, new { id = checkBoxId })
                                @type.GetDisplayName()
                            </label>
                            if (type.IsOther())
                            {
                                @Html.TextBoxFor(m => m.PreliminarySourceIdentifications[index].ExplanationIfTypeIsOther, new { @class = "form-control", style = "width:50%; margin-left:5px", placeholder = "Describe other source", id = type.PreliminarySourceIdentificationTypeName + "TextBox" })
                            }
                            @Html.HiddenFor(m => m.PreliminarySourceIdentifications[index].PreliminarySourceIdentificationTypeID)<br />
                        }
                    </div>
                }
            </div>
            if (br)
            {
                <br />
                br = false;
            }
        }

        <hr />
        <h4>Observations</h4>

        TrashAssessmentSummaryMap.RenderPartialView(Html, ViewDataTyped.TrashAssessmentSummaryMapViewData);

        <hr />
        @Html.HiddenFor(m => m.StormwaterJurisdictionID)
        @Html.HiddenFor(m => m.AssessmentAreaID)
        @Html.HiddenFor(m => m.OnlandVisualTrashAssessmentID)
        <div class="row">
            <div class="col-xs-12 col-sm-2">
                <div><sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup> Required Field</div>
            </div>

            <div class="col-xs-12 col-sm-10" style="text-align: right">
                <button type="submit" class="btn btn-neptune" value="false" id="@Html.IdFor(m => m.Finalize)" name="@Html.NameFor(m => m.Finalize)">Save</button>
                <button type="submit" class="btn btn-neptune" value="true" id="@Html.IdFor(m => m.Finalize)" name="@Html.NameFor(m => m.Finalize)">Finalize <i class="glyphicon glyphicon-chevron-right"></i></button>
            </div>
        </div>
    }

    <script type="text/javascript">
        var hookUpConditionallyDisableSourceTextBoxes = function(checkBoxID, textBoxID) {
            jQuery("#" + checkBoxID).change(function() {
                jQuery("#" + textBoxID).prop('disabled', !this.checked);
            });
        }

        var initialDisable = function (checkBoxID, textBoxID) {
            if (!jQuery("#" + checkBoxID).attr("checked")) {
                 jQuery("#" + textBoxID).prop('disabled', true);
            }
        }

        jQuery(document).ready(function() {
            @foreach (var type in ViewDataTyped.PreliminarySourceIdentificationTypeOthers)
            {
                <text>
                    hookUpConditionallyDisableSourceTextBoxes("@(type.PreliminarySourceIdentificationTypeName)CheckBox",
                        "@(type.PreliminarySourceIdentificationTypeName)TextBox");
            initialDisable("@(type.PreliminarySourceIdentificationTypeName)CheckBox",
                        "@(type.PreliminarySourceIdentificationTypeName)TextBox");
                </text>
            }

            HookupCheckIfFormIsDirtyNoDisable(undefined);
        });
    </script>
}
