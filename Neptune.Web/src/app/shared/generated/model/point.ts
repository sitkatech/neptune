/**
 * Neptune.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { CoordinateSequence } from '././coordinate-sequence';
import { Geometry } from '././geometry';
import { GeometryFactory } from '././geometry-factory';
import { Coordinate } from '././coordinate';
import { PrecisionModel } from '././precision-model';
import { Dimension } from '././dimension';
import { Envelope } from '././envelope';
import { OgcGeometryType } from '././ogc-geometry-type';

import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class Point { 
    Factory?: GeometryFactory;
    UserData?: any;
    SRID?: number;
    PrecisionModel?: PrecisionModel;
    readonly NumGeometries?: number;
    readonly IsSimple?: boolean;
    readonly IsValid?: boolean;
    readonly Area?: number;
    readonly Length?: number;
    Centroid?: Point;
    InteriorPoint?: Point;
    PointOnSurface?: Point;
    Envelope?: Geometry;
    EnvelopeInternal?: Envelope;
    readonly IsRectangle?: boolean;
    CoordinateSequence?: CoordinateSequence;
    readonly Coordinates?: Array<Coordinate>;
    readonly NumPoints?: number;
    readonly IsEmpty?: boolean;
    Dimension?: Dimension;
    BoundaryDimension?: Dimension;
    X?: number;
    Y?: number;
    Coordinate?: Coordinate;
    readonly GeometryType?: string;
    OgcGeometryType?: OgcGeometryType;
    Boundary?: Geometry;
    Z?: number;
    M?: number;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface PointForm { 
    Factory?: FormControl<GeometryFactory>;
    UserData?: FormControl<any>;
    SRID?: FormControl<number>;
    PrecisionModel?: FormControl<PrecisionModel>;
    NumGeometries?: FormControl<number>;
    IsSimple?: FormControl<boolean>;
    IsValid?: FormControl<boolean>;
    Area?: FormControl<number>;
    Length?: FormControl<number>;
    Centroid?: FormControl<Point>;
    InteriorPoint?: FormControl<Point>;
    PointOnSurface?: FormControl<Point>;
    Envelope?: FormControl<Geometry>;
    EnvelopeInternal?: FormControl<Envelope>;
    IsRectangle?: FormControl<boolean>;
    CoordinateSequence?: FormControl<CoordinateSequence>;
    Coordinates?: FormControl<Array<Coordinate>>;
    NumPoints?: FormControl<number>;
    IsEmpty?: FormControl<boolean>;
    Dimension?: FormControl<Dimension>;
    BoundaryDimension?: FormControl<Dimension>;
    X?: FormControl<number>;
    Y?: FormControl<number>;
    Coordinate?: FormControl<Coordinate>;
    GeometryType?: FormControl<string>;
    OgcGeometryType?: FormControl<OgcGeometryType>;
    Boundary?: FormControl<Geometry>;
    Z?: FormControl<number>;
    M?: FormControl<number>;
}

export class PointFormControls { 
    public static Factory = (value: FormControlState<GeometryFactory> | GeometryFactory = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<GeometryFactory>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static UserData = (value: FormControlState<any> | any = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<any>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static SRID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static PrecisionModel = (value: FormControlState<PrecisionModel> | PrecisionModel = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<PrecisionModel>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static NumGeometries = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsSimple = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsValid = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Area = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Length = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Centroid = (value: FormControlState<Point> | Point = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Point>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static InteriorPoint = (value: FormControlState<Point> | Point = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Point>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static PointOnSurface = (value: FormControlState<Point> | Point = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Point>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Envelope = (value: FormControlState<Geometry> | Geometry = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Geometry>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static EnvelopeInternal = (value: FormControlState<Envelope> | Envelope = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Envelope>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsRectangle = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static CoordinateSequence = (value: FormControlState<CoordinateSequence> | CoordinateSequence = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<CoordinateSequence>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Coordinates = (value: FormControlState<Array<Coordinate>> | Array<Coordinate> = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Array<Coordinate>>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static NumPoints = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsEmpty = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Dimension = (value: FormControlState<Dimension> | Dimension = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Dimension>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static BoundaryDimension = (value: FormControlState<Dimension> | Dimension = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Dimension>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static X = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Y = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Coordinate = (value: FormControlState<Coordinate> | Coordinate = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Coordinate>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static GeometryType = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static OgcGeometryType = (value: FormControlState<OgcGeometryType> | OgcGeometryType = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<OgcGeometryType>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Boundary = (value: FormControlState<Geometry> | Geometry = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Geometry>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Z = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static M = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}
