/**
 * Neptune.API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Coordinate } from './coordinate';
import { Ordinates } from './ordinates';


import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class CoordinateSequence { 
    readonly Dimension?: number;
    readonly Measures?: number;
    readonly Spatial?: number;
    Ordinates?: Ordinates;
    readonly HasZ?: boolean;
    readonly HasM?: boolean;
    readonly ZOrdinateIndex?: number;
    readonly MOrdinateIndex?: number;
    First?: Coordinate;
    Last?: Coordinate;
    readonly Count?: number;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}
export namespace CoordinateSequence {
}


export interface CoordinateSequenceForm { 
    Dimension?: FormControl<number>;
    Measures?: FormControl<number>;
    Spatial?: FormControl<number>;
    Ordinates?: FormControl<Ordinates>;
    HasZ?: FormControl<boolean>;
    HasM?: FormControl<boolean>;
    ZOrdinateIndex?: FormControl<number>;
    MOrdinateIndex?: FormControl<number>;
    First?: FormControl<Coordinate>;
    Last?: FormControl<Coordinate>;
    Count?: FormControl<number>;
}
export namespace CoordinateSequence {
}


export class CoordinateSequenceFormControls { 
    public static Dimension = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Measures = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Spatial = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Ordinates = (value: FormControlState<Ordinates> | Ordinates = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Ordinates>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static HasZ = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static HasM = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static ZOrdinateIndex = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static MOrdinateIndex = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static First = (value: FormControlState<Coordinate> | Coordinate = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Coordinate>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Last = (value: FormControlState<Coordinate> | Coordinate = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<Coordinate>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static Count = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}
export namespace CoordinateSequence {
}

