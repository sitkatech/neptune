/**
 * Neptune.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { FieldDefinitionTypeSimpleDto } from '././field-definition-type-simple-dto';

import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class FieldDefinitionDto { 
    FieldDefinitionID?: number;
    FieldDefinitionType?: FieldDefinitionTypeSimpleDto;
    FieldDefinitionValue?: string;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface FieldDefinitionDtoForm { 
    FieldDefinitionID?: FormControl<number>;
    FieldDefinitionType?: FormControl<FieldDefinitionTypeSimpleDto>;
    FieldDefinitionValue?: FormControl<string>;
}

export class FieldDefinitionDtoFormControls { 
    public static FieldDefinitionID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FieldDefinitionType = (value: FormControlState<FieldDefinitionTypeSimpleDto> | FieldDefinitionTypeSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<FieldDefinitionTypeSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static FieldDefinitionValue = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}
