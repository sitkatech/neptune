/**
 * Neptune.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { PersonDto } from '././person-dto';
import { FileResourceDto } from '././file-resource-dto';
import { OrganizationTypeSimpleDto } from '././organization-type-simple-dto';

import { FormControl, FormControlOptions, FormControlState, Validators } from "@angular/forms";
export class OrganizationDto { 
    OrganizationID?: number;
    OrganizationGuid?: string;
    OrganizationName?: string;
    OrganizationShortName?: string;
    PrimaryContactPerson?: PersonDto;
    IsActive?: boolean;
    OrganizationUrl?: string;
    LogoFileResource?: FileResourceDto;
    OrganizationType?: OrganizationTypeSimpleDto;
    constructor(obj?: any) {
        Object.assign(this, obj);
    }
}

export interface OrganizationDtoForm { 
    OrganizationID?: FormControl<number>;
    OrganizationGuid?: FormControl<string>;
    OrganizationName?: FormControl<string>;
    OrganizationShortName?: FormControl<string>;
    PrimaryContactPerson?: FormControl<PersonDto>;
    IsActive?: FormControl<boolean>;
    OrganizationUrl?: FormControl<string>;
    LogoFileResource?: FormControl<FileResourceDto>;
    OrganizationType?: FormControl<OrganizationTypeSimpleDto>;
}

export class OrganizationDtoFormControls { 
    public static OrganizationID = (value: FormControlState<number> | number = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<number>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static OrganizationGuid = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static OrganizationName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static OrganizationShortName = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static PrimaryContactPerson = (value: FormControlState<PersonDto> | PersonDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<PersonDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static IsActive = (value: FormControlState<boolean> | boolean = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<boolean>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static OrganizationUrl = (value: FormControlState<string> | string = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<string>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static LogoFileResource = (value: FormControlState<FileResourceDto> | FileResourceDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<FileResourceDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
    public static OrganizationType = (value: FormControlState<OrganizationTypeSimpleDto> | OrganizationTypeSimpleDto = undefined, formControlOptions?: FormControlOptions | null) => new FormControl<OrganizationTypeSimpleDto>(
        value,
        formControlOptions ?? 
        {
            nonNullable: false,
            validators: 
            [
            ],
        }
    );
}
