@*-----------------------------------------------------------------------
    <copyright file="Detail.cshtml" company="Tahoe Regional Planning Agency">
    Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Neptune.Web.Views.Shared
@using Neptune.Web.Common.ModalDialog
@using Neptune.Web.Common.BootstrapWrappers
@using Neptune.Web.Common.HtmlHelperExtensions
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Neptune.EFModels.Entities
@using Neptune.Web.Common
@using Neptune.Web.Common.DhtmlWrappers
@using Neptune.Web.Views.Shared.HRUCharacteristics
@using Neptune.Web.Views.Shared.ModeledPerformance
@inherits Neptune.Web.Views.TreatmentBMP.Detail

@section JavascriptAndStylesContent
{
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    @{ DhtmlxGridIncludes.RenderPartialView(Html); }
    <script src="@Url.Content("~/Content/angular-controllers/EditFundingEventFundingSourceController.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.css")" rel="stylesheet" type="text/css" />
    <style>

        .extra-small {
            font-size: 75%;
            margin-bottom: 0;
        }

        .unverify-inventory-btn {
            font-size: 11px;
            margin: 0 5px 0 0;
            text-align: right;
        }

        .treatmentBMPLocationLegend .glyphicon-stop {
            margin-right: 5px;
        }

        #legend {
            padding: 10px;
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);
        }
    </style>
}

@section RightOfPageTitle
{
    @if (ViewDataTyped.CurrentPersonCanManage)
    {
        <div class="pull-right">
            <div style="display: inline-block; vertical-align: top;">
                @if (ViewDataTyped.TreatmentBMP.InventoryIsVerified)
                {
                    <div style="text-align: center">
                        <i class="helpicon glyphicon glyphicon-ok helpiconGridBlue" style="cursor: default;"></i>
                        Inventory has been verified
                    </div>

                    if (ViewDataTyped.CanManageStormwaterJurisdiction)
                    {
                        @ModalDialogFormHelper.ModalDialogFormLink("Mark as Provisional", ViewDataTyped.VerifiedUnverifiedUrl, "Mark BMP Record as Provisional?", 400, "Continue", "Cancel", new List<string> { "btn", "btn-neptune" }, null, null)
                    }
                }
                else
                {
                    <div style="text-align: center">
                        <i class="helpicon glyphicon glyphicon-warning-sign helpiconGridBlue" style="cursor: default;"></i>
                        Inventory has not been verified
                    </div>

                    if (ViewDataTyped.CanManageStormwaterJurisdiction)
                    {
                        @ModalDialogFormHelper.ModalDialogFormLink("Verify Inventory", ViewDataTyped.VerifiedUnverifiedUrl, "Verify Inventory?", 400, "Continue", "Cancel", new List<string> { "btn", "btn-neptune" }, null, null)
                    }
                }

                @ModalDialogFormHelper.ModalDialogFormLink("Begin Field Visit", ViewDataTyped.NewFieldVisitUrl, "Begin Field Visit", 400, "Continue", "Cancel", new List<string> { "btn", "btn-neptune" }, null, null)
            </div>
        </div>
    }
}

@if (!ViewDataTyped.CurrentPersonIsAnonymousOrUnassigned)
{
if (ViewDataTyped.DelineationErrors.Any() || ViewDataTyped.ParameterizationErrors.Any())
{
    <div class="alert alert-info">
        @if (ViewDataTyped.DelineationErrors.Any())
        {
            <div class="pull-right">
                <a class="btn btn-xs btn-primary" href="@ViewDataTyped.DelineationMapUrl">Review and Edit on the Delineation Map</a>
            </div>
            @:This BMP delineation may have errors:
            <ul>
                @foreach (var delineationError in ViewDataTyped.DelineationErrors)
                {
                    <li>@delineationError</li>
                }
            </ul>
        }
        @if (ViewDataTyped.ParameterizationErrors.Any())
        {
            @:This BMP is not fully parameterized:
            <ul>
                @foreach (var parameterizationError in ViewDataTyped.ParameterizationErrors)
                {
                    <li>@parameterizationError</li>
                }
            </ul>
        }
    </div>
}

if (ViewDataTyped.OpenRevisionRequest != null)
{
    <div class="alert alert-info">
        There is an open <a href="@ViewDataTyped.OpenRevisionRequestDetailUrl">Regional Subbasin Revision Request</a> relating to this BMP.
    </div>
}
}
<div class="row">
    <div class="col-xs-12 col-sm-6">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Basics
                @if (ViewDataTyped.CurrentPersonCanManage)
                {
                    <span class="pull-right">
                        <a href="@ViewDataTyped.EditUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    </span>
                }
            </div>
            <div class="panel-body">
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Name</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.TreatmentBMPName</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">
                        @if (!ViewDataTyped.CurrentPersonIsAnonymousOrUnassigned && ViewDataTyped.CurrentPersonCanManage)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("Change Type", ViewDataTyped.ChangeTreatmentBMPTypeUrl, "Change BMP Type", 600, "Convert", "Cancel", new List<string> { "btn", "btn-neptune", "btn-xs" }, null, null)
                            <span>&nbsp;&nbsp;</span>
                        }
                        @Html.LabelWithSugarFor(FieldDefinitionType.TreatmentBMPType, "Type")
                    </label>
                    <div class="col-sm-7">
                        <a href="@ViewDataTyped.TreatmentBMPTypeDetailUrl">@ViewDataTyped.TreatmentBMPType.TreatmentBMPTypeName</a>
                    </div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinitionType.Jurisdiction, "Jurisdiction")</label>
                    <div class="col-sm-7">
                        <a href="@ViewDataTyped.StormwaterJurisdictionDetailUrl">@ViewDataTyped.TreatmentBMP.StormwaterJurisdiction.Organization.GetDisplayName()</a>
                    </div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Owner</label>
                    <div class="col-sm-7">
                        <a href="@ViewDataTyped.OrganizationDetailUrlTemplate.ParameterReplace(ViewDataTyped.TreatmentBMP.OwnerOrganizationID)">@ViewDataTyped.TreatmentBMP.OwnerOrganization.GetDisplayName()</a>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Year Built</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.YearBuilt</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">ID in System of Record</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.SystemOfRecordID</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Water Quality<br>Management Plan</label>
                    <div class="col-sm-7">
                        @if (ViewDataTyped.TreatmentBMP.WaterQualityManagementPlan != null)
                        {
                            <a href="@ViewDataTyped.WaterQualityManagementPlanDetailUrl">@ViewDataTyped.TreatmentBMP.WaterQualityManagementPlan.WaterQualityManagementPlanName</a>
                        }
                        else
                        {
                            <em class="text-muted">Has not been linked to a WQMP</em>                            
                        }
                    </div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinitionType.SizingBasis)</label>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.SizingBasisType.SizingBasisTypeDisplayName
                    </div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinitionType.TrashCaptureStatus)</label>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.TrashCaptureStatusType.TrashCaptureStatusTypeDisplayName
                    </div>
                </div>
                @if (ViewDataTyped.DisplayTrashCaptureEffectiveness)
                {
                    <div class="row">
                        <label class="col-sm-5 control-label text-right">Trash Capture Effectiveness</label>
                        <div class="col-sm-7">
                            @ViewDataTyped.TrashCaptureEffectiveness
                        </div>
                    </div>
                }
                <hr />
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinitionType.RequiredLifespanOfInstallation)</label>
                    <div class="col-sm-7">
                        @if (ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanType == TreatmentBMPLifespanType.FixedEndDate)
                        {
                            @* Because of database constraints, TreatmentBMPLifespanEndDate will never be null if LifespanType = FixedEndDate *@
                            @($"Maintain until at least {ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanEndDate.GetValueOrDefault().ToShortDateString()}")
                        }
                        else
                        {
                            @(ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanType != null ? ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanType.TreatmentBMPLifespanTypeDisplayName : "Unknown")
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-5 control-label text-right ">
                        <label>@Html.LabelWithSugarFor(FieldDefinitionType.RequiredFieldVisitsPerYear)</label>
                    </div>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.RequiredFieldVisitsPerYear.ToString()
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-5 control-label text-right ">
                        <label>@Html.LabelWithSugarFor(FieldDefinitionType.RequiredPostStormFieldVisitsPerYear)</label>
                    </div>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.RequiredPostStormFieldVisitsPerYear.ToString()
                    </div>
                </div>
                <hr />
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Notes</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.Notes</div>
                </div>
            </div>
        </div>
    @if (ViewDataTyped.IsAnalyzedInModelingModule)
        {
            <div class="panel panelNeptune">
                <div class="panel-heading panelTitle">
                    Performance / Modeling Attributes
                    <span class="pull-right">
                        @if (ViewDataTyped.CurrentPersonCanManage && ViewDataTyped.HasModelingAttributes)
                        {
                            <a href="@ViewDataTyped.EditTreatmentBMPPerformanceAndModelingAttributesUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                        }
                    </span>
                </div>
                <div class="panel-body">

                    @if (!ViewDataTyped.HasModelingAttributes)
                    {
                        <p class="systemText">
                            This type of treatment BMP does not have any Performance / Modeling Attributes
                        </p>
                    }
                    else
                    {
                        <table class="table table-condensed">
                            <thead>
                                <tr>
                                    <th>Attribute</th>
                                    <th class="text-right">Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWatershed)
                                    </td>
                                    <td class="text-right">@(ViewDataTyped.TreatmentBMP.Watershed != null ? ViewDataTyped.TreatmentBMP.Watershed.WatershedName : string.Empty)</td>
                                </tr>
                                @switch (ViewDataTyped.TreatmentBMPType.TreatmentBMPModelingType.ToEnum)
                                {
                                    case TreatmentBMPModelingTypeEnum.BioinfiltrationBioretentionWithRaisedUnderdrain:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForStorageVolumeBelowLowestOutletElevation)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.StorageVolumeBelowLowestOutletElevation, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMediaBedFootprint)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.MediaBedFootprint, "sq ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignMediaFiltrationRate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignMediaFiltrationRate, "in/hr")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingHydrologicSoilGroupHSG)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayUnderlyingHydrologicSoilGroup()</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.BioretentionWithNoUnderdrain:
                                    case TreatmentBMPModelingTypeEnum.InfiltrationBasin:
                                    case TreatmentBMPModelingTypeEnum.InfiltrationTrench:
                                    case TreatmentBMPModelingTypeEnum.PermeablePavement:
                                    case TreatmentBMPModelingTypeEnum.UndergroundInfiltration:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForInfiltrationSurfaceArea)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.InfiltrationSurfaceArea, "sq ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingInfiltrationRate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.UnderlyingInfiltrationRate, "in/hr")</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.BioretentionWithUnderdrainAndImperviousLiner:
                                    case TreatmentBMPModelingTypeEnum.SandFilters:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMediaBedFootprint)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.MediaBedFootprint, "sq ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignMediaFiltrationRate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignMediaFiltrationRate, "in/hr")</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.CisternsForHarvestAndUse:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWinterHarvestedWaterDemand)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.WinterHarvestedWaterDemand, "gpd")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForSummerHarvestedWaterDemand)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.SummerHarvestedWaterDemand, "gpd")</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.ConstructedWetland:
                                    case TreatmentBMPModelingTypeEnum.WetDetentionBasin:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForPermanentPoolorWetlandVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.PermanentPoolorWetlandVolume, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWaterQualityDetentionVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.WaterQualityDetentionVolume, "cu ft")</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.DryExtendedDetentionBasin:
                                    case TreatmentBMPModelingTypeEnum.FlowDurationControlBasin:
                                    case TreatmentBMPModelingTypeEnum.FlowDurationControlTank:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForStorageVolumeBelowLowestOutletElevation)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.StorageVolumeBelowLowestOutletElevation, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForEffectiveFootprint)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.EffectiveFootprint, "sq ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDrawdownTimeforWQDetentionVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DrawdownTimeforWQDetentionVolume, "hours")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingHydrologicSoilGroupHSG)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayUnderlyingHydrologicSoilGroup()</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.DryWeatherTreatmentSystems:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignDryWeatherTreatmentCapacity)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignDryWeatherTreatmentCapacity, "cfs")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForAverageTreatmentFlowrate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.AverageTreatmentFlowrate, "cfs")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMonthsofOperation)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayMonthsOfOperation()</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.Drywell:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveDrywellBMPVolume)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveDrywellBMPVolume, "cu ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForInfiltrationDischargeRate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.InfiltrationDischargeRate, "cfs")</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.HydrodynamicSeparator:
                                    case TreatmentBMPModelingTypeEnum.ProprietaryBiotreatment:
                                    case TreatmentBMPModelingTypeEnum.ProprietaryTreatmentControl:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTreatmentRate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TreatmentRate, "cfs")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.LowFlowDiversions:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignLowFlowDiversionCapacity)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignLowFlowDiversionCapacity, "gpd")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForAverageDivertedFlowrate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.AverageDivertedFlowrate, "gpd")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMonthsofOperation)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayMonthsOfOperation()</td>
                                        </tr>
                                        break;
                                    case TreatmentBMPModelingTypeEnum.VegetatedFilterStrip:
                                    case TreatmentBMPModelingTypeEnum.VegetatedSwale:
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTreatmentRate)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TreatmentRate, "cfs")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWettedFootprint)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.WettedFootprint, " sq ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForEffectiveRetentionDepth)
                                            </td>
                                            <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.EffectiveRetentionDepth, " ft")</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingHydrologicSoilGroupHSG)
                                            </td>
                                            <td class="text-right">
                                                @ViewDataTyped.DisplayUnderlyingHydrologicSoilGroup()
                                            </td>
                                        </tr>
                                        break;
                                }
                                <tr>
                                    <td>
                                        @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDryWeatherFlowOverride)
                                    </td>
                                    <td class="text-right">@ViewDataTyped.DisplayDryWeatherFlowOverride()</td>
                                </tr>
                            </tbody>
                        </table>
                    }
                </div>
            </div>
            <div class="panel panelNeptune">
                <div class="panel-heading panelTitle">
                    Modeled BMP Performance
                </div>
                <div class="panel-body">
                    @if (!ViewDataTyped.IsFullyParameterized)
                    {
                        if (ViewDataTyped.TreatmentBMP.WaterQualityManagementPlan != null && ViewDataTyped.TreatmentBMP.WaterQualityManagementPlan.WaterQualityManagementPlanModelingApproach == WaterQualityManagementPlanModelingApproach.Simplified)
                        {
                            <p class="systemText">This BMP is associated with a <a href="@ViewDataTyped.WaterQualityManagementPlanDetailUrl">WQMP</a> that is modeled using the simplified approach; this BMP will not be modeled explicitly.</p>
                        }
                        else
                        {
                            <p class="systemText">This Treatment BMP record is missing fields required to calculate model results. Please provide a verified delineation and required Modeling Parameters above.</p>
                        }
                    }
                    else
                    {
                        ModeledPerformance.RenderPartialView(Html, ViewDataTyped.ModeledPerformanceViewData);
                    }
                </div>
            </div>
        }
        @if (!ViewDataTyped.CurrentPersonIsAnonymousOrUnassigned)
        {
            <div class="panel panelNeptune">
                <div class="panel-heading panelTitle">
                    @CustomAttributeTypePurpose.OtherDesignAttributes.CustomAttributeTypePurposeDisplayName
                    <span class="pull-right">
                        @if (ViewDataTyped.CurrentPersonCanManage && ViewDataTyped.TreatmentBMPType.TreatmentBMPTypeCustomAttributeTypes.Any(x => x.CustomAttributeType.CustomAttributeTypePurpose == CustomAttributeTypePurpose.OtherDesignAttributes))
                        {
                            <a href="@ViewDataTyped.EditTreatmentBMPOtherDesignAttributesUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                        }

                    </span>
                </div>
                <div class="panel-body">
                    @if (ViewDataTyped.TreatmentBMPType.TreatmentBMPTypeCustomAttributeTypes.All(x => x.CustomAttributeType.CustomAttributeTypePurpose != CustomAttributeTypePurpose.OtherDesignAttributes))
                    {
                        <p class="systemText">
                            This type of treatment BMP does not have any @CustomAttributeTypePurpose.OtherDesignAttributes.CustomAttributeTypePurposeDisplayName
                        </p>
                    }
                    else
                    {
                        <table class="table table-condensed">
                            <thead>
                                <tr>
                                    <th>Attribute</th>
                                    <th class="text-right">Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var treatmentBMPTypeAttributeType in ViewDataTyped.TreatmentBMPType.TreatmentBMPTypeCustomAttributeTypes.Where(x => x.CustomAttributeType.CustomAttributeTypePurpose == CustomAttributeTypePurpose.OtherDesignAttributes).ToList().OrderBy(x => x.SortOrder).ThenBy(x => x.CustomAttributeType.CustomAttributeTypeName))
                                {
                                    <tr>
                                        <td>
                                            @if (ViewDataTyped.UserIsAdmin)
                                            {
                                                <a href="@ViewDataTyped.CustomAttributeTypeDetailUrlTemplate.ParameterReplace(treatmentBMPTypeAttributeType.CustomAttributeTypeID)">@treatmentBMPTypeAttributeType.CustomAttributeType.CustomAttributeTypeName</a>
                                            }
                                            else
                                            {
                                                @treatmentBMPTypeAttributeType.CustomAttributeType.CustomAttributeTypeName
                                            }
                                            <span class="help-block extra-small">@treatmentBMPTypeAttributeType.CustomAttributeType.CustomAttributeTypeDescription</span>
                                        </td>
                                        <td class="text-right" style="min-width: 150px">
                                            @ViewDataTyped.TreatmentBMP.GetCustomAttributeValueWithUnits(treatmentBMPTypeAttributeType, ViewDataTyped.CustomAttributes)
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        }
    </div>
    <div class="col-xs-12 col-sm-6">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Images
                <span class="pull-right">
                    @if (ViewDataTyped.CurrentPersonCanManage)
                    {
                        <a href="@ViewDataTyped.ManageTreatmentBMPImagesUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    }
                </span>
            </div>
            <div class="panel-body">
                @{ ImageCarousel.RenderPartialView(Html, ViewDataTyped.ImageCarouselViewData); }
            </div>
        </div>
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Location
                @if (ViewDataTyped.CurrentPersonCanManage)
                {
                    <span class="pull-right">
                        <a href="@ViewDataTyped.LocationEditUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    </span>
                }
            </div>
            <div class="panel-body" id="mapContainer">
                <div class="row">
                    <div class="col-xs-12">
                        <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 500px;">
                        </div>
                    </div>

                    <div id="legend" style="display: none;">
                        <div class="treatmentBMPLocationLegend" style="margin-left: 10px">
                            <div>
                                <span class="glyphicon glyphicon-stop" style="color: #935F59"></span>Treatment BMP Location
                            </div>
                            <div>
                                <span class="glyphicon glyphicon-stop" style="color: blue"></span>Delineation Area
                            </div>
                        </div>
                    </div>
                </div>
                @{
                    if (ViewDataTyped.UpstreamestBMP != null)
                    {
                        <div class="row" style="margin-top: 10px;">
                            <div class="col-xs-12">
                                <p>No delineation may be added or edited because this BMP is associated with an Upstream BMP in the network. If you would like to add a delineation, please remove the connection to the Upstream BMP.</p>
                                <p>
                                    The Delineation displayed above is associated with Upstream BMP:<br/>
                                    <a href="@ViewDataTyped.UpstreamBMPDetailUrl">@ViewDataTyped.UpstreamestBMP.TreatmentBMPName</a>
                                </p>
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top: 10px;">
                        <div class="col-xs-4 control-label">
                            @Html.LabelWithSugarFor(FieldDefinitionType.DelineationType)
                        </div>
                        <div class="col-xs-4">
                            @if (ViewDataTyped.Delineation != null)
                            {
                                @ViewDataTyped.Delineation.DelineationType.DelineationTypeDisplayName
                            }
                            else
                            {
                            <span class="systemText">No Delineation Provided</span>
                            }
                        </div>
                        <div class="col-xs-3">
                            @if (ViewDataTyped.UpstreamestBMP == null && ViewDataTyped.CanEditStormwaterJurisdiction)
                            {
                                <a href="@ViewDataTyped.DelineationMapUrl" class="btn btn-xs btn-neptune">Edit</a>
                            }
                        </div>
                    </div>
                    if (ViewDataTyped.Delineation != null)
                    {
                        <div class="row">
                            <div class="col-xs-4 control-label">
                                <label>Delineation Area</label>
                            </div>
                            <div class="col-xs-4">
                                @ViewDataTyped.DelineationArea
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xs-4 control-label">
                                <label>Delineation Status</label>
                            </div>
                            <div class="col-xs-4">
                                @ViewDataTyped.DelineationStatus
                            </div>
                        </div>
                    }

                    if (ViewDataTyped.UpstreamestBMP == null && !ViewDataTyped.CurrentPersonIsAnonymousOrUnassigned)
                    {
                        <div class="row" style="margin-top: 10px">
                            <div class="col-xs-12">
                                <a style="cursor: pointer" id="upstreamBMPDropdown"><span class="upstreamBMPDropdownIcon glyphicon glyphicon-chevron-down"></span>&nbsp;&nbsp;What if this BMP shares a delineation with an upstream BMP?</a>
                            </div>
                        </div>
                    }
                    <div class="row" style="margin-top: 10px;">
                        <div id="upstreamBMPInfo" class="col @(ViewDataTyped.UpstreamestBMP != null ? "" : "collapse")">
                            <label class="col-xs-4 control-label" style="margin-top: 8px">
                                @Html.LabelWithSugarFor(FieldDefinitionType.UpstreamBMP)
                            </label>
                            @if (ViewDataTyped.OtherTreatmentBmpsExistInSubbasin)
                            {
                                //For this panel we are intentionally showing the immediate upstream bmp, not the "upstreamest" bmp
                                <div class="col-xs-4" style="margin-top: 8px">
                                    @if (ViewDataTyped.TreatmentBMP.UpstreamBMP == null)
                                    {
                                        <span>Not Provided</span>
                                    }
                                    else
                                    {
                                        <a href="@ViewDataTyped.UpstreamBMPDetailUrl">@ViewDataTyped.TreatmentBMP.UpstreamBMP.TreatmentBMPName</a>
                                    }
                                </div>
                                <div class="col-xs-3" style="margin-top: 6px">
                                    @if (!ViewDataTyped.CurrentPersonIsAnonymousOrUnassigned)
                                    {
                                        if (ViewDataTyped.TreatmentBMP.UpstreamBMP != null)
                                        {
                                            <form method="post" action="@ViewDataTyped.RemoveUpstreamBMPUrl" style="display: inline">
                                                <button class="btn btn-sm btn-neptune" id="deleteUpstreamBMPButton" type="submit"><span class="glyphicon glyphicon-trash"></span></button>
                                            </form>
                                        }
                                        @ModalDialogFormHelper.ModalDialogFormLink("Edit", ViewDataTyped.EditUpstreamBMPUrl, "Choose Upstream BMP", new List<string> { "btn btn-sm btn-neptune" }, ViewDataTyped.CanEditStormwaterJurisdiction)
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="col-sm-7 text-muted"><em>No Inventoried BMPs within the same Regional Subbasin</em></div>
                            }
                        </div>
                    </div>
                }
            </div>

        </div>
        @if (ViewDataTyped.TreatmentBMPType.IsAnalyzedInModelingModule)
        {
            <div class="panel panelNeptune">
                <div class="panel-heading panelTitle">
                    Drainage Area Land Uses
                </div>
                <div class="panel-body">
                    @if (ViewDataTyped.HRUCharacteristicsViewData.HRUCharacteristicsSummaries.Any() && ViewDataTyped.Delineation?.IsVerified == true)
                    {
                        HRUCharacteristics.RenderPartialView(Html, ViewDataTyped.HRUCharacteristicsViewData);
                    }
                    else if (ViewDataTyped.Delineation == null)
                    {
                        <p class="systemText">
                            No delineation is provided for this Treatment BMP. Land Use Statistics cannot be determined until a verified delineation is provided.
                        </p>
                    }
                    else if (ViewDataTyped.Delineation.IsVerified == false)
                    {
                        <p class="systemText">The Delineation for this Treatment BMP is marked as provisional. Land Use Statistics will not be calculated until the Delineation is verified.</p>
                    }
                    else
                    {
                        <p class="systemText">Land Use Statistics have not been calculated for this Treatment BMP</p>
                    }
                </div>

            </div>
        }
    </div>

    <div class="col-xs-12">
        <div class="row">
            <div class="col-xs-12">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Field Visits
                        @if (ViewDataTyped.CurrentPersonCanManage)
                        {
                            <span class="pull-right">
                                @ModalDialogFormHelper.ModalDialogFormLink("<span class='glyphicon glyphicon-plus'></span>", ViewDataTyped.NewFieldVisitUrl, "Begin Field Visit", 400, "Continue", "Cancel", new List<string>(), null, null)
                            </span>
                        }
                    </div>
                    <div class="panel-body">
                        @Html.DhtmlxGrid(ViewDataTyped.FieldVisitGridSpec, ViewDataTyped.FieldVisitGridName, ViewDataTyped.FieldVisitGridDataUrl, "height:300px", DhtmlxGridResizeType.VerticalResizableHorizontalAutoFit)
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Funding Events
                        @if (ViewDataTyped.CurrentPersonCanManage)
                        {
                            <span class="pull-right">
                                @ModalDialogFormHelper.ModalDialogFormLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-plus").ToString(), ViewDataTyped.NewFundingSourcesUrl, "New Funding Event", new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                            </span>
                        }
                    </div>
                    <div class="panel-body" style="max-height: 800px; overflow: auto;">

                        
    
                        @if (ViewDataTyped.FundingEvents.Any())
                        {
                            foreach (var fundingEvent in ViewDataTyped.FundingEvents.OrderBy(x => x.FundingEventType.FundingEventTypeID))
                            {
                                <div class="row">
                                    <div class="col-sm-9">
                                        <h4>@fundingEvent.GetDisplayName()</h4>
                                    </div>
                                    <div class="col-sm-3 text-right">
                                        @ModalDialogFormHelper.ModalDialogFormLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit").ToString(), ViewDataTyped.FundingEventEditUrlTemplate.ParameterReplace(fundingEvent.FundingEventID), "Edit Funding Event", new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                                        @ModalDialogFormHelper.MakeDeleteLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-trash").ToString(), ViewDataTyped.FundingEventDeleteUrlTemplate.ParameterReplace(fundingEvent.FundingEventID), new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                                    </div>
                                </div>
                                <p>@fundingEvent.Description</p>

                                if (fundingEvent.FundingEventFundingSources.Any())
                                {
                                    <div class="table-responsive">
                                        <div style="overflow-x: auto">
                                            <table class="table table-striped table-condensed table-hover table-bordered">
                                                <tr>
                                                    <th>@Html.LabelWithSugarFor(FieldDefinitionType.FundingSource)</th>
                                                    <th style="text-align: right">Amount</th>
                                                </tr>
                                                @foreach (var fundingEventFundingSource in fundingEvent.FundingEventFundingSources.OrderBy(x => x.FundingSource.GetDisplayName()))
                                                {
                                                    <tr>
                                                        <td>
                                                            <a href="@ViewDataTyped.FundingSourceDetailUrlTemplate.ParameterReplace(fundingEventFundingSource.FundingSourceID)">@fundingEventFundingSource.FundingSource.FundingSourceName</a>
                                                        </td>
                                                        <th class="text-right">@fundingEventFundingSource.GetAmountIfSpecified()</th>
                                                    </tr>
                                                }
                                                <tr>
                                                    <th>Total</th>
                                                    <th class="text-right">@fundingEvent.FundingEventFundingSources.Sum(x => x.Amount).ToStringCurrency()</th>
                                                </tr>

                                            </table>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <p class="systemText">No Funding Sources identified for this Funding Event</p>
                                }
                            }
                        }
                        else
                        {
                            <p class="systemText">No Funding Events identified for this Treatment BMP</p>
                        }
                    </div>

                </div>
            </div>
            <div class="col-xs-12 col-sm-6">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Benchmark &amp; Threshold Values
                        <span class="pull-right">
                            @if (ViewDataTyped.CanEditBenchmarkAndThresholds)
                            {
                                <a href="@ViewDataTyped.AddBenchmarkAndThresholdUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                            }

                        </span>
                    </div>
                    <div class="panel-body">
                        @if (!ViewDataTyped.HasSettableBenchmarkAndThresholdValues)
                        {
                            <p class="systemText">
                                This type of treatment BMP does not have settable benchmark and threshold values
                            </p>
                        }
                        else
                        {
                            <table class="table table-condensed">
                                <thead>
                                    <tr>
                                        <th>Observation Type</th>
                                        <th>Benchmark</th>
                                        <th>Threshold</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var treatmentBMPAssessmentObservationType in ViewDataTyped.TreatmentBMPType.GetObservationTypesForAssessment().Select(x => x.TreatmentBMPAssessmentObservationType).Where(x => x.GetHasBenchmarkAndThreshold()))
                                    {
                                        <tr>
                                            <td>
                                                @if (!ViewDataTyped.CurrentPersonIsAnonymousOrUnassigned)
                                                {
                                                    <a href="@ViewDataTyped.TreatmentBMPAssessmentObservationTypeDetailUrlTemplate.ParameterReplace(treatmentBMPAssessmentObservationType.TreatmentBMPAssessmentObservationTypeID)">@treatmentBMPAssessmentObservationType.TreatmentBMPAssessmentObservationTypeName</a>
                                                }
                                                else
                                                {
                                                    @treatmentBMPAssessmentObservationType.TreatmentBMPAssessmentObservationTypeName
                                                }
                                            </td>
                                            <td>
                                                @treatmentBMPAssessmentObservationType.GetFormattedBenchmarkValue(treatmentBMPAssessmentObservationType.GetBenchmarkValue(ViewDataTyped.TreatmentBMPBenchmarkAndThresholds))
                                            </td>
                                            <td>
                                                @treatmentBMPAssessmentObservationType.GetFormattedThresholdValue(treatmentBMPAssessmentObservationType.GetThresholdValue(ViewDataTyped.TreatmentBMPBenchmarkAndThresholds), treatmentBMPAssessmentObservationType.GetBenchmarkValue(ViewDataTyped.TreatmentBMPBenchmarkAndThresholds))
                                            </td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        </div>
        
        @if (!ViewDataTyped.CurrentPersonIsAnonymousOrUnassigned)
        {
            <div class="row">
                <div class="col-xs-12">
                    <div class="panel panelNeptune">
                        <div class="panel-heading panelTitle">
                            Documents
                            <span class="pull-right">
                                @ModalDialogFormHelper.ModalDialogFormLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-plus").ToString(), ViewDataTyped.NewTreatmentBMPDocumentUrl, "Upload New Document", new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                            </span>
                        </div>
                        <div class="panel-body">
                            @if (ViewDataTyped.TreatmentBMPDocuments.Any())
                            {
                                foreach (var treatmentBMPDocument in ViewDataTyped.TreatmentBMPDocuments.OrderBy(x => x.DisplayName))
                                {
                                    if (ViewDataTyped.CurrentPersonCanManage)
                                    {
                                        <span>
                                            @ModalDialogFormHelper.ModalDialogFormLink("<i class='glyphicon glyphicon-edit' style='margin-right: 3px'></i>", ViewDataTyped.TreatmentBMPDocumentEditUrlTemplate.ParameterReplace(treatmentBMPDocument.TreatmentBMPDocumentID), "Edit Treatment BMP Document", new List<string>(), true)
                                            @ModalDialogFormHelper.MakeDeleteLink("<i class='glyphicon glyphicon-trash' style='margin-right: 3px'></i>", ViewDataTyped.TreatmentBMPDocumentDeleteUrlTemplate.ParameterReplace(treatmentBMPDocument.TreatmentBMPDocumentID), new List<string>(), true)
                                        </span>
                                    }

                                    <a href="@treatmentBMPDocument.FileResource.GetFileResourceUrl()">
                                        @treatmentBMPDocument.DisplayName <i class='glyphicon glyphicon-download' style='margin-right: 3px'></i>
                                    </a>

                                    <dl class="dl-horizontal">
                                        <dt>@Html.Label("Uploaded On")</dt>
                                        <dd>@treatmentBMPDocument.UploadDate.ToShortDateString()</dd>
                                        <dt>@Html.Label("File Type")</dt>
                                        <dd>@treatmentBMPDocument.FileResource.FileResourceMimeType.FileResourceMimeTypeDisplayName</dd>
                                        <dt>@Html.Label("Description")</dt>
                                        <dd>@treatmentBMPDocument.DocumentDescription</dd>
                                    </dl>
                                    <hr/>
                                }
                            }
                            else
                            {
                                <p class="systemText">No documents have been uploaded for this @FieldDefinitionType.TreatmentBMP.GetFieldDefinitionLabel()</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<script type="text/javascript">
    var map;
    jQuery(document).ready(function() {
        var mapInitJson = @Html.Raw(ViewDataTyped.MapInitJson.ToJsonHtmlString());
        map = new NeptuneMaps.Map(mapInitJson, null, @Html.Raw(ViewDataTyped.MapServiceUrl.ToJS()));
        var regionalSubbasinLayer =
            map.addWmsLayer("OCStormwater:RegionalSubbasins",
                "<span><img src='/Content/img/legendImages/regionalSubbasin.png' height='12px' style='margin-bottom:3px;' /> Regional Subbasins</span>",
                { styles: "regional_subbasin_wide", maxZoom: 22 }, true);

        map.addEsriDynamicLayer("https://ocgis.com/arcpub/rest/services/Flood/Stormwater_Network/MapServer/",
            "<span>Stormwater Network <br/> <img src='/Content/img/legendImages/stormwaterNetwork.png' height='50'/> </span>", false);

        if (mapInitJson.DelineationLayer) {
            var delineationLayer = L.geoJSON(mapInitJson.DelineationLayer.GeoJsonFeatureCollection);
            delineationLayer.addTo(map.map);
            map.map.fitBounds(delineationLayer.getBounds());
        } else {
            map.map.setZoom(18);
        }

        var legend = new L.Control.Legend({
            position: 'topleft',
            collapsed: false,
            controlButton: {
                title: "Legend"
            }
        });
        map.map.addControl(legend);

        jQuery(".legend-container").append( jQuery("#legend") );
        jQuery(".legend-container").append( jQuery("#legend") );
        jQuery("#legend").css("display", "");

        @{
            if (ViewDataTyped.UpstreamestBMP == null)
            {
                @:jQuery('#upstreamBMPInfo').collapse({
                @:    toggle:false
                @:});

                @:jQuery('#upstreamBMPDropdown').on('click', function () {
                @:    console.log("Made it");
                @:    jQuery('#upstreamBMPInfo').collapse('toggle');
                @:});

                @:jQuery('#upstreamBMPInfo').on('shown.bs.collapse', function() {
                @:    jQuery(".upstreamBMPDropdownIcon").addClass('glyphicon-chevron-up').removeClass('glyphicon-chevron-down');
                @:});

                @:jQuery('#upstreamBMPInfo').on('hidden.bs.collapse', function() {
                @:    jQuery(".upstreamBMPDropdownIcon").addClass('glyphicon-chevron-down').removeClass('glyphicon-chevron-up');
                @:});
            }
        }

    });
</script>