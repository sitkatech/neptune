@*-----------------------------------------------------------------------
    <copyright file="Edit.cshtml" company="Tahoe Regional Planning Agency">
    Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Neptune.EFModels.Entities
@using Neptune.Web.Common.BootstrapWrappers
@inherits Neptune.Web.Views.Shared.EditAttributes.EditAttributes
@model Neptune.Web.Views.Shared.EditAttributes.EditAttributesViewModel

@if (Html.ViewData.ModelState.IsValid && ViewDataTyped.MissingRequiredAttributes)
{
    <div class="alert alert-warning">
        Required Attributes are missing values.
    </div>
}


<script src="@Url.Content("~/Content/autonumeric.min.js")"></script>

<script>
    var decimal;
    jQuery(document).ready(function () {
        decimal = AutoNumeric.multiple('.numericAttribute', {allowDecimalPadding: false});
    });
</script>

<div class="row">
    <div class="col-xs-12">
        <div class="row">
            <div class="col-xs-12">
                <div class="form-horizontal">
                    @{
                        var attributeTypesGroupedByPurpose = ViewDataTyped.TreatmentBMPTypeCustomAttributeTypes.GroupBy(x => x.CustomAttributeType.CustomAttributeTypePurpose);
                        var i = 0;
                    }
                    @foreach (var attributeTypeGroup in attributeTypesGroupedByPurpose)
                    {
                        <h4>@attributeTypeGroup.Key.CustomAttributeTypePurposeDisplayName</h4>
                        foreach (var treatmentBMPTypeCustomAttributeType in attributeTypeGroup)
                        {
                            var currentMetadata = Model.CustomAttributes.SingleOrDefault(x => x.CustomAttributeTypeID == treatmentBMPTypeCustomAttributeType.CustomAttributeTypeID);
                            <div class="form-group">
                                <label class="col-sm-4 control-label">
                                    @treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeTypeName
                                    @if (treatmentBMPTypeCustomAttributeType.CustomAttributeType.IsRequired)
                                    {
                                        <span><sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup></span>
                                    }
                                </label>
                                <div class="col-sm-8">
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <input type="hidden" name="@(Html.NameFor(m => m.CustomAttributes))[@i].TreatmentBMPTypeCustomAttributeTypeID" value="@treatmentBMPTypeCustomAttributeType.TreatmentBMPTypeCustomAttributeTypeID" />
                                            <input type="hidden" name="@(Html.NameFor(m => m.CustomAttributes))[@i].CustomAttributeTypeID" value="@treatmentBMPTypeCustomAttributeType.CustomAttributeTypeID" />
                                            @if (treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeDataType == CustomAttributeDataType.DateTime)
                                            {
                                                <div class="input-group date" data-date-format="m/d/yyyy" data-provide="datepicker" data-date-autoclose="true" data-date-clear-btn="true">
                                                    <input type="text" name="@(Html.NameFor(m => m.CustomAttributes))[@i].CustomAttributeValues[0]" class="form-control" value="@(currentMetadata != null && currentMetadata.CustomAttributeValues != null ? currentMetadata.CustomAttributeValues[0] : null)" />
                                                    <div class="input-group-addon">
                                                        <span class="glyphicon glyphicon-th"></span>
                                                    </div>
                                                </div>
                                            }
                                            else if (treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeDataType == CustomAttributeDataType.Integer || treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeDataType == CustomAttributeDataType.Decimal)
                                            {
                                                <div class="row">
                                                    <div class="col-sm-12">
                                                        <div class="input-group">
                                                            <input class="form-control numericAttribute" name="@(Html.NameFor(m => m.CustomAttributes))[@i].CustomAttributeValues[0]" value="@(currentMetadata != null && currentMetadata.CustomAttributeValues != null && currentMetadata.CustomAttributeValues.Any() ? currentMetadata.CustomAttributeValues[0] : null)" aria-describedby="attributeUnit" />
                                                            <span class="input-group-addon" id="attributeUnit">@(treatmentBMPTypeCustomAttributeType.CustomAttributeType.MeasurementUnitType != null ? treatmentBMPTypeCustomAttributeType.CustomAttributeType.MeasurementUnitType.MeasurementUnitTypeDisplayName : "")</span>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else if (treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeDataType == CustomAttributeDataType.PickFromList)
                                            {
                                                <div class="row">
                                                    <div class="col-sm-12">

                                                        <select class="form-control" name="@(Html.NameFor(m => m.CustomAttributes))[@i].CustomAttributeValues[0]">
                                                            <option value=""></option>
                                                            @foreach (var option in treatmentBMPTypeCustomAttributeType.CustomAttributeType.GetOptionsSchemaAsListOfString())
                                                            {
                                                                <option value="@option" selected="@(currentMetadata != null && currentMetadata.CustomAttributeValues != null && currentMetadata.CustomAttributeValues.Any() && currentMetadata.CustomAttributeValues[0] == option)">@option</option>
                                                            }
                                                        </select>
                                                    </div>
                                                </div>
                                            }
                                            else if (treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeDataType == CustomAttributeDataType.MultiSelect)
                                            {
                                                <div class="row">
                                                    <div class="col-sm-12">

                                                        @for (var j = 0; j < treatmentBMPTypeCustomAttributeType.CustomAttributeType.GetOptionsSchemaAsListOfString().Count; j++)
                                                        {
                                                            var option = treatmentBMPTypeCustomAttributeType.CustomAttributeType.GetOptionsSchemaAsListOfString()[j];

                                                            <input type="checkbox"
                                                                   id="@($"multiselect_{option}{i}")"
                                                                   value="@option"
                                                                   name="@(Html.NameFor(m => m.CustomAttributes))[@i].CustomAttributeValues"
                                                                   checked="@(currentMetadata != null && currentMetadata.CustomAttributeValues != null && currentMetadata.CustomAttributeValues.Any(value => value == option))">
                                                            <label for="@($"multiselect_{option}{i}")">@option</label>
                                                            <br />
                                                        }
                                                    </div>
                                                </div>
                                            }
                                            else if (treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeDataType == CustomAttributeDataType.String) {
                                                <input class="form-control" type="text" name="@(Html.NameFor(m => m.CustomAttributes))[@i].CustomAttributeValues[0]" value="@(currentMetadata != null && currentMetadata.CustomAttributeValues != null && currentMetadata.CustomAttributeValues.Any() ? currentMetadata.CustomAttributeValues[0] : null)" />
                                            }
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-12">
                                            <p style="margin-top: 5px;" class="systemText">@treatmentBMPTypeCustomAttributeType.CustomAttributeType.CustomAttributeTypeDescription</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            i++;
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    // <![CDATA[
    jQuery(document).ready(function () {
        HookupCheckIfFormIsDirtyNoDisable(undefined);
    });
// ]]>
</script>