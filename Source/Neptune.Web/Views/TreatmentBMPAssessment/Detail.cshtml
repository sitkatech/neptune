@*-----------------------------------------------------------------------
<copyright file="Detail.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using LtInfo.Common
@using Neptune.Web.Models
@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.HtmlHelperExtensions
@using MoreLinq
@using Neptune.Web.Views.Shared
@using Neptune.Web.Views.TreatmentBMPAssessment
@inherits Detail

@section RightOfPageTitle
{
    @if (ViewDataTyped.CanEdit)
    {
        <span class="pullRight panel-heading-right">
            <a class="btn btn-neptune headerButtonText treatmentBMPTypeButton" href="@ViewDataTyped.TreatmentBMPAssessment.GetEditUrl()">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit") Edit Assessment</a>
        </span>
    }
}

<div class="row">    
    <div class="col-xs-12 col-md-6">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Assessment Overview
            </div>
            <div class="panel-body">
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Conducted By</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMPAssessment.GetFieldVisitPerson().GetFullNameFirstLast()</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Assessment Date</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMPAssessment.GetAssessmentDate().ToStringDate()</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Field Notes</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMPAssessment.Notes</div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-md-6">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Photos
            </div>
            <div class="panel-body">
                @{ ImageCarousel.RenderPartialView(Html, ViewDataTyped.ImageCarouselViewData); }
            </div>
        </div>
    </div>
    <div class="col-xs-12">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Score Details
            </div>
            <div class="panel-body">
                @if (ViewDataTyped.TreatmentBMPAssessment.TreatmentBMP.IsBenchmarkAndThresholdsComplete())
                {
                    <div class="row">
                        <label class="col-sm-4 control-label text-right">Assessment Score</label>
                        @if (ViewDataTyped.TreatmentBMPAssessment.IsAssessmentComplete)
                        {
                            <div class="col-sm-8">
                                @ViewDataTyped.TreatmentBMPAssessment.FormattedScore()
                            </div>
                        }
                        else
                        {
                            <div class="col-sm-8">
                                Assessment Not Complete
                            </div>
                        }
                    </div>
                    <hr />
                    {
                        Html.RenderRazorSitkaPartial<ScoreDetail, ScoreDetailViewData>(ViewDataTyped.ScoreDetailViewData);
                    }
                }
                else
                {
                    <p>Unable to calculate Assessment Score: Benchmark & Threshold are not yet set</p>
                    if (ViewDataTyped.CanEdit)
                    {
                        <a href="@ViewDataTyped.EditBenchmarkAndThresholdUrl" class="btn btn-neptune">Edit Benchmark & Threshold</a>
                    }
                }
            </div>
        </div>
    </div>
</div>

@foreach (var observationTypeBatch in ViewDataTyped.TreatmentBMPAssessment.TreatmentBMP.TreatmentBMPType.GetObservationTypesForAssessment().Select(x => x.TreatmentBMPAssessmentObservationType).Batch(2))
{
    <div class="row">
        @foreach (var treatmentBMPAssessmentObservationType in observationTypeBatch)
        {
            <div class="col-md-6">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Observation: @treatmentBMPAssessmentObservationType.TreatmentBMPAssessmentObservationTypeName
                    </div>
                    <div class="panel-body">
                        @{ var treatmentBMPObservation = ViewDataTyped.TreatmentBMPAssessment.TreatmentBMPObservations.SingleOrDefault(x => x.TreatmentBMPAssessmentObservationTypeID == treatmentBMPAssessmentObservationType.TreatmentBMPAssessmentObservationTypeID); }
                        @if (treatmentBMPObservation == null)
                        {
                            <span>Observation data not entered</span>
                        }
                        else if (treatmentBMPAssessmentObservationType.ObservationTypeSpecification.ObservationTypeCollectionMethod == ObservationTypeCollectionMethod.DiscreteValue)
                        {
                                <table class="table table-striped table-responsive">
                                    <thead>
                                        <tr>
                                            <th>Type</th>
                                            <th>Observed Value</th>
                                            <th>Note</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var observation in treatmentBMPObservation.GetDiscreteObservationData().SingleValueObservations)
                                        {
                                            <tr>
                                                <td>@observation.PropertyObserved</td>
                                                <td>@string.Format("{0} {1}", observation.ObservationValue, treatmentBMPObservation.TreatmentBMPAssessmentObservationType.GetMeasurementUnitType().LegendDisplayName)</td>
                                                <td>@observation.Notes</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                        }
                        else if (treatmentBMPAssessmentObservationType.ObservationTypeSpecification.ObservationTypeCollectionMethod == ObservationTypeCollectionMethod.Percentage)
                        {
                                <table class="table table-striped table-responsive">
                                    <thead>
                                        <tr>
                                            <th>Type</th>
                                            <th style="text-align: right">@treatmentBMPAssessmentObservationType.BenchmarkMeasurementUnitLabel()</th>
                                            <th>Note</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var observation in treatmentBMPObservation.GetDiscreteObservationData().SingleValueObservations)
                                        {
                                            <tr>
                                                <td>@observation.PropertyObserved</td>
                                                <td style="text-align: right">@(observation.ObservationValue)%</td>
                                                <td>@observation.Notes</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                        }
                        else if (treatmentBMPAssessmentObservationType.ObservationTypeSpecification.ObservationTypeCollectionMethod == ObservationTypeCollectionMethod.PassFail)
                        {
                            <table class="table table-striped table-responsive">
                                <thead>
                                <tr>
                                    <th>Type</th>
                                    <th>Observed Value</th>
                                    <th>Note</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var observation in treatmentBMPObservation.GetPassFailObservationData().SingleValueObservations)
                                {
                                    <tr>
                                        <td>@observation.PropertyObserved</td>
                                        <td>@(Convert.ToBoolean(observation.ObservationValue) ? treatmentBMPObservation.TreatmentBMPAssessmentObservationType.GetPassFailSchema().PassingScoreLabel : treatmentBMPObservation.TreatmentBMPAssessmentObservationType.GetPassFailSchema().FailingScoreLabel)</td>
                                        <td>@observation.Notes</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <span>Not implemented yet!</span>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
