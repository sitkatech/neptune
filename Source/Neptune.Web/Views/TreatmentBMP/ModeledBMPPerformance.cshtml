@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.TreatmentBMP.ModeledBMPPerformance


<style>
    .modelResults th {
        text-align: right;
    }

    .modelResults td {
        text-align: right;
    }

    .modelResults th.left {
        text-align: left;
    }

    .modelResults td.left {
        text-align: left;
    }

    .nav.nav-tabs.resultSelector li.active {
        border-bottom-style: none;
    }

    .nav.nav-tabs.resultSelector li.active a{
        color: white;
        background-color: #00c1d5;
        border-bottom-color: #f9f9f9;
    }

    .nav.nav-tabs.resultSelector li.active:hover a{
        color: white;
        background-color: #00c1d5;
        border-bottom-color: #f9f9f9;
    }
    .nav.nav-tabs.resultSelector li a {
        color: black;

        background: none;
        width: 100px;
        text-align: center;
        border-color: #ddd;
    }
</style>

<div ng-app="NeptuneApp" id="ModeledBMPPerformanceApp" ng-controller="ModeledBMPPerformanceController" style="max-height: 600px;">

    <ul class="nav nav-tabs resultSelector" role="tablist" ng-init="weatherType = 'total'">
        <li role="presentation" ng-class="{'active':weatherType === 'total'}"><a href="#home" aria-controls="home" role="tab" data-toggle="tab" ng-click="weatherType = 'total'">Total</a></li>
        <li role="presentation" ng-class="{'active':weatherType === 'dry'}"><a href="#profile" aria-controls="profile" role="tab" data-toggle="tab" ng-click="weatherType = 'dry'">Dry</a></li>
        <li role="presentation" ng-class="{'active':weatherType === 'wet'}"><a href="#messages" aria-controls="messages" role="tab" data-toggle="tab" ng-click="weatherType = 'wet'">Wet</a></li>
    </ul>
    <br/>
    @*<div class="resultSelector" ng-init="weatherType = 'total'">
        <label class="btn btn-neptune" ng-class="{'active':weatherType === 'total'}" ng-click="weatherType = 'total'">
            <input type="radio" name="inlineRadioOptions" id="inlineRadio3" value="total" ng-model="model.weatherType" style="visibility:hidden; width:0px;"> Total
        </label>
        <label class="btn btn-neptune" ng-class="{'active':weatherType === 'dry'}" ng-click="weatherType = 'dry'">
            <input type="radio" name="inlineRadioOptions" id="inlineRadio1" value="dry" ng-model="model.weatherType" style="visibility:hidden; width:0px;"> Dry
        </label>
        <label class="btn btn-neptune" ng-class="{'active':weatherType === 'wet'}" ng-click="weatherType = 'wet'">
            <input type="radio" name="inlineRadioOptions" id="inlineRadio2" value="wet" ng-model="model.weatherType" style="visibility:hidden; width:0px;"> Wet
        </label>
    </div>*@
    <div ng-if="modelResults"></div>
    <table class="table table-responsive table-striped table-condensed modelResults" ng-if="weatherType ==='wet'">
        <thead>
        <tr style="text-align: center;">
            <th class="left">Water Balance Components</th>
            <th>Volume (cu-ft/yr)</th>
            <th>Percent of Inflow</th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td class="left">To BMP</td>
                <td><span ng-bind='modelResults.WetWeatherInflow | number'></span></td>
                <td>--</td>
            </tr>
            <tr>
                <td class="left">Treated and Discharged</td>
                <td><span ng-bind='modelResults.WetWeatherTreated | number'></span></td>
                <td><span ng-bind='100 * modelResults.WetWeatherTreated / modelResults.WetWeatherInflow | number: 0'></span>%</td>
            </tr>
            <tr>
                <td class="left">Retained or Recycled</td>
                <td><span ng-bind='modelResults.WetWeatherRetained | number'></span></td>
                <td><span ng-bind='100 * modelResults.WetWeatherRetained / modelResults.WetWeatherInflow | number: 0'></span>%</td>
            </tr>
            <tr>
                <td class="left">Untreated (Bypass or Overflow)</td>
                <td><span ng-bind='modelResults.WetWeatherUntreated | number'></span></td>
                <td><span ng-bind='100 * modelResults.WetWeatherUntreated / modelResults.WetWeatherInflow | number: 0'></span>%</td>
            </tr>
        </tbody>
        <thead>
            <tr style="text-align: center;">
                <th class="left">Pollutant</th>
                <th>Load Reduced</th>
                <th>Percent Reduced</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td class="left">Total Suspended Solids</td>
                <td><span ng-bind="modelResults.WetWeatherTSSRemoved | number"></span> kg</td>
                <td><span ng-bind="100 * modelResults.WetWeatherTSSRemoved/modelResults.WetWeatherTSSInflow | number:0"></span>%</td>
            </tr>
            <tr>
                <td class="left">Total Nitrogen</td>
                <td><span ng-bind="modelResults.WetWeatherTNRemoved | number"></span> kg</td>
                <td><span ng-bind="100 * modelResults.WetWeatherTNRemoved/modelResults.WetWeatherTNInflow | number:0"></span>%</td>
            </tr>
            <tr>
                <td class="left">Total Phosphorous</td>
                <td><span ng-bind="modelResults.WetWeatherTPRemoved | number"></span> kg</td>
                <td><span ng-bind="100 * modelResults.WetWeatherTPRemoved/modelResults.WetWeatherTPInflow | number:0"></span>%</td>
            </tr>
            <tr>
                <td class="left">Fecal Coliform</td>
                <td><span ng-bind="modelResults.WetWeatherFCRemoved | number"></span> billion CFUs</td>
                <td><span ng-bind="100 * modelResults.WetWeatherFCRemoved/modelResults.WetWeatherFCInflow | number:0"></span>%</td>
            </tr>
            <tr>
                <td class="left">Total Copper</td>
                <td><span ng-bind="modelResults.WetWeatherTCuRemoved | number"></span> g</td>
                <td><span ng-bind="100 * modelResults.WetWeatherTCuRemoved/modelResults.WetWeatherTCuInflow | number:0"></span>%</td>
            </tr>
            <tr>
                <td class="left">Total Lead</td>
                <td><span ng-bind="modelResults.WetWeatherTPbRemoved | number"></span> g</td>
                <td><span ng-bind="100 * modelResults.WetWeatherTPbRemoved/modelResults.WetWeatherTPbInflow | number:0"></span>%</td>
            </tr>
            <tr>
                <td class="left">Total Zinc</td>
                <td><span ng-bind="modelResults.WetWeatherTZnRemoved | number"></span> g</td>
                <td><span ng-bind="100 * modelResults.WetWeatherTZnRemoved/modelResults.WetWeatherTZnInflow | number:0"></span>%</td>
            </tr>
        </tbody>
    </table>
</div>

<a href="@ViewDataTyped.AboutModelingBMPPerformanceURL">About Modeling BMP Performance</a>

<script>
    angular.module("NeptuneApp").controller("ModeledBMPPerformanceController",
        function($scope) {
            jQuery.ajax("@ViewDataTyped.ModelingResultsUrl").done(function(data) {
                $scope.modelResults = data;
                $scope.$apply();
            }).fail(function(error) {
                console.log(error);
            });

            $scope.weatherTye = 'total';
            
            $scope.loadReduction = function (pollutant) {
                return loadRemoved(pollutant);
            };
            
            $scope.percentReduction = function(pollutant) {
                var reductionFactor = (loadRemoved(pollutant) / load(pollutant)) || 0;

                return (100 * reductionFactor);
            }

            $scope.pollutants = [
                {
                    "long_name": "Total Suspended Solids",
                    "short_name": "TSS",
                    "concentration_unit": "mg/L",
                    "load_unit": "lbs"
                },
                { "long_name": "Total Nitrogen", "short_name": "TN", "concentration_unit": "mg/L", "load_unit": "lbs" },
                {
                    "long_name": "Total Phosphorus",
                    "short_name": "TP",
                    "concentration_unit": "mg/L",
                    "load_unit": "lbs"
                }, { "long_name": "Total Zinc", "short_name": "TZn", "concentration_unit": "ug/L", "load_unit": "lbs" },
                {
                    "long_name": "Dissolved Zinc",
                    "short_name": "DZn",
                    "concentration_unit": "ug/L",
                    "load_unit": "lbs"
                },
                { "long_name": "Total Copper", "short_name": "TCu", "concentration_unit": "ug/L", "load_unit": "lbs" },
                {
                    "long_name": "Dissolved Copper",
                    "short_name": "DCu",
                    "concentration_unit": "ug/L",
                    "load_unit": "lbs"
                }, { "long_name": "Total Lead", "short_name": "TPb", "concentration_unit": "ug/L", "load_unit": "lbs" },
                {
                    "long_name": "Fecal Coliform",
                    "short_name": "FC",
                    "concentration_unit": "MPN/_100mL",
                    "load_unit": "mpn"
                }
            ];

            $scope.volumeTreated = function () {
                var value;
                if ($scope.weatherType === "wet") {
                    value = Number($scope.modelResults["runoff_volume_cuft_inflow"]);
                } else if ($scope.weatherType === "dry") {
                    value = Number($scope.modelResults["summer_dry_weather_flow_cuft_inflow"]) +
                        Number($scope.modelResults["winter_dry_weather_flow_cuft_inflow"]);
                } else if ($scope.weatherType === "total") {
                    value = Number($scope.modelResults["runoff_volume_cuft_inflow"]) +
                        Number($scope.modelResults["summer_dry_weather_flow_cuft_inflow"]) +
                        Number($scope.modelResults["winter_dry_weather_flow_cuft_inflow"]);
                }
                return value;
            }

            $scope.volumeReduced = function(){
                var value;
                if ($scope.weatherType === "wet") {
                    value = Number($scope.modelResults["runoff_volume_cuft_captured"]);
                } else if ($scope.weatherType === "dry") {
                    value = Number($scope.modelResults["summer_dry_weather_flow_cuft_captured"]) +
                        Number($scope.modelResults["winter_dry_weather_flow_cuft_captured"]);
                } else if ($scope.weatherType === "total") {
                    value = Number($scope.modelResults["runoff_volume_cuft_captured"]) +
                        Number($scope.modelResults["summer_dry_weather_flow_cuft_captured"]) +
                        Number($scope.modelResults["winter_dry_weather_flow_cuft_captured"]);
                }

                return value;
            }

            $scope.volumeBypassed = function () {
                var value;
                if ($scope.weatherType === "wet") {
                    value = Number($scope.modelResults["runoff_volume_cuft_bypassed"]);
                } else if ($scope.weatherType === "dry") {
                    value = Number($scope.modelResults["summer_dry_weather_flow_cuft_bypassed"]) +
                        Number($scope.modelResults["winter_dry_weather_flow_cuft_bypassed"]);
                } else if ($scope.weatherType === "total") {
                    value = Number($scope.modelResults["runoff_volume_cuft_bypassed"]) +
                        Number($scope.modelResults["summer_dry_weather_flow_cuft_bypassed"]) +
                        Number($scope.modelResults["winter_dry_weather_flow_cuft_bypassed"]);
                }
                return value;
            }

            function load(pollutant) {
                var field = loadingFieldName(pollutant);
                
                var summer = "summer_dw" + field;
                var winter = "winter_dw" + field;

                if ($scope.weatherType === 'wet') {
                    return Number($scope.modelResults[field]) || 0;
                } else if ($scope.weatherType === 'dry') {
                    
                    return Number($scope.modelResults[summer]) + Number($scope.modelResults[winter]);
                } else if ($scope.weatherType === 'total') {
                    return (Number($scope.modelResults[summer]) || 0) +
                        (Number($scope.modelResults[winter]) || 0) +
                        (Number($scope.modelResults[field]) ||0);
                }
            }

            function loadingFieldName(pollutant) {
                return pollutant.short_name + "_load_" + pollutant.load_unit + "_inflow";
            }

            function loadReducedFieldName(pollutant) {
                return pollutant.short_name +
                    "_load_" +
                    pollutant.load_unit +
                    "_removed";
            }

            function loadRemoved(pollutant) {
                var field = loadReducedFieldName(pollutant);
                
                var summer = "summer_dw" + field;
                var winter = "winter_dw" + field;

                if ($scope.weatherType === 'wet') {
                    return Number($scope.modelResults[field]) || 0;
                } else if ($scope.weatherType === 'dry') {
                    
                    return Number($scope.modelResults[summer]) + Number($scope.modelResults[winter]);
                } else if ($scope.weatherType === 'total') {
                    return (Number($scope.modelResults[summer]) || 0) +
                        (Number($scope.modelResults[winter]) || 0) +
                        (Number($scope.modelResults[field]) ||0);
                }

            }

        });

</script>