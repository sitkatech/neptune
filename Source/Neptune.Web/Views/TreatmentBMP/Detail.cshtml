@*-----------------------------------------------------------------------
    <copyright file="Detail.cshtml" company="Tahoe Regional Planning Agency">
    Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common
@using Neptune.Web.Models
@using Neptune.Web.Views
@using Neptune.Web.Views.Shared
@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.DhtmlWrappers
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using Neptune.Web.Views.Shared.HRUCharacteristics
@using Neptune.Web.Views.Shared.SortOrder
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.TreatmentBMP.Detail

@section JavascriptAndStylesContent
{
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    @{ DhtmlxGridIncludes.RenderPartialView(Html); }
    <script src="@Url.Content("~/Views/FundingEvent/EditFundingEventFundingSourceController.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.css")" rel="stylesheet" type="text/css" />
    <style>
        .extra-small {
            font-size: 75%;
            margin-bottom: 0;
        }

        .unverify-inventory-btn {
            font-size: 11px;
            margin: 0 5px 0 0;
            text-align: right;
        }

        .treatmentBMPLocationLegend .glyphicon-stop {
            margin-right: 5px;
        }

        #legend {
            padding: 10px;
            box-shadow: 0 1px 5px rgba(0, 0, 0, 0.65);
        }
    </style>
}

@section RightOfPageTitle
{
    @if (ViewDataTyped.CurrentPersonCanManage)
    {
        <div class="pull-right">
            <div style="display: inline-block; vertical-align: top;">
                @if (ViewDataTyped.TreatmentBMP.InventoryIsVerified)
                {
                    <div style="text-align: center">
                        <i class="helpicon glyphicon glyphicon-ok helpiconGridBlue" style="cursor: default;"></i>
                        Inventory has been verified
                    </div>

                    if (ViewDataTyped.CanManageStormwaterJurisdiction)
                    {
                        @ModalDialogFormHelper.ModalDialogFormLink("Mark as Provisional", ViewDataTyped.VerifiedUnverifiedUrl, "Mark BMP Record as Provisional?", 400, "Continue", "Cancel", new List<string> { "btn", "btn-neptune" }, null, null)
                    }
                }
                else
                {
                    <div style="text-align: center">
                        <i class="helpicon glyphicon glyphicon-warning-sign helpiconGridBlue" style="cursor: default;"></i>
                        Inventory has not been verified
                    </div>

                    if (ViewDataTyped.CanManageStormwaterJurisdiction)
                    {
                        @ModalDialogFormHelper.ModalDialogFormLink("Verify Inventory", ViewDataTyped.VerifiedUnverifiedUrl, "Verify Inventory?", 400, "Continue", "Cancel", new List<string> { "btn", "btn-neptune" }, null, null)
                    }
                }

                @ModalDialogFormHelper.ModalDialogFormLink("Begin Field Visit", ViewDataTyped.NewFieldVisitUrl, "Begin Field Visit", 400, "Continue", "Cancel", new List<string> { "btn", "btn-neptune" }, null, null)
            </div>
        </div>
    }
}

@if (ViewDataTyped.DelineationErrors.Any())
{
    <div class="alert alert-info">
        <div class="pull-right">
            <a class="btn btn-xs btn-primary" href="@ViewDataTyped.DelineationMapUrl">Review and Edit on the Delineation Map</a>
        </div>
        This BMP delineation may have errors:
        <ul>
            @foreach (var delineationError in ViewDataTyped.DelineationErrors)
            {
                <li>@delineationError</li>
            }
        </ul>
    </div>
}

@if (ViewDataTyped.OpenRevisionRequest != null)
{
    <div class="alert alert-info">
        There is an open <a href="@ViewDataTyped.OpenRevisionRequest.GetDetailUrl()">Regional Subbasin Revision Request</a> relating to this BMP.
    </div>
}

<div class="row">
    <div class="col-xs-12 col-sm-6">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Basics
                @if (ViewDataTyped.CurrentPersonCanManage)
                {
                    <span class="pull-right">
                        <a href="@ViewDataTyped.TreatmentBMP.GetEditUrl()">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    </span>
                }
            </div>
            <div class="panel-body">
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Name</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.TreatmentBMPName</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">
                        @ModalDialogFormHelper.ModalDialogFormLink("Change Type", ViewDataTyped.ChangeTreatmentBMPTypeUrl, "Change BMP Type", 600, "Convert", "Cancel", new List<string> { "btn", "btn-neptune", "btn-xs" }, null, null)
                        &nbsp;&nbsp;
                        @Html.LabelWithSugarFor(FieldDefinition.TreatmentBMPType, "Type")
                    </label>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.TreatmentBMPType.GetDisplayNameAsUrl()
                    </div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinition.Jurisdiction, "Jurisdiction")</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.StormwaterJurisdiction.Organization.GetDisplayNameAsUrl()</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Owner</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.OwnerOrganization.GetDisplayNameAsUrl()</div>
                </div>
                <hr />
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Year Built</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.YearBuilt</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">ID in System of Record</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.SystemOfRecordID</div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Water Quality<br>Management Plan</label>
                    <div class="col-sm-7">
                        @(ViewDataTyped.TreatmentBMP.WaterQualityManagementPlan != null ? ViewDataTyped.TreatmentBMP.WaterQualityManagementPlan.GetDisplayNameAsUrl() : new HtmlString("<em class=\"text-muted\">Has not been linked to a WQMP</em>"))
                    </div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinition.SizingBasis)</label>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.SizingBasisType.SizingBasisTypeDisplayName
                    </div>
                </div>
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinition.TrashCaptureStatus)</label>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.TrashCaptureStatusType.TrashCaptureStatusTypeDisplayName
                    </div>
                </div>
                @if (ViewDataTyped.DisplayTrashCaptureEffectiveness)
                {
                    <div class="row">
                        <label class="col-sm-5 control-label text-right">Trash Capture Effectiveness</label>
                        <div class="col-sm-7">
                            @ViewDataTyped.TrashCaptureEffectiveness
                        </div>
                    </div>
                }
                <hr />
                <div class="row">
                    <label class="col-sm-5 control-label text-right">@Html.LabelWithSugarFor(FieldDefinition.RequiredLifespanOfInstallation)</label>
                    <div class="col-sm-7">
                        @if (ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanType == TreatmentBMPLifespanType.FixedEndDate)
                        {
                            @* Because of database constraints, TreatmentBMPLifespanEndDate will never be null if LifespanType = FixedEndDate *@
                            @(string.Format("Maintain until at least {0}", ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanEndDate.GetValueOrDefault().ToShortDateString()))
                        }
                        else
                        {
                            @(ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanType != null ? ViewDataTyped.TreatmentBMP.TreatmentBMPLifespanType.TreatmentBMPLifespanTypeDisplayName : "Unknown")
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-5 control-label text-right ">
                        <label>@Html.LabelWithSugarFor(FieldDefinition.RequiredFieldVisitsPerYear)</label>
                    </div>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.RequiredFieldVisitsPerYear.ToString()
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-5 control-label text-right ">
                        <label>@Html.LabelWithSugarFor(FieldDefinition.RequiredPostStormFieldVisitsPerYear)</label>
                    </div>
                    <div class="col-sm-7">
                        @ViewDataTyped.TreatmentBMP.RequiredPostStormFieldVisitsPerYear.ToString()
                    </div>
                </div>
                <hr />
                <div class="row">
                    <label class="col-sm-5 control-label text-right">Notes</label>
                    <div class="col-sm-7">@ViewDataTyped.TreatmentBMP.Notes</div>
                </div>
            </div>
        </div>
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Performance / Modeling Attributes
                <span class="pull-right">
                    @if (ViewDataTyped.CurrentPersonCanManage && ViewDataTyped.HasModelingAttributes)
                    {
                        <a href="@ViewDataTyped.EditTreatmentBMPPerformanceAndModelingAttributesUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    }
                </span>
            </div>
            <div class="panel-body">

                @if (!ViewDataTyped.HasModelingAttributes)
                {
                    <p class="systemText">
                        This type of treatment BMP does not have any Performance / Modeling Attributes
                    </p>
                }
                else
                {
                    <table class="table table-condensed">
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th class="text-right">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWatershed)
                                </td>
                                <td class="text-right">@(ViewDataTyped.TreatmentBMP.Watershed != null ? ViewDataTyped.TreatmentBMP.Watershed.WatershedName : string.Empty)</td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignStormwaterDepth)
                                </td>
                                <td class="text-right">@(ViewDataTyped.TreatmentBMP.PrecipitationZone != null ? string.Format("{0} inches", ViewDataTyped.TreatmentBMP.PrecipitationZone.DesignStormwaterDepthInInches) : string.Empty)</td>
                            </tr>
                            @switch (ViewDataTyped.TreatmentBMP.TreatmentBMPType.TreatmentBMPModelingType.ToEnum)
                            {
                                case TreatmentBMPModelingTypeEnum.BioinfiltrationBioretentionWithRaisedUnderdrain:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForStorageVolumeBelowLowestOutletElevation)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.StorageVolumeBelowLowestOutletElevation, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMediaBedFootprint)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.MediaBedFootprint, "sq ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignMediaFiltrationRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignMediaFiltrationRate, "in/hr")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingHydrologicSoilGroupHSG)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayUnderlyingHydrologicSoilGroup()</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.BioretentionWithNoUnderdrain:
                                case TreatmentBMPModelingTypeEnum.InfiltrationBasin:
                                case TreatmentBMPModelingTypeEnum.InfiltrationTrench:
                                case TreatmentBMPModelingTypeEnum.PermeablePavement:
                                case TreatmentBMPModelingTypeEnum.UndergroundInfiltration:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForInfiltrationSurfaceArea)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.InfiltrationSurfaceArea, "sq ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingInfiltrationRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.UnderlyingInfiltrationRate, "in/hr")</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.BioretentionWithUnderdrainAndImperviousLiner:
                                case TreatmentBMPModelingTypeEnum.SandFilters:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMediaBedFootprint)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.MediaBedFootprint, "sq ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignMediaFiltrationRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignMediaFiltrationRate, "in/hr")</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.CisternsForHarvestAndUse:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWinterHarvestedWaterDemand)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.WinterHarvestedWaterDemand, "gpd")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForSummerHarvestedWaterDemand)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.SummerHarvestedWaterDemand, "gpd")</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.ConstructedWetland:
                                case TreatmentBMPModelingTypeEnum.WetDetentionBasin:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForPermanentPoolorWetlandVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.PermanentPoolorWetlandVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignResidenceTimeforPermanentPool)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignResidenceTimeforPermanentPool, "days")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWaterQualityDetentionVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.WaterQualityDetentionVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDrawdownTimeforWQDetentionVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DrawdownTimeforWQDetentionVolume, "hours")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWinterHarvestedWaterDemand)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.WinterHarvestedWaterDemand, "gpd")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForSummerHarvestedWaterDemand)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.SummerHarvestedWaterDemand, "gpd")</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.DryExtendedDetentionBasin:
                                case TreatmentBMPModelingTypeEnum.FlowDurationControlBasin:
                                case TreatmentBMPModelingTypeEnum.FlowDurationControlTank:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveBMPVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveBMPVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForStorageVolumeBelowLowestOutletElevation)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.StorageVolumeBelowLowestOutletElevation, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForEffectiveFootprint)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.EffectiveFootprint, "sq ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalDrawdownTime)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalDrawdownTime, "hours")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingHydrologicSoilGroupHSG)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayUnderlyingHydrologicSoilGroup()</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.DryWeatherTreatmentSystems:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignDryWeatherTreatmentCapacity)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignDryWeatherTreatmentCapacity, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForAverageTreatmentFlowrate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.AverageTreatmentFlowrate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMonthsofOperation)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayMonthsOfOperation()</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.Drywell:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTotalEffectiveDrywellBMPVolume)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TotalEffectiveDrywellBMPVolume, "cu ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForInfiltrationDischargeRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.InfiltrationDischargeRate, "cfs")</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.HydrodynamicSeparator:
                                case TreatmentBMPModelingTypeEnum.ProprietaryBiotreatment:
                                case TreatmentBMPModelingTypeEnum.ProprietaryTreatmentControl:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTreatmentRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TreatmentRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.LowFlowDiversions:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDesignLowFlowDiversionCapacity)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DesignLowFlowDiversionCapacity, "gpd")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForAverageDivertedFlowrate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.AverageDivertedFlowrate, "gpd")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForMonthsofOperation)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayMonthsOfOperation()</td>
                                    </tr>
                                    break;
                                case TreatmentBMPModelingTypeEnum.VegetatedFilterStrip:
                                case TreatmentBMPModelingTypeEnum.VegetatedSwale:
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForRoutingConfiguration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayRoutingConfiguration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForDiversionRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.DiversionRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTimeofConcentration)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayTimeOfConcentration()</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForTreatmentRate)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.TreatmentRate, "cfs")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForWettedFootprint)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.WettedFootprint, " sq ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForEffectiveRetentionDepth)
                                        </td>
                                        <td class="text-right">@ViewDataTyped.DisplayModelingAttributeValue(x => x.EffectiveRetentionDepth, " ft")</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelWithSugarFor(ViewDataTyped.FieldDefinitionForUnderlyingHydrologicSoilGroupHSG)
                                        </td>
                                        <td class="text-right">
                                            @ViewDataTyped.DisplayUnderlyingHydrologicSoilGroup()
                                        </td>
                                    </tr>
                                    break;
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                @CustomAttributeTypePurpose.OtherDesignAttributes.CustomAttributeTypePurposeDisplayName
                <span class="pull-right">
                    @if (ViewDataTyped.CurrentPersonCanManage && ViewDataTyped.TreatmentBMP.TreatmentBMPType.TreatmentBMPTypeCustomAttributeTypes.Any(x => x.CustomAttributeType.CustomAttributeTypePurpose == CustomAttributeTypePurpose.OtherDesignAttributes))
                    {
                        <a href="@ViewDataTyped.EditTreatmentBMPOtherDesignAttributesUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    }

                </span>
            </div>
            <div class="panel-body">
                @if (ViewDataTyped.TreatmentBMP.TreatmentBMPType.TreatmentBMPTypeCustomAttributeTypes.All(x => x.CustomAttributeType.CustomAttributeTypePurpose != CustomAttributeTypePurpose.OtherDesignAttributes))
                {
                    <p class="systemText">
                        This type of treatment BMP does not have any @CustomAttributeTypePurpose.OtherDesignAttributes.CustomAttributeTypePurposeDisplayName
                    </p>
                }
                else
                {
                    <table class="table table-condensed">
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th class="text-right">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var treatmentBMPTypeAttributeType in ViewDataTyped.TreatmentBMP.TreatmentBMPType.TreatmentBMPTypeCustomAttributeTypes.Where(x => x.CustomAttributeType.CustomAttributeTypePurpose == CustomAttributeTypePurpose.OtherDesignAttributes).ToList().SortByOrderThenName())
                            {
                                <tr>
                                    <td>
                                        @(ViewDataTyped.UserIsAdmin ? treatmentBMPTypeAttributeType.CustomAttributeType.GetDisplayNameAsUrl() : new HtmlString(treatmentBMPTypeAttributeType.CustomAttributeType.CustomAttributeTypeName))
                                        <span class="help-block extra-small">@treatmentBMPTypeAttributeType.CustomAttributeType.CustomAttributeTypeDescription</span>
                                    </td>
                                    <td class="text-right" style="min-width: 150px">@ViewDataTyped.TreatmentBMP.GetCustomAttributeValueWithUnits(treatmentBMPTypeAttributeType)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
    <div class="col-xs-12 col-sm-6">
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Images
                <span class="pull-right">
                    @if (ViewDataTyped.CurrentPersonCanManage)
                    {
                        <a href="@ViewDataTyped.ManageTreatmentBMPImagesUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    }
                </span>
            </div>
            <div class="panel-body">
                @{ ImageCarousel.RenderPartialView(Html, ViewDataTyped.ImageCarouselViewData); }
            </div>
        </div>
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                Location
                @if (ViewDataTyped.CurrentPersonCanManage)
                {
                    <span class="pull-right">
                        <a href="@ViewDataTyped.LocationEditUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                    </span>
                }
            </div>
            <div class="panel-body" id="mapContainer">
                <div class="row">
                    <div class="col-xs-12">
                        <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 500px;">
                        </div>
                    </div>

                    <div id="legend" style="display: none;">
                        <div class="treatmentBMPLocationLegend" style="margin-left: 10px">
                            <div>
                                <span class="glyphicon glyphicon-stop" style="color: #935F59"></span>Treatment BMP Location
                            </div>
                            <div>
                                <span class="glyphicon glyphicon-stop" style="color: blue"></span>Delineation Area
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row" style="margin-top: 10px;">
                    <div class="col-xs-5 control-label text-center">
                        <p style="margin-top: 8px;">@Html.LabelWithSugarFor(FieldDefinition.DelineationType)</p>
                    </div>
                    <div class="col-xs-4 text-center">
                        <p style="margin-top: 8px;">@ViewDataTyped.TreatmentBMP.GetDelineationTypeDisplay()</p>
                    </div>
                    <div class="col-xs-3 text-center">
                        @if (ViewDataTyped.CanEditStormwaterJurisdiction)
                        {
                            <a href="@ViewDataTyped.DelineationMapUrl" class="btn btn-sm btn-neptune">Edit</a>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-5 control-label text-center">
                        <p style="margin-top: 8px;"><label>Delineation Area (ac)</label></p>
                    </div>
                    <div class="col-xs-4 text-center">
                        <p style="margin-top: 8px;">@ViewDataTyped.DelineationArea</p>
                    </div>
                </div>
                @if (ViewDataTyped.TreatmentBMP.Delineation != null)
                {
                    <div class="row">
                        <div class="col-xs-5 control-label text-center">
                            <p style="margin-top: 8px;"><label>Delineation Status</label></p>
                        </div>
                        <div class="col-xs-4 text-center">
                            <p style="margin-top: 8px;">@ViewDataTyped.DelineationStatus</p>
                        </div>
                    </div>
                }
            </div>

        </div>
        <div class="panel panelNeptune">
            <div class="panel-heading panelTitle">
                <div class="pull-right">
                    @ModalDialogFormHelper.ModalDialogFormLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-refresh").ToString(), ViewDataTyped.HRURefreshUrl, "Refresh HRU Statistics", new List<string>(), ViewDataTyped.TreatmentBMP.Delineation != null && ViewDataTyped.CurrentPerson.IsAdministrator())
                </div>
                Land Use Statistics
            </div>
            <div class="panel-body">
                @if (ViewDataTyped.TreatmentBMP.HRUCharacteristics.Any() && ViewDataTyped.TreatmentBMP.Delineation != null)
                {
                    HRUCharacteristics.RenderPartialView(Html, ViewDataTyped.HRUCharacteristicsViewData);
                }
                else if (ViewDataTyped.TreatmentBMP.Delineation == null)
                {
                    <p class="systemText">No delineation is provided for this @FieldDefinition.TreatmentBMP.GetFieldDefinitionLabel(). Land Use Statistics cannot be determined until a <a href="@ViewDataTyped.DelineationMapUrl">delineation is provided</a>.</p>
                }
                else
                {
                    <p class="systemText">Land Use Statistics have not been calculated for this @FieldDefinition.TreatmentBMP.GetFieldDefinitionLabel()</p>
                }
            </div>

        </div>

    </div>

    <div class="col-xs-12">
        <div class="row">
            <div class="col-xs-12">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Field Visits
                        @if (ViewDataTyped.CurrentPersonCanManage)
                        {
                            <span class="pull-right">
                                @ModalDialogFormHelper.ModalDialogFormLink("<span class='glyphicon glyphicon-plus'></span>", ViewDataTyped.NewFieldVisitUrl, "Begin Field Visit", 400, "Continue", "Cancel", new List<string>(), null, null)
                            </span>
                        }
                    </div>
                    <div class="panel-body">
                        @if (ViewDataTyped.TreatmentBMP.FieldVisits.Any())
                        {
                            @Html.DhtmlxGrid(ViewDataTyped.FieldVisitGridSpec, ViewDataTyped.FieldVisitGridName, ViewDataTyped.FieldVisitGridDataUrl, null, DhtmlxGridResizeType.VerticalFillHorizontalAutoFit)
                        }
                        @if (!ViewDataTyped.TreatmentBMP.FieldVisits.Any() && ViewDataTyped.TreatmentBMP.IsBenchmarkAndThresholdsComplete())
                        {
                            <p class="systemText">
                                No @FieldDefinition.FieldVisit.GetFieldDefinitionLabelPluralized() for this BMP.
                            </p>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12 col-sm-6">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Funding Events
                        @if (ViewDataTyped.CurrentPersonCanManage)
                        {
                            <span class="pull-right">
                                @ModalDialogFormHelper.ModalDialogFormLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-plus").ToString(), ViewDataTyped.NewFundingSourcesUrl, "New Funding Event", new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                            </span>
                        }
                    </div>
                    <div class="panel-body" style="max-height: 800px; overflow: auto;">
                        @if (ViewDataTyped.TreatmentBMP.FundingEvents.Any())
                        {
                            foreach (var fundingEvent in ViewDataTyped.TreatmentBMP.FundingEvents.OrderBy(x => x.FundingEventType.SortOrder))
                            {
                                <div class="row">
                                    <div class="col-sm-9">
                                        <h4>@fundingEvent.GetDisplayName()</h4>
                                    </div>
                                    <div class="col-sm-3 text-right">
                                        @ModalDialogFormHelper.ModalDialogFormLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit").ToString(), fundingEvent.GetEditUrl(), "Edit Funding Event", new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                                        @ModalDialogFormHelper.MakeDeleteLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-trash").ToString(), fundingEvent.GetDeleteUrl(), new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                                    </div>
                                </div>
                                <p>@fundingEvent.Description</p>

                                if (fundingEvent.FundingEventFundingSources.Any())
                                {
                                    <div class="table-responsive">
                                        <div style="overflow-x: auto">
                                            <table class="table table-striped table-condensed table-hover table-bordered">
                                                <tr>
                                                    <th>@Html.LabelWithSugarFor(FieldDefinition.FundingSource)</th>
                                                    <th style="text-align: right">Amount</th>
                                                </tr>
                                                @foreach (var fundingEventFundingSource in fundingEvent.FundingEventFundingSources.OrderBy(x => x.FundingSource.GetDisplayName()))
                                                {
                                                    <tr>
                                                        <td>@Html.Raw(fundingEventFundingSource.FundingSource.GetDisplayNameAsUrl())</td>
                                                        <th class="text-right">@fundingEventFundingSource.GetAmountIfSpecified()</th>
                                                    </tr>
                                                }
                                                <tr>
                                                    <th>Total</th>
                                                    <th class="text-right">@fundingEvent.FundingEventFundingSources.Sum(x => x.Amount).ToStringCurrency()</th>
                                                </tr>

                                            </table>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <p class="systemText">No Funding Sources identified for this Funding Event</p>
                                }
                            }
                        }
                        else
                        {
                            <p class="systemText">No Funding Events identified for this Treatment BMP</p>
                        }
                    </div>

                </div>
            </div>
            <div class="col-xs-12 col-sm-6">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Benchmark &amp; Threshold Values
                        <span class="pull-right">
                            @if (ViewDataTyped.CanEditBenchmarkAndThresholds)
                            {
                                <a href="@ViewDataTyped.AddBenchmarkAndThresholdUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-edit")</a>
                            }

                        </span>
                    </div>
                    <div class="panel-body">
                        @if (!ViewDataTyped.HasSettableBenchmarkAndThresholdValues)
                        {
                            <p class="systemText">
                                This type of treatment BMP does not have settable benchmark and threshold values
                            </p>
                        }
                        else
                        {
                            <table class="table table-condensed">
                                <thead>
                                    <tr>
                                        <th>Observation Type</th>
                                        <th>Benchmark</th>
                                        <th>Threshold</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var treatmentBMPAssessmentObservationType in ViewDataTyped.TreatmentBMP.TreatmentBMPType.GetObservationTypesForAssessment().Select(x => x.TreatmentBMPAssessmentObservationType).Where(x => x.GetHasBenchmarkAndThreshold()))
                                    {
                                        <tr>
                                            <td>@treatmentBMPAssessmentObservationType.GetDisplayNameAsUrl()</td>
                                            <td>@treatmentBMPAssessmentObservationType.GetFormattedBenchmarkValue(treatmentBMPAssessmentObservationType.GetBenchmarkValue(ViewDataTyped.TreatmentBMP))</td>
                                            <td>@treatmentBMPAssessmentObservationType.GetFormattedThresholdValue(treatmentBMPAssessmentObservationType.GetThresholdValue(ViewDataTyped.TreatmentBMP), treatmentBMPAssessmentObservationType.GetBenchmarkValue(ViewDataTyped.TreatmentBMP))</td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-xs-12">
                <div class="panel panelNeptune">
                    <div class="panel-heading panelTitle">
                        Documents
                        <span class="pull-right">
                            @ModalDialogFormHelper.ModalDialogFormLink(BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-plus").ToString(), ViewDataTyped.NewTreatmentBMPDocumentUrl, "Upload New Document", new List<string>(), ViewDataTyped.CurrentPersonCanManage)
                        </span>
                    </div>
                    <div class="panel-body">
                        @if (ViewDataTyped.TreatmentBMP.TreatmentBMPDocuments.Any())
                        {
                            foreach (var treatmentBMPDocument in ViewDataTyped.TreatmentBMP.TreatmentBMPDocuments.OrderBy(x => x.DisplayName))
                            {
                                if (ViewDataTyped.CurrentPersonCanManage)
                                {
                                    <span>
                                        @ModalDialogFormHelper.ModalDialogFormLink("<i class='glyphicon glyphicon-edit' style='margin-right: 3px'></i>", treatmentBMPDocument.GetEditTreatmentBMPDocumentUrl(), "Edit Treatment BMP Document", new List<string>(), true)
                                        @ModalDialogFormHelper.MakeDeleteLink("<i class='glyphicon glyphicon-trash' style='margin-right: 3px'></i>", treatmentBMPDocument.GetDeleteTreatmentBMPDocumentUrl(), new List<string>(), true)
                                    </span>
                                }

                                <a href="@treatmentBMPDocument.FileResource.GetFileResourceUrl()">
                                    @treatmentBMPDocument.DisplayName <i class='glyphicon glyphicon-download' style='margin-right: 3px'></i>
                                </a>

                                <dl class="dl-horizontal">
                                    <dt>@Html.Label("Uploaded On")</dt>
                                    <dd>@treatmentBMPDocument.UploadDate.ToShortDateString()</dd>
                                    <dt>@Html.Label("File Type")</dt>
                                    <dd>@treatmentBMPDocument.FileResource.FileResourceMimeType.FileResourceMimeTypeDisplayName</dd>
                                    <dt>@Html.Label("Description")</dt>
                                    <dd>@treatmentBMPDocument.DocumentDescription</dd>
                                </dl>
                                <hr />
                            }
                        }
                        else
                        {
                            <p class="systemText">No documents have been uploaded for this @FieldDefinition.TreatmentBMP.GetFieldDefinitionLabel()</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var map;
    jQuery(document).ready(function() {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
        map = new NeptuneMaps.Map(mapInitJson, null, @Html.Raw(ViewDataTyped.MapServiceUrl.ToJS()));
        var regionalSubbasinLayer =
            map.addWmsLayer("OCStormwater:RegionalSubbasins",
                "<span><img src='/Content/img/legendImages/regionalSubbasin.png' height='12px' style='margin-bottom:3px;' /> Regional Subbasins</span>",
                { styles: "regional_subbasin_wide", maxZoom:22}, true);

        if (mapInitJson.DelineationLayer) {
            var delineationLayer = L.geoJSON(mapInitJson.DelineationLayer.GeoJsonFeatureCollection);
            delineationLayer.addTo(map.map);
            map.map.fitBounds(delineationLayer.getBounds());
        } else {
            map.map.setZoom(18);
        }

        var legend = new L.Control.Legend({
            position: 'topleft',
            collapsed: false,
            controlButton: {
                title: "Legend"
            }
        });
        map.map.addControl(legend);

        jQuery(".legend-container").append( jQuery("#legend") );
        jQuery(".legend-container").append( jQuery("#legend") );
        jQuery("#legend").css("display", "");
    });
</script>