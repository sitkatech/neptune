@*-----------------------------------------------------------------------
    <copyright file="Edit.cshtml" company="Tahoe Regional Planning Agency">
    Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Neptune.Web.Views.Shared
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.Models
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.TreatmentBMP.Edit

@section JavascriptAndStylesContent
{
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    <script src="@Url.Content("~/ScriptsCustom/Maps/NeptuneMaps.Stormwater.min.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/leaflet/leaflet.legend/leaflet-legend.css")" rel="stylesheet" type="text/css" />
}

@using (Html.BeginForm())
{
    <div class="formPage">
        <div class="row">
            <div class="col-xs-12">
                <div class="validationError">
                    @Html.ValidationSummary()
                </div>
            </div>
            <div class="col-xs-12">
                <div class="row">
                    <div class="col-xs-12 col-md-6">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    @Html.LabelWithSugarFor(m => m.StormwaterJurisdictionID, "Jurisdiction")
                                </div>
                                <div class="col-sm-7">
                                    @if (!ModelObjectHelpers.IsRealPrimaryKeyValue(Model.TreatmentBMPID))
                                    {
                                        @Html.DropDownListFor(m => m.StormwaterJurisdictionID, ViewDataTyped.StormwaterJurisdictionSelectListItems, new Dictionary<string, object> { { "style", "width: 100%" }, { "class", "form-control" } })
                                        @Html.ValidationMessageFor(m => m.StormwaterJurisdictionID)
                                    }
                                    else
                                    {
                                        <p class="form-control-static">@ViewDataTyped.TreatmentBMP.StormwaterJurisdiction.OrganizationDisplayName</p>
                                        @Html.HiddenFor(x => x.StormwaterJurisdictionID)
                                    }
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    @Html.LabelWithSugarFor(m => m.TreatmentBMPTypeID)
                                </div>
                                <div class="col-sm-7">
                                    @if (!ModelObjectHelpers.IsRealPrimaryKeyValue(Model.TreatmentBMPID))
                                    {
                                        @Html.DropDownListFor(m => m.TreatmentBMPTypeID, ViewDataTyped.TreatmentBMPTypeSelectListItems, new Dictionary<string, object> { { "style", "width: auto" }, { "class", "form-control" } })
                                        @Html.ValidationMessageFor(m => m.TreatmentBMPTypeID)
                                    }
                                    else
                                    {
                                        <p class="form-control-static">@ViewDataTyped.TreatmentBMP.TreatmentBMPType.TreatmentBMPTypeName</p>
                                        @Html.HiddenFor(m => m.TreatmentBMPTypeID)
                                    }

                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    @Html.LabelWithSugarFor(m => m.TreatmentBMPName)
                                </div>
                                <div class="col-sm-7">
                                    @Html.TextBoxFor(m => m.TreatmentBMPName, new Dictionary<string, object> { { "style", "width: auto" }, { "class", "form-control" } })
                                    @Html.ValidationMessageFor(m => m.TreatmentBMPName)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-offset-5 col-sm-7 col-xs-12"><em>Click the map to set the location of the Treatment BMP, or enter latitude and longitude below</em></div>

                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    <label>Longitude</label>
                                </div>
                                <div class="col-sm-7">
                                    @Html.TextBoxFor(x => x.TreatmentBMPPointX, new { type = "number", @class = "form-control", style = "width: auto;", step = "0.001" })
                                    @Html.ValidationMessageFor(x => x.TreatmentBMPPointX)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    <label>Latitude</label>
                                </div>
                                <div class="col-sm-7">
                                    @Html.TextBoxFor(x => x.TreatmentBMPPointY, new { type = "number", @class = "form-control", style = "width: auto;", step = "0.001" })
                                    @Html.ValidationMessageFor(x => x.TreatmentBMPPointY)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    <label>Notes</label>
                                </div>
                                <div class="col-sm-7">
                                    @Html.ValidationMessageFor(x => x.Notes)
                                    @Html.TextAreaWithMaxLengthFor(x => x.Notes, new TextAreaForExtensions.TextAreaDimensions(null, 4), null, new List<string> { "form-control" })
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    @Html.LabelWithSugarFor(m => m.SystemOfRecordID)
                                </div>
                                <div class="col-sm-7">
                                    @Html.TextBoxFor(m => m.SystemOfRecordID, new Dictionary<string, object> { { "style", "width: auto" }, { "class", "form-control" } })
                                    @Html.ValidationMessageFor(m => m.SystemOfRecordID)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    @Html.LabelWithSugarFor(m => m.OwnerOrganizationID)
                                </div>
                                <div class="col-sm-7">
                                    @Html.SearchableDropDownListFor(m => m.OwnerOrganizationID, ViewDataTyped.OwnerOrganizationSelectListItems)
                                    @Html.ValidationMessageFor(m => m.OwnerOrganizationID)
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-sm-5 control-label">
                                    @Html.LabelWithSugarFor(m => m.YearBuilt)
                                </div>
                                <div class="col-sm-7">
                                    @Html.TextBoxFor(m => m.YearBuilt, new Dictionary<string, object> { { "style", "width: auto" }, { "class", "form-control" }, { "type", "number" } })
                                    @Html.ValidationMessageFor(m => m.YearBuilt)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-md-6" id="mapContainer">
                        <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 500px;"></div>
                        <p class="figure-caption">Click the map to set the location of the Treatment BMP, or enter latitude and longitude.</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12" style="text-align: right">
                        <hr />
                        <a href="@ViewDataTyped.TreatmentBMPIndexUrl" class="btn btn-neptune">Cancel</a>
                        <button action="p" type="submit" class="btn btn-neptune">Save</button>
                    </div>
                    @Html.HiddenFor(x => x.TreatmentBMPID)
                </div>
            </div>
        </div>
    </div>
}



<script type="text/javascript" language="javascript">
    // we are extending Neptune Maps to handle the edit project locations functinality
    NeptuneMaps.Map.prototype.changeMarkerOnMap = function(self, e)
    {
        self.removeLayerFromMap(self.currentMarker);
        self.currentMarker = L.marker(e.latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: "#935F59", size: "m" }) });
        self.currentMarker.addTo(self.map);
        self.treatmentBMPPointYField.val(e.latlng.lat.toFixed(4));
        self.treatmentBMPPointXField.val(e.latlng.lng.toFixed(4));
        self.updateLocationInformationOnMap(self.treatmentBMPInformationContainer, e.latlng);
    };

    NeptuneMaps.Map.prototype.addMarkerOnMap = function()
    {
        // add markers
        if (!Sitka.Methods.isUndefinedNullOrEmpty(this.treatmentBMPPointXField.val()) &&
            !Sitka.Methods.isUndefinedNullOrEmpty(this.treatmentBMPPointYField.val()))
        {
            var latLng = new L.LatLng(this.treatmentBMPPointYField.val(),
                this.treatmentBMPPointXField.val());
            this.currentMarker = L.marker(latLng,
                { icon: L.MakiMarkers.icon({ icon: "marker", color: "#935F59", size: "m" }) });
            this.currentMarker.addTo(this.map);
            this.updateLocationInformationOnMap(this.treatmentBMPInformationContainer, latLng);
        }
        else
        {
            this.setEmptyLocationInformationOnMap(this.treatmentBMPInformationContainer);
        }
        this.assignClickEventHandler(this.changeMarkerOnMap);
        document.getElementById(this.MapDivId).style.cursor = 'crosshair';
    };

    NeptuneMaps.Map.prototype.initializeTreatmentBMPEditor = function()
    {
        this.currentMarker = null;
        this.treatmentBMPInformationContainer = jQuery("#@ViewDataTyped.TreatmentBMPInformationContainer");
        this.treatmentBMPPointXField = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointX)");
        this.treatmentBMPPointYField = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointY)");
        this.addMarkerOnMap();
    };


    NeptuneMaps.Map.prototype.updateLocationInformationOnMap = function (treatmentBMPInformationContainer, latlng) {
        var html = "";
        for (var i = 0; i < this.vectorLayers.length; i++) {
            var match = leafletPip.pointInLayer(
                // the clicked point
                latlng,
                // this layer
                this.vectorLayers[i],
                // whether to stop at first match
                true);
            // if there's overlap, add some content to the popup: the layer name
            // and a table of attributes
            if (match.length) {
                var properties = match[0].feature.properties;
                for (var propertyName in properties) {
                    html += this.formatLayerProperty(propertyName, properties[propertyName]);
                }
            }
        }
        if (Sitka.Methods.isUndefinedNullOrEmpty(html))
        {
            jQuery(".locationInformation").hide();
        } else {
            jQuery(".locationInformation").show();
        }
        treatmentBMPInformationContainer.html(html);
    };

    NeptuneMaps.Map.prototype.setEmptyLocationInformationOnMap = function (treatmentBMPInformationContainer) {
        var html = "<span>Add BMP location on map</span>";
        treatmentBMPInformationContainer.html(html);
    };

    jQuery(function()
    {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
        var neptuneMap = new NeptuneMaps.Stormwater(mapInitJson);
        neptuneMap.initializeTreatmentBMPEditor();

        jQuery("#@Html.IdFor(x => x.TreatmentBMPPointX), #@Html.IdFor(x => x.TreatmentBMPPointY)").on("input", function()
        {
            neptuneMap.removeLayerFromMap(neptuneMap.currentMarker);
            var x = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointX)").val(),
                y = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointY)").val();

            if (!Sitka.Methods.isUndefinedNullOrEmpty(x) && !Sitka.Methods.isUndefinedNullOrEmpty(y))
            {
                var latlng = L.latLng(Number.parseFloat(y), Number.parseFloat(x));
                neptuneMap.currentMarker = L.marker(latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: "#935F59", size: "m" }) });
                neptuneMap.currentMarker.addTo(neptuneMap.map);

                neptuneMap.updateLocationInformationOnMap(neptuneMap.treatmentBMPInformationContainer, latlng);
            }

        });


        HookupCheckIfFormIsDirtyNoDisable(undefined);
    });


</script>
