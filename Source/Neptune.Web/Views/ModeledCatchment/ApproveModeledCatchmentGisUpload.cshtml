@using LtInfo.Common
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.ModeledCatchment.ApproveModeledCatchmentGisUpload

@Html.ValidationSummary()

<div class="formPage">
    <div>
        <label class="col-md-2" for="@Html.IdFor(x => x.StormwaterJurisdictionID)">
            Jurisdiction
        </label>
        <div class="col-md-10">
            @Html.DropDownListFor(x => x.StormwaterJurisdictionID, ViewDataTyped.StormwaterJurisdictionSelectListItems, new Dictionary<string, object> {{"style", "width:auto;"}, {"class", "form-control"}})
        </div>
        <table class="table table-striped">
            <thead>
            <tr>
                <th></th>
                @if (Model.ModeledCatchmentGeometryLayers.Count > 1)
                {
                    <th>Import?</th>
                }
                <th>Feature Class</th>
                <th>Catchment Name Field</th>
            </tr>
            </thead>
            <tbody>
            @if (Model.ModeledCatchmentGeometryLayers != null)
            {
                for (var i = 0; i < Model.ModeledCatchmentGeometryLayers.Count; i++)
                {
                    <tr>
                        <td>
                            <div style="height: 20px; width: 20px; background-color: @ViewDataTyped.LayerColors[Model.ModeledCatchmentGeometryLayers[i].ModeledCatchmentGeometryStagingID];"></div>
                            @Html.HiddenFor(x => x.ModeledCatchmentGeometryLayers[i].ModeledCatchmentGeometryStagingID)
                            @if (Model.ModeledCatchmentGeometryLayers.Count == 1)
                            {
                                <input type="hidden" value="@Model.ModeledCatchmentGeometryLayers[i].ModeledCatchmentGeometryStagingID" name="@Html.NameFor(x => x.LayerToImportID)"/>
                            }
                        </td>
                        @if (Model.ModeledCatchmentGeometryLayers.Count > 1)
                        {
                            <td class="text-center">
                                <input type="radio" value="@Model.ModeledCatchmentGeometryLayers[i].ModeledCatchmentGeometryStagingID" name="@Html.NameFor(x => x.LayerToImportID)"/>
                            </td>
                        }
                        <td>@ViewDataTyped.ModeledCatchmentGeometryFeatureClassNames[Model.ModeledCatchmentGeometryLayers[i].ModeledCatchmentGeometryStagingID]</td>
                        <td>
                            @Html.DropDownListFor(x => x.ModeledCatchmentGeometryLayers[i].SelectedProperty, ViewDataTyped.ModeledCatchmentGeomertyLayerSelectProperties[Model.ModeledCatchmentGeometryLayers[i].ModeledCatchmentGeometryStagingID], new Dictionary<string, object> {{"style", "width:auto;"}, {"class", "form-control selectedProperty"}, {"data-modeledCatchmentGeometryStagingID", Model.ModeledCatchmentGeometryLayers[i].ModeledCatchmentGeometryStagingID.ToString()}})
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table>
    </div>
    <div>
        <p>
            To zoom, hold <strong>Shift</strong> and drag rectangle.
        </p>
        <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 400px;"></div>
        <div id="uploadGisReport"></div>
        <div class="text-right" style="margin-top: 15px;">
            <a href="@ViewDataTyped.ModeledCatchmentIndexUrl" class="btn btn-neptune">Cancel</a>
            <button id="submitApproveModeledCatchmentGisUpload" type="submit" class="btn btn-neptune" disabled="disabled">Upload GIS</button>
        </div>
    </div>
</div>

<script type="text/javascript" language="javascript">
    // <![CDATA[
    jQuery(function()
    {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None)),
            map = new NeptuneMaps.Map(mapInitJson),

            modeledCatchmentStagingGeoJsons =
                @Html.Raw(JObject.FromObject(ViewDataTyped.ModeledCatchmentStagingGeoJsons).ToString(Formatting.None)),

            submitApproveModeledCatchmentGisUploadButton = jQuery("#submitApproveModeledCatchmentGisUpload"),

            modeledCatchmentUploadGisReports = [],

            uploadGisReportUrlTemplateString = @Html.Raw(ViewDataTyped.UploadGisReportUrlTemplate.ToJS()),
            uploadGisReportUrlTemplate = new Sitka.UrlTemplate(uploadGisReportUrlTemplateString);

        jQuery("#uploadGisReport").html("");
        jQuery("[name=@Html.NameFor(x => x.StormwaterJurisdictionID)],[name=@Html.NameFor(x => x.LayerToImportID)],[data-modeledCatchmentGeometryStagingID]")
            .on("change", updateModeledCatchmentUploadPreview);

        function updateModeledCatchmentUploadPreview()
        {
            var stormwaterJurisdictionID = jQuery("#@Html.IdFor(x => x.StormwaterJurisdictionID)").val(),
                modeledCatchmentGeometryStagingID =
                    jQuery("[type=radio][name=@Html.NameFor(x => x.LayerToImportID)]:checked,[type=hidden][name=@Html.NameFor(x => x.LayerToImportID)]").val(),
                selectedProperty = jQuery(".selectedProperty[data-modeledCatchmentGeometryStagingID=" +
                        modeledCatchmentGeometryStagingID +
                        "]")
                    .val();
            submitApproveModeledCatchmentGisUploadButton.prop("disabled", true);

            if (!(Sitka.Methods.isUndefinedNullOrEmpty(stormwaterJurisdictionID) ||
                Sitka.Methods.isUndefinedNullOrEmpty(modeledCatchmentGeometryStagingID) ||
                Sitka.Methods.isUndefinedNullOrEmpty(selectedProperty)))
            {
                map.blockMap();
                pushWktAndAnnotationsToForm(modeledCatchmentGeometryStagingID, selectedProperty);

                var currentReport = _.find(modeledCatchmentUploadGisReports,
                {
                    StormwaterJurisdictionID: Number.parseInt(stormwaterJurisdictionID),
                    ModeledCatchmentGeometryStagingID: Number.parseInt(modeledCatchmentGeometryStagingID),
                    SelectedProperty: selectedProperty
                });
                if (Sitka.Methods.isUndefinedNullOrEmpty(currentReport))
                {
                    var uploadGisReportUrl = uploadGisReportUrlTemplate
                        .ParameterReplace(stormwaterJurisdictionID,
                            modeledCatchmentGeometryStagingID,
                            selectedProperty);
                    jQuery.ajax(uploadGisReportUrl,
                    {
                        method: "POST",
                        data: {
                            StormwaterJurisdictionID: stormwaterJurisdictionID,
                            ModeledCatchmentGeometryStagingID: modeledCatchmentGeometryStagingID,
                            SelectedProperty: selectedProperty
                        },
                        success: function(data)
                        {
                            modeledCatchmentUploadGisReports.push(data);
                            handleValidReport(data);
                        },
                        error: function()
                        {
                            var report = {
                                StormwaterJurisdictionID: stormwaterJurisdictionID,
                                ModeledCatchmentGeometryStagingID: modeledCatchmentGeometryStagingID,
                                SelectedProperty: selectedProperty,
                                Errors: ["There was a problem fetching the report for this GIS upload."]
                            };
                            modeledCatchmentUploadGisReports.push(report);
                            handleValidReport(report);
                        },
                        complete: function() { map.unblockMap(); }
                    });
                }
                else
                {
                    handleValidReport(currentReport);
                    map.unblockMap();
                }
            }
            else
            {
                jQuery("#uploadGisReport").html("");
            }
        }

        function handleValidReport(report)
        {
            if (Sitka.Methods.isUndefinedNullOrEmpty(report.Errors))
            {
                submitApproveModeledCatchmentGisUploadButton.prop("disabled", false);
                jQuery("#uploadGisReport")
                    .html(jQuery("#uploadGisReportTemplateHtml")
                        .html()
                        .replace("{{numberOfCatchments}}", report.NumberOfCatchments)
                        .replace("{{numberOfCatchmentsToBeUpdated}}", report.NumberOfCatchmentsToBeUpdated)
                        .replace("{{numberOfCatchmentsToBeCreated}}", report.NumberOfCatchmentsToBeCreated)
                        .replace("{{numberOfCatchmentsInActiveBMPRegistration}}",
                            report.NumberOfCatchmentsInActiveBMPRegistration));
            }
            else
            {
                _.forEach(report.Errors, function(err) { console.error(err); });
                jQuery("#uploadGisReport").html(jQuery("#uploadGisReportWarning").html());
            }
        }

        function pushWktAndAnnotationsToForm(modeledCatchmentGeometryStagingID, selectedProperty)
        {
            var approveGisUploadForm = jQuery("#approveGisUploadForm");
            jQuery(".wktAndAnnotation").remove();
            var geoJson = JSON.parse(modeledCatchmentStagingGeoJsons[Number
                .parseInt(modeledCatchmentGeometryStagingID)]);
            _.forEach(geoJson.features,
                function(feature, i)
                {
                    approveGisUploadForm
                        .append(jQuery("#wktAndAnnotationsTemplateHtml")
                            .html()
                            .replace(new RegExp("{{index}}", "g"), i)
                            .replace(new RegExp("{{wkt}}", "g"), Terraformer.WKT.convert(feature.geometry))
                            .replace(new RegExp("{{annotation}}", "g"), feature.properties[selectedProperty]));
                });
        }
    });
    // ]]>
</script>

<script type="text/html" id="uploadGisReportWarning">
    <div style="margin-top: 15px;">
        <div class="alert alert-warning" role="alert">
            There are problems with the selections for the layer you wish to import. Make sure that the <strong>Property</strong> selected is
            unambiguous (every feature has the selected property, and there are no duplicate values for features that have the selected property).
        </div>
    </div>
</script>
<script type="text/html" id="uploadGisReportTemplateHtml">
    <div style="margin-top: 15px;">
        <ul>
            <li>Layer contains {{numberOfCatchments}} catchments.</li>
            <li>{{numberOfCatchmentsToBeUpdated}} catchment names match existing catchments in jurisdiction.</li>
            <li>{{numberOfCatchmentsToBeCreated}} new catchments will be created.</li>
            <li>{{numberOfCatchmentsInActiveBMPRegistration}} catchments are included in an approved Registration. These catchments will not be updated.</li>
        </ul>
    </div>
</script>
<script type="text/html" id="wktAndAnnotationsTemplateHtml">
    <input type="hidden" name="WktAndAnnotations[{{index}}].Wkt" value="{{wkt}}" class="wktAndAnnotation"/>
    <input type="hidden" name="WktAndAnnotations[{{index}}].Annotation" value="{{annotation}}" class="wktAndAnnotation"/>
</script>