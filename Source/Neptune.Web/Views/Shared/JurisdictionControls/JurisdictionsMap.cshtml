@*-----------------------------------------------------------------------
<copyright file="JurisdictionsMap.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@* TODO: A lot of this code was specifically used in ProjectFirma to overlay project location points on a map, and may not be necessary at all here.*@

@inherits Neptune.Web.Views.Shared.JurisdictionControls.JurisdictionsMap

<style>
    .mapLegendContainer {
        padding: 5px;
        border-top: 1px solid;
    }

    #mapLegend {
        margin-top: 10px;
    }

    .mapLegendElement {
        display: inline-block;
        margin-right: 10px;
    }

    .mapLegendIcon
    {
        margin-bottom: -30px;
    }

    .mapLegendElement .maki-marker
    {
        background-color: blue;
        margin-left: 0 !important;
    }

    #mapLegendTitle {
        font-weight: bold;
    }
</style>


<div id="@ViewDataTyped.MapDivID"></div>
<div class="mapLegendContainer">
    
    <div id="mapLegend">
    </div>
</div>

<script type="text/javascript">
    // we are extending Neptune Maps here with functionality specific to this partial view
    NeptuneMaps.Map.prototype.initializeJurisdictions = function(jurisdictionsMapInitJson)
    {
        // default to no clustering
        this.areLocationsClustered = false;
        // set the project locations
        this.projectLocations = jurisdictionsMapInitJson.ProjectLocationsLayerGeoJson;

        // initialize to no filters
        this.mapCustomizationObject = jurisdictionsMapInitJson.ProjectMapCustomization;
        // draw the project locations
        this.addLocationLayers();
    };

    NeptuneMaps.Map.prototype.changeFilter = function(filterPropertyNameSelected, actualFilter)
    {        
        this.mapCustomizationObject.FilterPropertyName = filterPropertyNameSelected;
        this.mapCustomizationObject.FilterPropertyValues = actualFilter;
        this.addLocationLayers();        
    };

    NeptuneMaps.Map.prototype.changePropertyToColorProjectLocationsBy = function(colorByPropertyName)
    {
        this.mapCustomizationObject.ColorByPropertyName = colorByPropertyName;
        this.addLocationLayers();        
    };

    NeptuneMaps.Map.prototype.changeClustering = function(areLocationsClustered)
    {
        this.areLocationsClustered = areLocationsClustered;
        this.addLocationLayers();        
    };

    NeptuneMaps.Map.prototype.addLocationLayers = function()
    {
        this.projectLocationsLayer = this.addProjectLocationsToMap(this.projectLocations, this.projectLocationsLayer, "Mapped Projects", true);
    }

    NeptuneMaps.Map.prototype.addProjectLocationsToMap = function(points, layer, layerName, showByDefault)
    {
        var self = this;
        if (layer != null)
        {
            this.map.removeLayer(layer);
            this.layerControl.removeLayer(layer);
        }

        var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
        var markerClusterGroup = L.markerClusterGroup({ maxClusterRadius: 40 });
        var newLayer = L.geoJson(points.GeoJsonFeatureCollection, {
            pointToLayer: function(feature, latlng)
            {
                var legendColor = _.result(_.find(markerColorTable, function(legendItem) { return legendItem.LegendID == feature.properties[self.mapCustomizationObject.ColorByPropertyName]; }), 'LegendColor');
                var marker = L.marker(latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: legendColor, size: "s" }) });
                self.bindPopupToFeature(marker, feature);
                return marker;
            },
            filter: function(feature)
            {
                if (Sitka.Methods.isUndefinedNullOrEmpty(self.mapCustomizationObject.FilterPropertyName))
                {
                    return true;
                }
                else
                {
                    return _.intersection(_.map(feature.properties[self.mapCustomizationObject.FilterPropertyName].split(","), Number), _.map(self.mapCustomizationObject.FilterPropertyValues, Number)).length > 0;
                }
            }
        });
        if (this.areLocationsClustered)
        {
            newLayer.addTo(markerClusterGroup);
            layer = markerClusterGroup;
        }
        else
        {
            layer = newLayer;
        }
        
        if (showByDefault)
        {
            layer.addTo(this.map);    
        }
        
        this.layerControl.addOverlay(layer, layerName);

        jQuery("#mapLegend").html(this.getLegend());

        return layer;
    };

    NeptuneMaps.Map.prototype.getLegend = function() {
        var markerColorTable = this.legendColorsToUse[this.mapCustomizationObject.ColorByPropertyName];
        var allLegendsHtml = "";
        for (var i = 0; i < markerColorTable.length; ++i)
        {
            var currentLegendIcon = L.MakiMarkers.icon({ icon: "marker", color: markerColorTable[i].LegendColor, size: "m" }),
                currentLegendAsHtml = currentLegendIcon.options.iconUrl;
            allLegendsHtml += "<div class=\"mapLegendElement\">" + "<img class='mapLegendIcon' src= '" + currentLegendAsHtml  + "'></img>" + markerColorTable[i].LegendText + "</div>";
        }
        return allLegendsHtml;
    };
</script>
