@*-----------------------------------------------------------------------
    <copyright file="EditLocation.cshtml" company="Tahoe Regional Planning Agency">
    Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common.HtmlHelperExtensions
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.Shared.Location.EditLocation

        <div class="row">
            <div class="col-xs-12 col-md-6">
                <div class="row">
                    <div class="col-xs-12 col-sm-6 col-md-12">
                        To set the location of the Treatment BMP:
                        <ul>
                            <li>Place the BMP at your current location (using GPS if available) <strong>OR</strong></li>
                            <li>Click on the location of the BMP on the map <strong>OR</strong></li>
                            <li>Directly type in the latitude and longitude</li>
                        </ul>

                        <p>For centralized BMPs, any existing delineation will automatically be re-calculated based on the new saved location.</p>
                    </div>
                    <div class="col-xs-12 col-sm-6 col-md-12">
                        <div class="row">
                            <div class="form-horizontal">
                                <div class="col-sm-offset-4 col-sm-8">
                                    <a style="margin-bottom: 10px" class="btn btn-neptune" id="useCurrentLocationButton"><i class="glyphicon glyphicon-phone"></i> Use Current Location</a>
                                </div>
                                <div class="form-group">
                                    <div class="col-xs-4 col-sm-4 control-label">
                                        @Html.LabelWithSugarFor(m => m.TreatmentBMPPointY)
                                    </div>
                                    <div class="col-xs-8 col-sm-8">
                                        @Html.TextBoxFor(x => x.TreatmentBMPPointY, new {type = "number", @class = "form-control", style = "width: auto;", step = "0.001"})
                                        @Html.ValidationMessageFor(x => x.TreatmentBMPPointY)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-xs-4 col-sm-4 control-label">
                                        @Html.LabelWithSugarFor(m => m.TreatmentBMPPointX)
                                    </div>
                                    <div class="col-xs-8 col-sm-8">
                                        @Html.TextBoxFor(x => x.TreatmentBMPPointX, new {type = "number", @class = "form-control", style = "width: auto;", step = "0.001"})
                                        @Html.ValidationMessageFor(x => x.TreatmentBMPPointX)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-md-6">
                <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 400px;"></div>
                <p class="figure-caption">Click the map to set the location of the Treatment BMP, or enter latitude and longitude.</p>
            </div>
        </div>


<script type="text/javascript" language="javascript">
    // we are extending Neptune Maps to handle the edit project locations functinality
    NeptuneMaps.Map.prototype.changeMarkerOnMap = function(self, e) {
        self.removeLayerFromMap(self.currentMarker);
        self.currentMarker =
            L.marker(e.latlng, { icon: L.MakiMarkers.icon({ icon: "marker", color: "#935F59", size: "m" }) });
        self.currentMarker.addTo(self.map);
        self.treatmentBMPPointYField.val(e.latlng.lat.toFixed(4));
        self.treatmentBMPPointXField.val(e.latlng.lng.toFixed(4));
        self.updateLocationInformationOnMap(self.treatmentBMPInformationContainer, e.latlng);
    };

    NeptuneMaps.Map.prototype.addMarkerOnMap = function() {
        // add markers
        if (!Sitka.Methods.isUndefinedNullOrEmpty(this.treatmentBMPPointXField.val()) &&
            !Sitka.Methods.isUndefinedNullOrEmpty(this.treatmentBMPPointYField.val())) {
            var latLng = new L.LatLng(this.treatmentBMPPointYField.val(),
                this.treatmentBMPPointXField.val());
            this.currentMarker = L.marker(latLng,
                { icon: L.MakiMarkers.icon({ icon: "marker", color: "#935F59", size: "m" }) });
            this.currentMarker.addTo(this.map);
            this.updateLocationInformationOnMap(this.treatmentBMPInformationContainer, latLng);
        } else {
            this.setEmptyLocationInformationOnMap(this.treatmentBMPInformationContainer);
        }
        this.assignClickEventHandler(this.changeMarkerOnMap);
        document.getElementById(this.MapDivId).style.cursor = 'crosshair';
    };

    NeptuneMaps.Map.prototype.initializeTreatmentBMPEditor = function() {
        this.currentMarker = null;
        this.treatmentBMPInformationContainer = jQuery("#@ViewDataTyped.TreatmentBMPInformationContainer");
        this.treatmentBMPPointXField = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointX)");
        this.treatmentBMPPointYField = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointY)");
        this.addMarkerOnMap();
    };


    NeptuneMaps.Map.prototype.updateLocationInformationOnMap = function(treatmentBMPInformationContainer, latlng) {
        var html = "";
        for (var i = 0; i < this.vectorLayers.length; i++) {
            var match = leafletPip.pointInLayer(
                // the clicked point
                latlng,
                // this layer
                this.vectorLayers[i],
                // whether to stop at first match
                true);
            // if there's overlap, add some content to the popup: the layer name
            // and a table of attributes
            if (match.length) {
                var properties = match[0].feature.properties;
                for (var propertyName in properties) {
                    html += this.formatLayerProperty(propertyName, properties[propertyName]);
                }
            }
        }
        if (Sitka.Methods.isUndefinedNullOrEmpty(html)) {
            jQuery(".locationInformation").hide();
        } else {
            jQuery(".locationInformation").show();
        }
        treatmentBMPInformationContainer.html(html);
    };

    NeptuneMaps.Map.prototype.setEmptyLocationInformationOnMap = function(treatmentBMPInformationContainer) {
        var html = "<span>Add BMP location on map</span>";
        treatmentBMPInformationContainer.html(html);
    };

    jQuery(function() {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
        var neptuneMap = new NeptuneMaps.Stormwater(mapInitJson);

        neptuneMap.addEsriDynamicLayer("https://ocgis.com/arcpub/rest/services/Flood/Stormwater_Network/MapServer/",
            "<span>Stormwater Network <br/> <img src='/Content/img/legendImages/stormwaterNetwork.png' height='50'/> </span>", false);

            window.neptuneMap = neptuneMap;
        neptuneMap.initializeTreatmentBMPEditor();
        neptuneMap.map.on("locationfound", onLocationFound);
        neptuneMap.map.on('locationerror', onLocationError);

        jQuery("#@Html.IdFor(x => x.TreatmentBMPPointX), #@Html.IdFor(x => x.TreatmentBMPPointY)").on("input",
            function() {
                neptuneMap.removeLayerFromMap(neptuneMap.currentMarker);
                var x = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointX)").val(),
                    y = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointY)").val();

                if (!Sitka.Methods.isUndefinedNullOrEmpty(x) && !Sitka.Methods.isUndefinedNullOrEmpty(y)) {
                    var latlng = L.latLng(Number.parseFloat(y), Number.parseFloat(x));
                    neptuneMap.currentMarker = L.marker(latlng,
                        { icon: L.MakiMarkers.icon({ icon: "marker", color: "#935F59", size: "m" }) });
                    neptuneMap.currentMarker.addTo(neptuneMap.map);

                    neptuneMap.updateLocationInformationOnMap(neptuneMap.treatmentBMPInformationContainer, latlng);
                }

            });

        jQuery("#useCurrentLocationButton").on("click",
            function() {
                neptuneMap.map.locate({ setView: true, maxZoom: 15 });
            });

        function onLocationFound(e) {
            var x = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointX)"),
                y = jQuery("#@Html.IdFor(x => x.TreatmentBMPPointY)");

            x.val(e.latlng.lng);
            y.val(e.latlng.lat);

            neptuneMap.removeLayerFromMap(neptuneMap.currentMarker);
            neptuneMap.currentMarker = L.marker(e.latlng,
                { icon: L.MakiMarkers.icon({ icon: "marker", color: "#935F59", size: "m" }) });
            neptuneMap.currentMarker.addTo(neptuneMap.map);
        }

        function onLocationError(e) {
            alert(e.message);
        }

        HookupCheckIfFormIsDirtyNoDisable(undefined);
        neptuneMap.map.setZoom(mapInitJson.ZoomLevel ?? 10);
    });


</script>