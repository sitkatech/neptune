@using LtInfo.Common
@using Neptune.Web.Views.Shared
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.Delineation.DelineationMap

@section JavascriptAndStylesContent
{
    @{MapJavascriptIncludes.RenderPartialView(Html);}

    <style>
        .selectedAssetControl {
            background: white;
            padding: 7px;
            cursor: none;
            width: 240px;
        }

        .leaflet-bar p {
            font-style: italic;
            margin-bottom: 0;
        }
        
        .leaflet-bar hr {
            margin-top: 10px;
            margin-bottom: 10px;
        }

        /* weird gross hack to allow centered controls by overriding bottom-right control placement */
        .leaflet-bottom.leaflet-right {
            right: 50%;
            bottom: 50%;
            transform: translate(50%, 50%);
        }

        .beginDelineationControl {
            background: white;
            padding: 7px;
            cursor: pointer;
            width: 375px;
            height: 340px;
        }
        label.group {
            margin-left: 20px;
            font-weight: normal;
        }
        .cancelDelineate {
            margin-left: 7px;
        }

        .leaflet-bar h4 {
            margin-top: 0;
        }

    </style>
    <script src="@Url.Content("~/ScriptsCustom/Maps/NeptuneMaps.GeoServerMap.min.js")" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.5.0/proj4.js" type="text/javascript"></script>
    <script>
        var stopClickPropagation = function(el) {
            L.DomEvent.on(el, 'click', function(e) { e.stopPropagation(); });
        };

        L.Control.Watermark = L.Control.extend({
            onAdd: function (map) {
                var img = L.DomUtil.create('img');

                img.src = '/Content/img/OCStormwater/banner_logo.png';
                img.style.width = '200px';

                return img;
            },

            onRemove: function (map) {
                // Nothing to do here
            }
        });

        L.control.watermark = function (opts) {
            return new L.Control.Watermark(opts);
        }

        L.Control.DelineationMapSelectedAsset = L.Control.extend({
            onAdd: function (map) {
                this._div = L.DomUtil.create('div', 'selectedAssetControl leaflet-bar');
                stopClickPropagation(this._div);
                this._div.innerHTML = '<h4>Selected Asset</h4>';

                this.reset();

                this._div.append(this._innerDiv);

                return this._div;
            },

            onRemove: function (map) {
                //perfunctory
            },

            update: function (feature) {
                this._innerDiv.innerHTML = 'BMP: ' + feature.properties["Name"] +
                    '<hr/>' +
                    'Drainage Area</br>' +
                    '<p>No catchment delineation has been performed for this BMP</p>';

                this._delinBtn = L.DomUtil.create('button', "delinBtn btn btn-sm btn-neptune");
                this._delinBtn.type = "button";
                this._delinBtn.innerHTML = 'Delineate Drainage Area';

                L.DomEvent.on(this._delinBtn,
                    'click',
                    function (e) {
                        window.mappo.addBeginDelineationControl();
                        this.disableDelineationButton();
                        e.stopPropagation();
                    }.bind(this));

                this._innerDiv.append(this._delinBtn);
            },

            reset: function () {
                if (!this._innerDiv) {
                    this._innerDiv = L.DomUtil.create('div', 'selectedAssetInfo');
                }
                this._innerDiv.innerHTML = '<p>Select a BMP on the map to see options.</p>';
            },

            disableDelineationButton() {
                if (!this._delinBtn) {
                    return; //misplaced call
                }
                this._delinBtn.disabled = "disabled";
            }, 

            enableDelineationButton() {
                if (!this._delinBtn) {
                    return; //misplaced call
                }
                this._delinBtn.removeAttribute("disabled");
            }

        });

        L.control.delineationSelectedAsset = function (opts) {
            return new L.Control.DelineationMapSelectedAsset(opts);
        }

        L.Control.BeginDelineation = L.Control.extend({
            onAdd: function (map) {
                // todo: is there a cleaner way to generate this stuff than L.DomUtil
                this._div = L.DomUtil.create('div', 'beginDelineationControl leaflet-bar');
                stopClickPropagation(this._div);

                var titleBar = L.DomUtil.create('div', 'row');

                var title = L.DomUtil.create('div', 'col-sm-10');
                title.innerHTML = '<h4>Delineate Drainage Area</h4>';

                var closeButtonWrapper = L.DomUtil.create('div', 'col-sm-2 text-right');

                var closeButton = L.DomUtil.create('button', 'btn btn-sm btn-neptune');
                closeButton.innerHTML = 'x';
                L.DomEvent.on(closeButton,
                    'click',
                    function(e) {
                        window.mappo.removeBeginDelineationControl();
                        e.stopPropagation();
                    });

                closeButtonWrapper.append(closeButton);
                titleBar.append(title);
                titleBar.append(closeButtonWrapper);

                this._div.append(titleBar);

                var main = L.DomUtil.create('div', 'beginDelineationOptions');
                // todo: add values to these radios when we start bu
                main.innerHTML = "<label>1. Select the type of flow this BMP will receive</label><br/>" +
                    "<label class='group'><input type='radio' name='typeOfFlow'> Receives local surface flow only</label><br/>" +
                    "<label class='group'><input type='radio' name='typeOfFlow'> Receives piped flow only</label><br/>" +
                    "<label class='group'><input type='radio' name='typeOfFlow'> Receives both piped flow and surface flow</label><hr/>" +
                    "<label>2. Choose a delineation option</label></br>" +
                    "<label class='group'><input type='radio' name='delineationOption'> Delineate Automatically from DEM</label><br/>" +
                    
                    "<label class='group'><input type='radio' name='delineationOption'> Draw the Catchment Area</label><br/>" +
                    "<label class='group'><input type='radio' name='delineationOption'> Upload a GIS file</label></hr>" +
                    //todo get rid of this
                    "<p>(Content under development)</p>";

                this._div.append(main);

                // todo: add a handler to goBtn and undisable it
                var formBtnWrapper = L.DomUtil.create('div', 'text-right');
                var goBtn = L.DomUtil.create('button', 'continueDelineate btn btn-sm btn-neptune');
                goBtn.type = "button";
                goBtn.innerHTML = "Delineate";
                goBtn.disabled = "disabled";
                var stopBtn = L.DomUtil.create('button', 'cancelDelineate btn btn-sm btn-neptune');
                stopBtn.type = "button";
                stopBtn.innerHTML = "Cancel";
                L.DomEvent.on(stopBtn,
                    "click",
                    function (e) {
                        window.mappo.removeBeginDelineationControl();
                        e.stopPropagation();
                    });
                formBtnWrapper.append(goBtn);
                formBtnWrapper.append(stopBtn);

                this._div.append(formBtnWrapper);


                return this._div;
            },
            onRemove: function() {
            }
        });

        L.control.beginDelineation = function(opts) {
            return new L.Control.BeginDelineation(opts);
        }

    </script>
}

<div class="row">
    <div class="col-sm-12">
        <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 700px;"></div>
    </div>
</div>

<script>
    var mappo;
    var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
    var geoserverUrl = @Html.Raw(ViewDataTyped.GeoServerUrl.ToJS());

    var mapMethods = {
        addBeginDelineationControl: function() {
            this.beginDelineationControl = L.control.beginDelineation({ position: 'bottomright' });
            this.beginDelineationControl.addTo(this.map);
        },
        removeBeginDelineationControl: function() {
            if (!this.beginDelineationControl) {
                return; //misplaced call
            }

            this.beginDelineationControl.remove();
            this.beginDelineationControl = null;

            this.selectedAssetControl.enableDelineationButton();
        },
        initializeTreatmentBMPClusteredLayer: function () {
            this.treatmentBMPLayer = L.geoJson(
                mapInitJson.TreatmentBMPLayerGeoJson.GeoJsonFeatureCollection,
                {
                    pointToLayer: NeptuneMaps.DefaultOptions.pointToLayer
                });
            if (this.markerClusterGroup) {
                this.map.removeLayer(markerClusterGroup);
            }

            this.markerClusterGroup = this.makeMarkerClusterGroup(this.treatmentBMPLayer);
            this.treatmentBMPLayer.on('click',
                function (e) {
                    this.setSelectedMarker(e.layer.feature), this.selectedAssetControl.update(e.layer.feature);
                }.bind(this));
        }
    }

    jQuery(function () {
        mappo = new NeptuneMaps.GeoServerMap(mapInitJson, "Terrain", geoserverUrl);
        L.Util.extend(mappo, mapMethods);

        var ocstormwaterParcels = "OCStormwater:Parcels";
        mappo.addWmsLayer("OCStormwater:NetworkCatchments", "Network Catchments");
        mappo.addWmsLayerWithParams(ocstormwaterParcels, "All Parcels",
            {
                styles: "parcel_alt"
            });
        mappo.addEsriTileLayer("https://ocgis.com/arcpub/rest/services/Flood/Stormwater_Network/MapServer/",
            "Stormwater Network");
        mappo.initializeTreatmentBMPClusteredLayer();

        L.control.watermark({ position: 'bottomleft' }).addTo(mappo.map);
        mappo.selectedAssetControl = L.control.delineationSelectedAsset({ position: 'topleft' });
        mappo.selectedAssetControl.addTo(mappo.map);

        mappo.map.on('click', function(e) {
            mappo.deselect(mappo.selectedAssetControl.reset.bind(mappo.selectedAssetControl));
        });

        window.mappo = mappo;
    });

    var showBMPDelineation = function(feature) {
        var url = feature.properties["DelineationURL"];
        // todo todid todoes
    };

</script>