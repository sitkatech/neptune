@using LtInfo.Common
@using Neptune.Web.Views.Shared
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.Delineation.DelineationMap

@section JavascriptAndStylesContent
{
    @{MapJavascriptIncludes.RenderPartialView(Html);}
    <script src="@Url.Content("~/ScriptsCustom/Maps/NeptuneMaps.GeoServerMap.min.js")" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.5.0/proj4.js" type="text/javascript"></script>
    <script>
        L.Control.Watermark = L.Control.extend({
            onAdd: function(map) {
                var img = L.DomUtil.create('img');

                img.src = '/Content/img/OCStormwater/banner_logo.png';
                img.style.width = '200px';

                return img;
            },

            onRemove: function(map) {
                // Nothing to do here
            }
        });

        L.control.watermark = function(opts) {
            return new L.Control.Watermark(opts);
        }

        L.Control.DelineationSelectedAsset = L.Control.extend({
            onAdd: function(map) {
                this._div = L.DomUtil.create('div', 'selectedAsset');
                this._div.innerHTML = 'YO DAWG';
                return this._div;
            },

            onRemove: function(map) {
                //perfunctory
            }
        });

        L.control.delineationSelectedAsset = function(opts) {
            return new L.Control.DelineationSelectedAsset(opts);
        }

    </script>
}

<div class="row">
    <div class="col-sm-12">
        <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 700px;"></div>
    </div>
</div>

<script>

    var mappo;
    var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
    var geoserverUrl = @Html.Raw(ViewDataTyped.GeoServerUrl.ToJS());
    
    jQuery(function () {
        mappo = new NeptuneMaps.GeoServerMap(mapInitJson, "Terrain", geoserverUrl);

        var ocstormwaterParcels = "OCStormwater:Parcels";
        mappo.addWmsLayer("OCStormwater:NetworkCatchments", "Network Catchments");
        mappo.addWmsLayerWithParams(ocstormwaterParcels, "All Parcels",
            {
                styles: "parcel_alt"
            });
        mappo.addEsriTileLayer("https://ocgis.com/arcpub/rest/services/Flood/Stormwater_Network/MapServer/",
            "Stormwater Network");
        mappo.initializeTreatmentBMPClusteredLayer();
        
        L.control.watermark({ position: 'bottomleft' }).addTo(mappo.map);
        L.control.delineationSelectedAsset({ position: 'topleft' }).addTo(mappo.map);
    });

    NeptuneMaps.Map.prototype.initializeTreatmentBMPClusteredLayer = function () {
        this.treatmentBMPLayer = L.geoJson(
            mapInitJson.TreatmentBMPLayerGeoJson.GeoJsonFeatureCollection,
            {
                pointToLayer: NeptuneMaps.DefaultOptions.pointToLayer
            });
        if (this.markerClusterGroup) {
            this.map.removeLayer(markerClusterGroup);
        }

        this.markerClusterGroup = this.makeMarkerClusterGroup(this.treatmentBMPLayer);
        this.treatmentBMPLayer.on('click',
            function (e) {
                this.setSelectedMarker(e.layer.feature);
            }.bind(this));
    };

    var showBMPDelineation = function(feature) {
        var url = feature.properties["DelineationURL"];
        // todo todid todoes
    };

</script>