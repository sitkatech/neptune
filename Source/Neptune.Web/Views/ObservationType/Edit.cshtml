@using LtInfo.Common.HtmlHelperExtensions
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.ObservationType.Edit

<script type="text/javascript" src="@Url.Content("~/Views/ObservationType/EditObservationTypeController.js")"></script>
<script type="text/javascript">
    // <![CDATA[
    angular.module("NeptuneApp")
        .factory("angularModelAndViewData",
            function()
            {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model))
                };
            });
   
    // ]]>
</script>

@using (Html.BeginForm())
{
    <div class="formPage" ng-app="NeptuneApp" id="EditObservationTypeControllerApp" ng-controller="EditObservationTypeController" ng-init="initiateWithAtLeastOneInput()">
        <div class="row">
            <div class="col-xs-12">
                <div class="validationError">
                    @Html.ValidationSummary()
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12">
                <div class="form-horizontal">
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.ObservationTypeName)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextBoxFor(m => m.ObservationTypeName, new { @class = "form-control", style = "width:100%" })
                            @Html.ValidationMessageFor(m => m.ObservationTypeName)
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.ObservationTypeCollectionMethodID)
                        </div>
                        <div class="col-sm-9">
                            @Html.DropDownListFor(m => m.ObservationTypeCollectionMethodID, ViewDataTyped.ObservationTypeCollectionMethods, new { @class = "form-control", style = "width:auto" })
                            @Html.ValidationMessageFor(m => m.ObservationTypeCollectionMethodID)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.ObservationThresholdTypeID)
                        </div>
                        <div class="col-sm-9">
                            @Html.DropDownListFor(m => m.ObservationThresholdTypeID, ViewDataTyped.ObservationThresholdTypes, new { @class = "form-control", style = "width:auto" })
                            @Html.ValidationMessageFor(m => m.ObservationThresholdTypeID)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.ObservationTargetTypeID)
                        </div>
                        <div class="col-sm-9">
                            @Html.DropDownListFor(m => m.ObservationTargetTypeID, ViewDataTyped.ObservationTargetTypes, new { @class = "form-control", style = "width:auto" })
                            @Html.ValidationMessageFor(m => m.ObservationTargetTypeID)
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.MeasurementType)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextBoxFor(m => m.MeasurementType, new { @class = "form-control", style = "width:auto" })
                            @Html.ValidationMessageFor(m => m.MeasurementType)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.MeasurementUnitTypeID)
                        </div>
                        <div class="col-sm-9">
                            @Html.DropDownListFor(m => m.MeasurementUnitTypeID, ViewDataTyped.MeasurementUnitTypes, new { @class = "form-control", style = "width:auto" })
                            @Html.ValidationMessageFor(m => m.MeasurementUnitTypeID)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.PropertiesToObserve)
                        </div>
                        <div class="col-sm-9">
                            <div ng-repeat="item in AngularModel.PropertiesToObserve track by $index" style="margin-bottom: 4px">
                                <input class="form-control" ng-model="AngularModel.PropertiesToObserve[$index]" name="PropertiesToObserve[{{$index}}]" style="width: auto" type="text" value="{{AngularModel.PropertiesToObserve[$index]}}">
                                <a class="btn" style="padding-left: 4px"><span class="glyphicon glyphicon-remove" ng-click="removeInput($index)"></span></a>
                            </div>
                            
                            <button class="btn btn-neptune" type="button" ng-click="addInput()"><span class="glyphicon glyphicon-plus"></span>Add</button>
                            @Html.ValidationMessageFor(m => m.PropertiesToObserve)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.MinimumNumberOfObservations)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextBoxFor(m => m.MinimumNumberOfObservations, new { @class = "form-control", style = "width:auto" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.MaximumNumberOfObservations)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextBoxFor(m => m.MaximumNumberOfObservations, new { @class = "form-control", style = "width:auto" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.MinimumValueOfEachObservation)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextBoxFor(m => m.MinimumValueOfEachObservation, new { @class = "form-control", style = "width:auto" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.MaximumValueOfEachObservation)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextBoxFor(m => m.MaximumValueOfEachObservation, new { @class = "form-control", style = "width:auto" })
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.BenchmarkDescritpion)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextAreaWithMaxLengthFor(m => m.BenchmarkDescritpion, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string>() { "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.ThresholdDescritpion)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextAreaWithMaxLengthFor(m => m.ThresholdDescritpion, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string>() { "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-sm-3 control-label">
                            @Html.LabelWithSugarFor(m => m.AssessmentDescritpion)
                        </div>
                        <div class="col-sm-9">
                            @Html.TextAreaWithMaxLengthFor(m => m.AssessmentDescritpion, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string>() { "form-control" })
                        </div>
                    </div>



                </div>                
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12" style="text-align: right">
                <hr />
                <a href="@ViewDataTyped.ObservationTypeIndexUrl" class="btn btn-neptune">Cancel</a>
                <button type="submit" class="btn btn-neptune">Save</button>
            </div>
            @Html.HiddenFor(m => m.ObservationTypeID)
        </div>
    </div>
}


<script type="text/javascript">
    jQuery(document).ready(function () {
    });
</script>