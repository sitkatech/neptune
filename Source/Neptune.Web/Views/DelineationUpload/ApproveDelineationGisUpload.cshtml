@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Views.DelineationUpload.ApproveDelineationGisUpload

@Html.ValidationSummary()

<style>
    .redWarning {
        color: red;
    }

</style>

<div class="formPage" style="padding: 0; margin-top: -10px;">
    <div>
        <div id="uploadGisReport">
            
            @if (ViewDataTyped.DelineationUpoadGisReportFromStaging.Errors.Count == 0)
            {
                <div>
                    <ul>
                        <li>The Feature Class contains @ViewDataTyped.DelineationUpoadGisReportFromStaging.NumberOfDelineations delineations</li>
                        <li>@ViewDataTyped.DelineationUpoadGisReportFromStaging.NumberOfDelineationsToBeUpdated Treatment BMPs with with existing delineations will be replaced by new delineations from this Feature Class</li>
                        <li>@ViewDataTyped.DelineationUpoadGisReportFromStaging.NumberOfDelineationsToBeCreated Treatment BMPs that do not currently have delineations will receive new delineations from this Feature Class</li>
                        <li id="numberOfDelineationNotMatchingTreatmentBMP">@ViewDataTyped.DelineationUpoadGisReportFromStaging.NumberOfDelineationNotMatchingTreatmentBMP Delineations were found that do not match a Treatment BMP Name in the selected Jurisdiction</li>
                    </ul>
                </div>
            }
            else
            {
                <div>
                    <ul>
                        @foreach (var error in ViewDataTyped.DelineationUpoadGisReportFromStaging.Errors)
                        {
                            <li class="text-danger">@error</li>
                        }
                    </ul>
                </div>
            }
        </div>
        <div class="text-right" style="margin-top: 15px;">
            <button id="submitApproveDelineationGisUpload" type="submit" class="btn btn-neptune" disabled="disabled">Accept</button>
            <a href="@ViewDataTyped.DelineationMapUrl" class="btn btn-neptune">Cancel</a>
        </div>
    </div>
</div>

<script>
    
    var report = @Html.Raw(JObject.FromObject(ViewDataTyped.DelineationUpoadGisReportFromStaging).ToString(Formatting.None));

    if (report.NumberOfDelineationNotMatchingTreatmentBMP > 0 || report.NumberOfDelineations === 0) {
        jQuery("#numberOfDelineationNotMatchingTreatmentBMP").addClass("redWarning");
    }
    if (report.NumberOfDelineationNotMatchingTreatmentBMP !== 0 || report.NumberOfDelineations === 0) {
        submitApproveDelineationGisUploadButton.prop("disabled", true);
    } else {
        submitApproveDelineationGisUploadButton.prop("disabled", false);
    }
</script>

@*<script type="text/javascript" language="javascript">
    // <![CDATA[
    jQuery(function()
    {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None)),
            map = new NeptuneMaps.Map(mapInitJson),

            delineationStagingGeoJsons =
                @Html.Raw(JObject.FromObject(ViewDataTyped.DelineationStagingGeoJsons).ToString(Formatting.None)),

            submitApproveDelineationGisUploadButton = jQuery("#submitApproveDelineationGisUpload"),

            delineationUploadGisReports = [],

            uploadGisReportUrlTemplateString = @Html.Raw(ViewDataTyped.UploadGisReportUrlTemplate.ToJS()),
            uploadGisReportUrlTemplate = new Sitka.UrlTemplate(uploadGisReportUrlTemplateString);

        jQuery("#uploadGisReport").html("");
        jQuery("[name=@Html.NameFor(x => x.StormwaterJurisdictionID)],[name=@Html.NameFor(x => x.LayerToImportID)],[data-delineationGeometryStagingID]")
            .on("change", updateDelineationUploadPreview);

        function updateDelineationUploadPreview()
        {
            var stormwaterJurisdictionID = jQuery("#@Html.IdFor(x => x.StormwaterJurisdictionID)").val(),
                delineationGeometryStagingID =
                    jQuery("[type=radio][name=@Html.NameFor(x => x.LayerToImportID)]:checked,[type=hidden][name=@Html.NameFor(x => x.LayerToImportID)]").val(),
                selectedProperty = jQuery(".selectedProperty[data-delineationGeometryStagingID=" +
                        delineationGeometryStagingID +
                        "]")
                    .val();
            submitApproveDelineationGisUploadButton.prop("disabled", true);

            if (!(Sitka.Methods.isUndefinedNullOrEmpty(stormwaterJurisdictionID) ||
                Sitka.Methods.isUndefinedNullOrEmpty(delineationGeometryStagingID) ||
                Sitka.Methods.isUndefinedNullOrEmpty(selectedProperty)))
            {
                map.blockMap();
                pushWktAndAnnotationsToForm(delineationGeometryStagingID, selectedProperty);
                
                var currentReport = _.find(delineationUploadGisReports,
                    {
                        StormwaterJurisdictionID: Number.parseInt(stormwaterJurisdictionID),
                        DelineationGeometryStagingID: Number.parseInt(delineationGeometryStagingID),
                        SelectedProperty: selectedProperty
                    });


                
                if (Sitka.Methods.isUndefinedNullOrEmpty(currentReport))
                {
                    var uploadGisReportUrl = uploadGisReportUrlTemplate
                        .ParameterReplace(stormwaterJurisdictionID,
                            delineationGeometryStagingID,
                            selectedProperty);
                    jQuery.ajax(uploadGisReportUrl,
                        {
                            method: "POST",
                            data: {
                                StormwaterJurisdictionID: stormwaterJurisdictionID,
                                DelineationGeometryStagingID: delineationGeometryStagingID,
                                SelectedProperty: selectedProperty
                            },
                            success: function(data)
                            {
                                delineationUploadGisReports.push(data);
                                handleValidReport(data);
                            },
                            error: function() {
                            
                                var report = {
                                    StormwaterJurisdictionID: stormwaterJurisdictionID,
                                    DelineationGeometryStagingID: delineationGeometryStagingID,
                                    SelectedProperty: selectedProperty,
                                    Errors: ["There was a problem fetching the report for this GIS upload."]
                                };
                                delineationUploadGisReports.push(report);
                                handleValidReport(report);
                            },
                            complete: function() { map.unblockMap(); }
                        });
                }
                else
                {
                    handleValidReport(currentReport);
                    map.unblockMap();
                }
            }
            else
            {
                jQuery("#uploadGisReport").html("");
            }
        }

        function handleValidReport(report) {
            if (Sitka.Methods.isUndefinedNullOrEmpty(report.Errors))
            {
                jQuery("#uploadGisReport")
                    .html(jQuery("#uploadGisReportTemplateHtml")
                        .html()
                        .replace("{{numberOfDelineations}}", report.NumberOfDelineations)
                        .replace("{{numberOfDelineationsToBeUpdated}}", report.NumberOfDelineationsToBeUpdated)
                        .replace("{{numberOfDelineationsToBeCreated}}", report.NumberOfDelineationsToBeCreated)
                        .replace("{{numberOfDelineationNotMatchingTreatmentBMP}}", report.NumberOfDelineationNotMatchingTreatmentBMP));



                
            }
            else {
                _.forEach(report.Errors, function(err) { console.error(err); });
                jQuery("#uploadGisReport").html(jQuery("#uploadGisReportWarning").html());
            }
        }

        function pushWktAndAnnotationsToForm(delineationGeometryStagingID, selectedProperty)
        {
            var approveGisUploadForm = jQuery("#approveGisUploadForm");
            jQuery(".wktAndAnnotation").remove();
            var geoJson = JSON.parse(delineationStagingGeoJsons[Number
                .parseInt(delineationGeometryStagingID)]);
            _.forEach(geoJson.features,
                function(feature, i)
                {
                    approveGisUploadForm
                        .append(jQuery("#wktAndAnnotationsTemplateHtml")
                            .html()
                            .replace(new RegExp("{{index}}", "g"), i)
                            .replace(new RegExp("{{wkt}}", "g"), Terraformer.WKT.convert(feature.geometry))
                            .replace(new RegExp("{{annotation}}", "g"), feature.properties[selectedProperty]));
                });
        }
    });
    // ]]>
</script>*@

@*<script type="text/html" id="uploadGisReportWarning">
    <div style="margin-top: 15px;">
        <div class="alert alert-warning" role="alert">
            There are problems with the selections for the layer you wish to import. Make sure that the <strong>Property</strong> selected is
            unambiguous (every feature has the selected property, and there are no duplicate values for features that have the selected property).
        </div>
    </div>
</script>*@
@*<script type="text/html" id="uploadGisReportTemplateHtml" style="display: none;">*@
    
@*</script>*@
@*<script type="text/html" id="wktAndAnnotationsTemplateHtml">
    <input type="hidden" name="WktAndAnnotations[{{index}}].Wkt" value="{{wkt}}" class="wktAndAnnotation"/>
    <input type="hidden" name="WktAndAnnotations[{{index}}].Annotation" value="{{annotation}}" class="wktAndAnnotation"/>
</script>*@