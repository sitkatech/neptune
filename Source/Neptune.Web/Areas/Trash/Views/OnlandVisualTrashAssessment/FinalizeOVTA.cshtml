@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.HtmlHelperExtensions
@using Neptune.Web.Models
@using Neptune.Web.Views.Shared
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Areas.Trash.Views.OnlandVisualTrashAssessment.FinalizeOVTA

@{ @SetLayout("SiteLayout.cshtml", ViewDataTyped) }
@section JavascriptAndStylesContent{
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    <style>
        .selectedObservation {
            background-color: palegoldenrod;
        }
        #observationsPanel {
            max-height: 400px;
            overflow-y: scroll;
            overflow-x: hidden;
            padding-left: 10px;
            direction: rtl;
        }
    </style>
}

@using (Html.BeginForm("Location", "FieldVisit", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "field-visit-form" }))
{
    <div class="form-group row">
        <div class="col-sm-4 control-label text-right">
            @Html.LabelWithSugarFor(m => m.AssessmentAreaName)
        </div>
        <div class="col-sm-8">
            @if (ViewDataTyped.OVTA.AssessingNewArea.GetValueOrDefault())
            {
                @Html.TextBoxFor(m => m.AssessmentAreaName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.AssessmentAreaName)
            }
            else
            {
                <span>@ViewDataTyped.OVTA.OnlandVisualTrashAssessmentArea.OnlandVisualTrashAssessmentAreaName</span>
                @Html.HiddenFor(m => m.AssessmentAreaName)
            }
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-4 control-label text-right">
            @Html.LabelWithSugarFor(m => m.ScoreID)
        </div>
        <div class="col-sm-8">
            @Html.DropDownListFor(m => m.ScoreID, ViewDataTyped.Scores, new { @class = "form-control", style = "width:auto;" })
            @Html.ValidationMessageFor(m => m.Notes)
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-4 control-label text-right">
            <label>Jurisdiction</label>
        </div>
        <div class="col-sm-8">
            @ViewDataTyped.Jurisdiction.GetDisplayNameAsDetailUrl()
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-4 control-label text-right">
            <label>Assessment Started On</label>
        </div>
        <div class="col-sm-8">
            @ViewDataTyped.CreatedDate
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-4 control-label text-right">
            <label>Conducted By</label>
        </div>
        <div class="col-sm-8">
            @ViewDataTyped.ConductedByPerson.GetFullNameFirstLastAsUrl()
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-4 control-label text-right">
            @Html.LabelWithSugarFor(m => m.Notes)
        </div>
        <div class="col-sm-8">
            @Html.TextAreaWithMaxLengthFor(m => m.Notes, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string> { "form-control" })
            @Html.ValidationMessageFor(m => m.Notes)
        </div>
    </div>

    <hr/>
    <h4>Observations</h4>
    <div class="row">
        <div class="col-md-7 col-md-push-5 col-sm-12">
            <div id="@ViewDataTyped.OVTASummaryMapInitJson.MapDivID" style="height: 400px;"></div>
        </div>
        <div class="col-md-5 col-md-pull-7 col-sm-12">
            <div class="panel panelNeptune" id="observationsPanel" style="">

                <div class="panel-body">
                    @foreach (var observation in ViewDataTyped.OVTA.OnlandVisualTrashAssessmentObservations)
                    {
                        var photo = observation.OnlandVisualTrashAssessmentObservationPhotos.SingleOrDefault();
                        var id = observation.OnlandVisualTrashAssessmentObservationID;
                        <div class="row" id="observation_@id" onclick="handleClickOnTable(@id)" style="direction: ltr">
                            <div class="col-xs-12" style="padding: 4px;">
                                @if (photo != null)
                                {
                                    <img style="width: 286px" src="@photo.FileResource.GetFileResourceUrl()" />
                                }
                                else
                                {
                                    <p class="systemText">No photo provided</p>
                                }
                            </div>
                            <div class="col-xs-12" style="border-bottom: 1px solid #ddd;">
                                @if (observation.Note == null)
                                {
                                    <p class="systemText">No note provided</p>
                                }
                                else
                                {
                                    <p>observation.Note</p>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <hr />
    @Html.HiddenFor(m=>m.StormwaterJurisdictionID)
    <div class="row">
        <div class="col-xs-12 col-sm-2">
            <div><sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup> Required Field</div>
        </div>

        <div class="col-xs-12 col-sm-10" style="text-align: right">
            <button type="submit" class="btn btn-neptune">Finalize <i class="glyphicon glyphicon-chevron-right"></i></button>
        </div>
    </div>
}

<script>
    var summaryMap;
    var lastSelected;
    var observationsLayer;
    jQuery(function() {
        // we're gonna do a business
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.OVTASummaryMapInitJson).ToString(Formatting.None));
        summaryMap = new NeptuneMaps.Map(mapInitJson);

        observationsLayer = L.geoJson(mapInitJson.ObservationsLayerGeoJson.GeoJsonFeatureCollection, {
            pointToLayer: function (feature, latlng) {
                var icon = L.MakiMarkers.icon({
                    icon: feature.properties.FeatureGlyph,
                    color: feature.properties.FeatureColor,
                    size: "m"
                });

                return L.marker(latlng,
                    {
                        icon: icon,
                        title: feature.properties.Name,
                        alt: feature.properties.Name
                    });
            }
        });
        observationsLayer.addTo(summaryMap.map);

        observationsLayer.on('click',
            function(e) {
                setSelectedMarker(e.layer.feature);
                jQuery(".selectedObservation")
                    .removeClass("selectedObservation");
                jQuery("#observation_" + e.layer.feature.properties.ObservationID).addClass("selectedObservation");
                location.href = "#";
                location.href = "#observation_" + e.layer.feature.properties.ObservationID;

            });

        var assessmentAreaLayer = L.geoJson(mapInitJson.AssessmentAreaLayerGeoJson.GeoJsonFeatureCollection, {
            style: function(feature) {
                return {
                    fillColor: NeptuneMaps.Constants.defaultPolyColor,
                    fill: true,
                    fillOpacity: 0.5,
                    color: NeptuneMaps.Constants.defaultPolyColor,
                    weight: 5,
                    stroke: true
                };
            }
        });
        assessmentAreaLayer.addTo(summaryMap.map);
    });

    var handleClickOnMap = function() {
        //todo
    }

    var handleClickOnTable = function(id) {
        setActiveByID(id);
        jQuery(".selectedObservation").removeClass("selectedObservation");
        jQuery("#observation_" + id).addClass("selectedObservation");
    }

    var setSelectedMarker = function (layer) {
        if (!Sitka.Methods.isUndefinedNullOrEmpty(lastSelected)) {
            summaryMap.map.removeLayer(lastSelected);
        }

        lastSelected = L.geoJson(layer,
            {
                pointToLayer: function (feature, latlng) {
                    var icon = L.MakiMarkers.icon({
                        icon: "marker",
                        color: "#FFFF00",
                        size: "m"
                    });

                    return L.marker(latlng,
                        {
                            icon: icon,
                            riseOnHover: true
                        });
                },
                style: function (feature) {
                    return {
                        fillColor: "#FFFF00",
                        fill: true,
                        fillOpacity: 0.5,
                        color: "#FFFF00",
                        weight: 5,
                        stroke: true
                    };
                }
            });

        lastSelected.addTo(summaryMap.map);
    };

    var setActiveByID = function (id) {
        var layer = _.find(observationsLayer._layers,
            function (layer) { return id === layer.feature.properties.ObservationID; });
        setSelectedMarker(layer.feature);
    };
</script>