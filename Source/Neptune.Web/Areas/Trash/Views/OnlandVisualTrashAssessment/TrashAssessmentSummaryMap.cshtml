@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Areas.Trash.Views.OnlandVisualTrashAssessment.TrashAssessmentSummaryMap

    <style>
        .selectedObservation {
            background-color: palegoldenrod;
        }
        #observationsPanel {
            max-height: 450px;
            overflow-y: scroll;
            overflow-x: hidden;
            padding-left: 10px;
            direction: rtl;}
        .observation{
            cursor: pointer;
        }

        @@media only screen and (max-width: 992px) {
            #observationsPanel {
                max-height: 330px;
            }
        }

        .observationPhoto {
            width: 286px;
        }
        @@media only screen and (max-width: 1200px){
            .observationPhoto {
                width: 240px;
            }
        }
        @@media only screen and (max-width: 992px){
            .observationPhoto {
                width: 482px;
            }
        }
        @@media only screen and (max-width: 768px){
            .observationPhoto {
                width: inherit;
            }
        }
    </style>

<div class="row ignoreSerialization">
    <div class="col-md-7 col-md-push-5 col-sm-12">
        <div id="@ViewDataTyped.OVTASummaryMapInitJson.MapDivID" style="height: 450px;"></div>
    </div>
    <div class="col-md-5 col-md-pull-7 col-sm-12">
        <div class="panel panelNeptune" id="observationsPanel" style="">

            <div class="panel-body">
                @foreach (var observation in ViewDataTyped.OnlandVisualTrashAssessmentObservations)
                {
                    var photo = observation.OnlandVisualTrashAssessmentObservationPhotos.SingleOrDefault();
                    var id = observation.OnlandVisualTrashAssessmentObservationID;
                    <div class="row observation" id="observation_@id" onclick="handleClickOnTable(@id)" style="direction: ltr">
                        <div class="col-xs-12 observationPhotoContainer" style="padding: 4px;">
                            @if (photo != null)
                            {
                                <img class="observationPhoto" src="@photo.FileResource.GetFileResourceUrl()" />
                            }
                            else
                            {
                                <p class="systemText">No photo provided</p>
                            }
                        </div>
                        <div class="col-xs-12" style="border-bottom: 1px solid #ddd;">
                            @if (observation.Note == null)
                            {
                                <p class="systemText">No note provided</p>
                            }
                            else
                            {
                                <p>@observation.Note</p>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
        var summaryMap;
        var observationsLayer;
        jQuery(function() {
            var mapInitJson =
                @Html.Raw(JObject.FromObject(ViewDataTyped.OVTASummaryMapInitJson).ToString(Formatting.None));
            summaryMap = new NeptuneMaps.TrashAssessmentMap(mapInitJson, "Terrain", "@ViewDataTyped.GeoServerUrl");

            observationsLayer =
                summaryMap.CreateObservationsLayer(mapInitJson.ObservationsLayerGeoJson
                    .GeoJsonFeatureCollection);
            observationsLayer.on('click',
                function(e) {
                    summaryMap.setSelectedFeature(e.layer.feature);
                    jQuery(".selectedObservation")
                        .removeClass("selectedObservation");
                    jQuery("#observation_" + e.layer.feature.properties.ObservationID).addClass("selectedObservation");
                    location.href = "#";
                    location.href = "#observation_" + e.layer.feature.properties.ObservationID;

                });

            var assessmentAreaLayer = L.geoJson(mapInitJson.AssessmentAreaLayerGeoJson.GeoJsonFeatureCollection,
                {
                    style: function(feature) {
                        return {
                            fillColor: NeptuneMaps.Constants.defaultPolyColor,
                            fill: true,
                            fillOpacity: 0.5,
                            color: NeptuneMaps.Constants.defaultPolyColor,
                            weight: 2,
                            stroke: true
                        };
                    }
                });
            assessmentAreaLayer.addTo(summaryMap.map);
            summaryMap.layerControl.addOverlay(assessmentAreaLayer, "<span><img src='/Content/img/legendImages/workflowAssessmentArea.png' height='12px' style='margin-bottom:3px;'/> Assessment Area</span>");
            if (summaryMap.map.getZoom > 18) {
                summaryMap.map.setZoom(18);
            }

        });

        var handleClickOnTable = function(id) {
            summaryMap.SetActiveObservationByID(id);
            jQuery(".selectedObservation").removeClass("selectedObservation");
            jQuery("#observation_" + id).addClass("selectedObservation");
        }
</script>