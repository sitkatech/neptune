@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.ModalDialog
@using Neptune.Web.Models
@using Neptune.Web.Views.FieldVisit
@using Neptune.Web.Views.Shared
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inherits Neptune.Web.Areas.Trash.Views.OnlandVisualTrashAssessment.RefineAssessmentArea

@{ @SetLayout("SiteLayout.cshtml", ViewDataTyped) }



@if (!ViewDataTyped.OVTASection.IsSectionEnabled(ViewDataTyped.OVTA))
{
    <p class="systemText">@ViewDataTyped.OVTASection.GetSectionDisabledMessage()</p>
}
else
{

    <p>You may click or tap the edit button (<span class="glyphicon glyphicon-edit"></span>) on the map below to adjust the Assessment Area's vertices. You may drag vertices to move them, or click or tap vertices to delete them. Note that it may be necessary to zoom the map to see individual vertices that are close together (e.g. there may be many closely-placed vertices along curves). You may click the "Reset Map Zoom" button to zoom back out to the entire Assessment Area.</p>

    <p class="systemText">Note that the Assessment Area's edges should not intersect each other. If the area contains any edges that intersect each other, they will be split into separate shapes as necessary.</p>

    <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 350px; margin: 0"></div>

    using (Html.BeginForm())
     {
         <div id="@ViewDataTyped.MapFormID">

         </div>
         <div class="row" style="margin-top: 10px;">
             <div class="col-xs-12">
                 <button type="button" class="btn btn-neptune" onclick="resetZoom()">Reset Map Zoom</button>
             </div>
         </div>

         <hr/>
         <div class="row">
             <div class="col-xs-12 col-sm-3">
                 <div><sup>@Html.Raw(BootstrapHtmlHelpers.RequiredIcon)</sup> Required Field</div>
             </div>

             <div class="col-xs-12 col-sm-9" style="text-align: right">
                 <button type="submit" class="btn btn-neptune" value="false" name="@Html.NameFor(x => x.AutoAdvance)">Save</button>
                 <button type="submit" class="btn btn-neptune" value="true" name="@Html.NameFor(x => x.AutoAdvance)">Save &amp; Continue <i class="glyphicon glyphicon-chevron-right"></i></button>
             </div>
         </div>
     }


    <script type="text/javascript">
        getDrawOptions = function(editableFeatureGroup) {
            var options = {
                position: 'topleft',
                draw: {
                    polyline: false,
                    polygon: false,
                    circle: false, // Turns off this drawing tool
                    rectangle: false,
                    marker: false
                },
                edit: {
                    featureGroup: editableFeatureGroup, //REQUIRED!!
                    edit: {
                        maintainColor: true,
                        opacity: 0.3
                    },
                    remove: false
                }
            };
            return options;
        };

        var assessmentAreaMap;
        var drawControl;
        jQuery(document).ready(function() {
            var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
            var editableFeatureJsonObject =
                @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson.AssessmentAreaLayerGeoJson).ToString(Formatting.None));
            assessmentAreaMap = new NeptuneMaps.TrashAssessmentMap(mapInitJson, "Terrain", "@ViewDataTyped.GeoServerUrl");
            assessmentAreaMap.map.setMaxZoom(24);
            assessmentAreaMap.editableFeatureGroup = new L.FeatureGroup();
            assessmentAreaMap.CreateObservationsLayer(mapInitJson.ObservationsLayerGeoJson.GeoJsonFeatureCollection);

            var layerGroup = L.geoJson(editableFeatureJsonObject.GeoJsonFeatureCollection,
                {
                    onEachFeature: function(feature, layer) {
                        if (layer.getLayers) {
                            layer.getLayers().forEach(function(l) {
                                assessmentAreaMap.editableFeatureGroup.addLayer(l);
                            });
                        } else {
                            assessmentAreaMap.editableFeatureGroup.addLayer(layer);
                        }
                    }
                });

            var drawOptions = getDrawOptions(assessmentAreaMap.editableFeatureGroup);
            drawControl = new L.Control.Draw(drawOptions);
            assessmentAreaMap.map.addControl(drawControl);
            assessmentAreaMap.map.addLayer(assessmentAreaMap.editableFeatureGroup);

            assessmentAreaMap.map.on('draw:created',
                function(e) {
                    var layer = e.layer;
                    assessmentAreaMap.editableFeatureGroup.addLayer(layer);
                    var leafletId = layer._leaflet_id;
                    assessmentAreaMap.editableFeatureGroup._layers[leafletId].feature = new Object();
                    assessmentAreaMap.editableFeatureGroup._layers[leafletId].feature.properties = new Object();
                    assessmentAreaMap.editableFeatureGroup._layers[leafletId].feature.type = "Feature";
                    var feature = assessmentAreaMap.editableFeatureGroup._layers[leafletId].feature;
                    updateFeatureCollectionJson();
                });
            assessmentAreaMap.map.on('draw:edited',
                function(e) {
                    updateFeatureCollectionJson();
                });

            assessmentAreaMap.map.on('draw:editvertex',
                function(e) {
                    updateFeatureCollectionJson();
                })

            assessmentAreaMap.map.on('draw:deleted',
                function(e) {
                    updateFeatureCollectionJson();
                });

            updateFeatureCollectionJson();

            var saveButton = jQuery("#" + "@ModalDialogFormHelper.SaveButtonID");
            if (!Sitka.Methods.isUndefinedNullOrEmpty(saveButton)) {
                saveButton.text("Save");
            }

            var modalTitle = jQuery(".ui-dialog-title");
            if (!Sitka.Methods.isUndefinedNullOrEmpty(modalTitle)) {
                modalTitle.html("Edit ??? - Detail");
            }

            HookupCheckIfFormIsDirtyNoDisable(undefined);
            assessmentAreaMap.map.setZoom(18);
        });

        NeptuneMaps.Map.prototype.getTextAreaId = function(featureId) { return "textareaFor" + featureId; };

        function updateFeatureCollectionJson() {
            var geoJson = assessmentAreaMap.editableFeatureGroup.toGeoJSON();
            var mapForm = jQuery("#" + "@ViewDataTyped.MapFormID");
            mapForm.html("");
            var hiddens = [];
            for (var i = 0; i < geoJson.features.length; ++i) {
                var currentWktName = "name=\"@Html.NameFor(x => x.WktAndAnnotations[0].Wkt)\"".replace("0", i);
                var currentWktAnnotation = "name=\"@Html.NameFor(x => x.WktAndAnnotations[0].Annotation)\"".replace("0",
                    i);
                hiddens.push("<input type=\"hidden\" " +
                    currentWktName +
                    " value=\"" +
                    Terraformer.WKT.convert(geoJson.features[i].geometry) +
                    "\" />");
                hiddens.push("<input type=\"hidden\" " +
                    currentWktAnnotation +
                    " value=\"" +
                    Sitka.Methods.htmlEncode(geoJson.features[i].properties.Info) +
                    "\" />");
            }
            mapForm.html(hiddens.join("\r\n"));
        }

        function resetZoom() {
            assessmentAreaMap.map.fitBounds(assessmentAreaMap.editableFeatureGroup.getBounds());
        }
    </script>
}