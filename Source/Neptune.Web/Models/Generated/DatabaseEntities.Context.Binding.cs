
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using LtInfo.Common.DesignByContract;
using LtInfo.Common.Models;
using Neptune.Web.Common;

namespace Neptune.Web.Models
{
    public partial class DatabaseEntities : DbContext, LtInfo.Common.EntityModelBinding.ILtInfoEntityTypeLoader
    {
        static DatabaseEntities()
        {
            System.Data.Entity.Database.SetInitializer<DatabaseEntities>(null);
        }


        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {

        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Configurations.Add(new AuditLogConfiguration());
            modelBuilder.Configurations.Add(new CountyConfiguration());
            modelBuilder.Configurations.Add(new CustomAttributeConfiguration());
            modelBuilder.Configurations.Add(new CustomAttributeTypeConfiguration());
            modelBuilder.Configurations.Add(new CustomAttributeValueConfiguration());
            modelBuilder.Configurations.Add(new DelineationConfiguration());
            modelBuilder.Configurations.Add(new DelineationOverlapConfiguration());
            modelBuilder.Configurations.Add(new DelineationStagingConfiguration());
            modelBuilder.Configurations.Add(new DirtyModelNodeConfiguration());
            modelBuilder.Configurations.Add(new FieldDefinitionConfiguration());
            modelBuilder.Configurations.Add(new FieldVisitConfiguration());
            modelBuilder.Configurations.Add(new FileResourceConfiguration());
            modelBuilder.Configurations.Add(new FundingEventConfiguration());
            modelBuilder.Configurations.Add(new FundingEventFundingSourceConfiguration());
            modelBuilder.Configurations.Add(new FundingSourceConfiguration());
            modelBuilder.Configurations.Add(new HRUCharacteristicConfiguration());
            modelBuilder.Configurations.Add(new HydrologicSubareaConfiguration());
            modelBuilder.Configurations.Add(new LandUseBlockConfiguration());
            modelBuilder.Configurations.Add(new LandUseBlockStagingConfiguration());
            modelBuilder.Configurations.Add(new LoadGeneratingUnitConfiguration());
            modelBuilder.Configurations.Add(new LoadGeneratingUnitRefreshAreaConfiguration());
            modelBuilder.Configurations.Add(new LSPCBasinConfiguration());
            modelBuilder.Configurations.Add(new LSPCBasinStagingConfiguration());
            modelBuilder.Configurations.Add(new MaintenanceRecordConfiguration());
            modelBuilder.Configurations.Add(new MaintenanceRecordObservationConfiguration());
            modelBuilder.Configurations.Add(new MaintenanceRecordObservationValueConfiguration());
            modelBuilder.Configurations.Add(new NeptuneHomePageImageConfiguration());
            modelBuilder.Configurations.Add(new NeptunePageConfiguration());
            modelBuilder.Configurations.Add(new NeptunePageImageConfiguration());
            modelBuilder.Configurations.Add(new NereidResultConfiguration());
            modelBuilder.Configurations.Add(new NotificationConfiguration());
            modelBuilder.Configurations.Add(new OnlandVisualTrashAssessmentConfiguration());
            modelBuilder.Configurations.Add(new OnlandVisualTrashAssessmentAreaConfiguration());
            modelBuilder.Configurations.Add(new OnlandVisualTrashAssessmentObservationConfiguration());
            modelBuilder.Configurations.Add(new OnlandVisualTrashAssessmentObservationPhotoConfiguration());
            modelBuilder.Configurations.Add(new OnlandVisualTrashAssessmentObservationPhotoStagingConfiguration());
            modelBuilder.Configurations.Add(new OnlandVisualTrashAssessmentPreliminarySourceIdentificationTypeConfiguration());
            modelBuilder.Configurations.Add(new OrganizationConfiguration());
            modelBuilder.Configurations.Add(new OrganizationTypeConfiguration());
            modelBuilder.Configurations.Add(new ParcelConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PrecipitationZoneConfiguration());
            modelBuilder.Configurations.Add(new PrecipitationZoneStagingConfiguration());
            modelBuilder.Configurations.Add(new QuickBMPConfiguration());
            modelBuilder.Configurations.Add(new RegionalSubbasinConfiguration());
            modelBuilder.Configurations.Add(new RegionalSubbasinRevisionRequestConfiguration());
            modelBuilder.Configurations.Add(new RegionalSubbasinStagingConfiguration());
            modelBuilder.Configurations.Add(new SourceControlBMPConfiguration());
            modelBuilder.Configurations.Add(new SourceControlBMPAttributeConfiguration());
            modelBuilder.Configurations.Add(new SourceControlBMPAttributeCategoryConfiguration());
            modelBuilder.Configurations.Add(new StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new StormwaterJurisdictionConfiguration());
            modelBuilder.Configurations.Add(new StormwaterJurisdictionGeometryConfiguration());
            modelBuilder.Configurations.Add(new StormwaterJurisdictionPersonConfiguration());
            modelBuilder.Configurations.Add(new SupportRequestLogConfiguration());
            modelBuilder.Configurations.Add(new TrainingVideoConfiguration());
            modelBuilder.Configurations.Add(new TrashGeneratingUnitConfiguration());
            modelBuilder.Configurations.Add(new TrashGeneratingUnit4326Configuration());
            modelBuilder.Configurations.Add(new TrashGeneratingUnitAdjustmentConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPAssessmentConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPAssessmentObservationTypeConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPAssessmentPhotoConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPBenchmarkAndThresholdConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPDocumentConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPImageConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPModelingAttributeConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPObservationConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPTypeConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPTypeAssessmentObservationTypeConfiguration());
            modelBuilder.Configurations.Add(new TreatmentBMPTypeCustomAttributeTypeConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanDocumentConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanParcelConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanPhotoConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVerifyConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVerifyPhotoConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVerifyQuickBMPConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVerifySourceControlBMPConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVerifyStatusConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVerifyTreatmentBMPConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVerifyTypeConfiguration());
            modelBuilder.Configurations.Add(new WaterQualityManagementPlanVisitStatusConfiguration());
            modelBuilder.Configurations.Add(new WatershedConfiguration());
            modelBuilder.Configurations.Add(new vFieldVisitDetailedConfiguration());
            modelBuilder.Configurations.Add(new vGeoServerWaterQualityManagementPlanConfiguration());
            modelBuilder.Configurations.Add(new vMostRecentTreatmentBMPAssessmentConfiguration());
            modelBuilder.Configurations.Add(new vNereidBMPColocationConfiguration());
            modelBuilder.Configurations.Add(new vNereidLoadingInputConfiguration());
            modelBuilder.Configurations.Add(new vNereidRegionalSubbasinCentralizedBMPConfiguration());
            modelBuilder.Configurations.Add(new vNereidTreatmentBMPRegionalSubbasinConfiguration());
            modelBuilder.Configurations.Add(new vOnlandVisualTrashAssessmentAreaProgressConfiguration());
            modelBuilder.Configurations.Add(new vPowerBICentralizedBMPLoadGeneratingUnitConfiguration());
            modelBuilder.Configurations.Add(new vPowerBILandUseStatisticConfiguration());
            modelBuilder.Configurations.Add(new vPowerBITreatmentBMPConfiguration());
            modelBuilder.Configurations.Add(new vPowerBIWaterQualityManagementPlanConfiguration());
            modelBuilder.Configurations.Add(new vPowerBIWaterQualityManagementPlanOAndMVerificationConfiguration());
            modelBuilder.Configurations.Add(new vTrashGeneratingUnitLoadStatisticConfiguration());
            modelBuilder.Configurations.Add(new vTreatmentBMPDetailedConfiguration());
            modelBuilder.Configurations.Add(new vViewTreatmentBMPModelingAttributesConfiguration());
            modelBuilder.Configurations.Add(new vWaterQualityManagementPlanLGUAuditConfiguration());
        }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<County> Counties { get; set; }
        public virtual DbSet<CustomAttribute> CustomAttributes { get; set; }
        public virtual DbSet<CustomAttributeType> CustomAttributeTypes { get; set; }
        public virtual DbSet<CustomAttributeValue> CustomAttributeValues { get; set; }
        public virtual DbSet<DelineationOverlap> DelineationOverlaps { get; set; }
        public virtual DbSet<Delineation> Delineations { get; set; }
        public virtual DbSet<DelineationStaging> DelineationStagings { get; set; }
        public virtual DbSet<DirtyModelNode> DirtyModelNodes { get; set; }
        public virtual DbSet<FieldDefinition> FieldDefinitions { get; set; }
        public virtual DbSet<FieldVisit> FieldVisits { get; set; }
        public virtual DbSet<FileResource> FileResources { get; set; }
        public virtual DbSet<FundingEventFundingSource> FundingEventFundingSources { get; set; }
        public virtual DbSet<FundingEvent> FundingEvents { get; set; }
        public virtual DbSet<FundingSource> FundingSources { get; set; }
        public virtual DbSet<HRUCharacteristic> HRUCharacteristics { get; set; }
        public virtual DbSet<HydrologicSubarea> HydrologicSubareas { get; set; }
        public virtual DbSet<LandUseBlock> LandUseBlocks { get; set; }
        public virtual DbSet<LandUseBlockStaging> LandUseBlockStagings { get; set; }
        public virtual DbSet<LoadGeneratingUnitRefreshArea> LoadGeneratingUnitRefreshAreas { get; set; }
        public virtual DbSet<LoadGeneratingUnit> LoadGeneratingUnits { get; set; }
        public virtual DbSet<LSPCBasin> LSPCBasins { get; set; }
        public virtual DbSet<LSPCBasinStaging> LSPCBasinStagings { get; set; }
        public virtual DbSet<MaintenanceRecordObservation> MaintenanceRecordObservations { get; set; }
        public virtual DbSet<MaintenanceRecordObservationValue> MaintenanceRecordObservationValues { get; set; }
        public virtual DbSet<MaintenanceRecord> MaintenanceRecords { get; set; }
        public virtual DbSet<NeptuneHomePageImage> NeptuneHomePageImages { get; set; }
        public virtual DbSet<NeptunePageImage> NeptunePageImages { get; set; }
        public virtual DbSet<NeptunePage> NeptunePages { get; set; }
        public virtual DbSet<NereidResult> NereidResults { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OnlandVisualTrashAssessmentArea> OnlandVisualTrashAssessmentAreas { get; set; }
        public virtual DbSet<OnlandVisualTrashAssessmentObservationPhoto> OnlandVisualTrashAssessmentObservationPhotos { get; set; }
        public virtual DbSet<OnlandVisualTrashAssessmentObservationPhotoStaging> OnlandVisualTrashAssessmentObservationPhotoStagings { get; set; }
        public virtual DbSet<OnlandVisualTrashAssessmentObservation> OnlandVisualTrashAssessmentObservations { get; set; }
        public virtual DbSet<OnlandVisualTrashAssessmentPreliminarySourceIdentificationType> OnlandVisualTrashAssessmentPreliminarySourceIdentificationTypes { get; set; }
        public virtual DbSet<OnlandVisualTrashAssessment> OnlandVisualTrashAssessments { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }
        public virtual DbSet<Parcel> Parcels { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PrecipitationZone> PrecipitationZones { get; set; }
        public virtual DbSet<PrecipitationZoneStaging> PrecipitationZoneStagings { get; set; }
        public virtual DbSet<QuickBMP> QuickBMPs { get; set; }
        public virtual DbSet<RegionalSubbasinRevisionRequest> RegionalSubbasinRevisionRequests { get; set; }
        public virtual DbSet<RegionalSubbasin> RegionalSubbasins { get; set; }
        public virtual DbSet<RegionalSubbasinStaging> RegionalSubbasinStagings { get; set; }
        public virtual DbSet<SourceControlBMPAttributeCategory> SourceControlBMPAttributeCategories { get; set; }
        public virtual DbSet<SourceControlBMPAttribute> SourceControlBMPAttributes { get; set; }
        public virtual DbSet<SourceControlBMP> SourceControlBMPs { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<StormwaterJurisdictionGeometry> StormwaterJurisdictionGeometries { get; set; }
        public virtual DbSet<StormwaterJurisdictionPerson> StormwaterJurisdictionPeople { get; set; }
        public virtual DbSet<StormwaterJurisdiction> StormwaterJurisdictions { get; set; }
        public virtual DbSet<SupportRequestLog> SupportRequestLogs { get; set; }
        public virtual DbSet<TrainingVideo> TrainingVideos { get; set; }
        public virtual DbSet<TrashGeneratingUnit4326> TrashGeneratingUnit4326s { get; set; }
        public virtual DbSet<TrashGeneratingUnitAdjustment> TrashGeneratingUnitAdjustments { get; set; }
        public virtual DbSet<TrashGeneratingUnit> TrashGeneratingUnits { get; set; }
        public virtual DbSet<TreatmentBMPAssessmentObservationType> TreatmentBMPAssessmentObservationTypes { get; set; }
        public virtual DbSet<TreatmentBMPAssessmentPhoto> TreatmentBMPAssessmentPhotos { get; set; }
        public virtual DbSet<TreatmentBMPAssessment> TreatmentBMPAssessments { get; set; }
        public virtual DbSet<TreatmentBMPBenchmarkAndThreshold> TreatmentBMPBenchmarkAndThresholds { get; set; }
        public virtual DbSet<TreatmentBMPDocument> TreatmentBMPDocuments { get; set; }
        public virtual DbSet<TreatmentBMPImage> TreatmentBMPImages { get; set; }
        public virtual DbSet<TreatmentBMPModelingAttribute> TreatmentBMPModelingAttributes { get; set; }
        public virtual DbSet<TreatmentBMPObservation> TreatmentBMPObservations { get; set; }
        public virtual DbSet<TreatmentBMP> TreatmentBMPs { get; set; }
        public virtual DbSet<TreatmentBMPTypeAssessmentObservationType> TreatmentBMPTypeAssessmentObservationTypes { get; set; }
        public virtual DbSet<TreatmentBMPTypeCustomAttributeType> TreatmentBMPTypeCustomAttributeTypes { get; set; }
        public virtual DbSet<TreatmentBMPType> TreatmentBMPTypes { get; set; }
        public virtual DbSet<WaterQualityManagementPlanDocument> WaterQualityManagementPlanDocuments { get; set; }
        public virtual DbSet<WaterQualityManagementPlanParcel> WaterQualityManagementPlanParcels { get; set; }
        public virtual DbSet<WaterQualityManagementPlanPhoto> WaterQualityManagementPlanPhotos { get; set; }
        public virtual DbSet<WaterQualityManagementPlan> WaterQualityManagementPlans { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVerify> WaterQualityManagementPlanVerifies { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVerifyPhoto> WaterQualityManagementPlanVerifyPhotos { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVerifyQuickBMP> WaterQualityManagementPlanVerifyQuickBMPs { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVerifySourceControlBMP> WaterQualityManagementPlanVerifySourceControlBMPs { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVerifyStatus> WaterQualityManagementPlanVerifyStatuses { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVerifyTreatmentBMP> WaterQualityManagementPlanVerifyTreatmentBMPs { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVerifyType> WaterQualityManagementPlanVerifyTypes { get; set; }
        public virtual DbSet<WaterQualityManagementPlanVisitStatus> WaterQualityManagementPlanVisitStatuses { get; set; }
        public virtual DbSet<Watershed> Watersheds { get; set; }
        public virtual DbSet<vFieldVisitDetailed> vFieldVisitDetaileds { get; set; }
        public virtual DbSet<vGeoServerWaterQualityManagementPlan> vGeoServerWaterQualityManagementPlans { get; set; }
        public virtual DbSet<vMostRecentTreatmentBMPAssessment> vMostRecentTreatmentBMPAssessments { get; set; }
        public virtual DbSet<vNereidBMPColocation> vNereidBMPColocations { get; set; }
        public virtual DbSet<vNereidLoadingInput> vNereidLoadingInputs { get; set; }
        public virtual DbSet<vNereidRegionalSubbasinCentralizedBMP> vNereidRegionalSubbasinCentralizedBMPs { get; set; }
        public virtual DbSet<vNereidTreatmentBMPRegionalSubbasin> vNereidTreatmentBMPRegionalSubbasins { get; set; }
        public virtual DbSet<vOnlandVisualTrashAssessmentAreaProgress> vOnlandVisualTrashAssessmentAreaProgresses { get; set; }
        public virtual DbSet<vPowerBICentralizedBMPLoadGeneratingUnit> vPowerBICentralizedBMPLoadGeneratingUnits { get; set; }
        public virtual DbSet<vPowerBILandUseStatistic> vPowerBILandUseStatistics { get; set; }
        public virtual DbSet<vPowerBITreatmentBMP> vPowerBITreatmentBMPs { get; set; }
        public virtual DbSet<vPowerBIWaterQualityManagementPlanOAndMVerification> vPowerBIWaterQualityManagementPlanOAndMVerifications { get; set; }
        public virtual DbSet<vPowerBIWaterQualityManagementPlan> vPowerBIWaterQualityManagementPlans { get; set; }
        public virtual DbSet<vTrashGeneratingUnitLoadStatistic> vTrashGeneratingUnitLoadStatistics { get; set; }
        public virtual DbSet<vTreatmentBMPDetailed> vTreatmentBMPDetaileds { get; set; }
        public virtual DbSet<vViewTreatmentBMPModelingAttributes> vViewTreatmentBMPModelingAttributes { get; set; }
        public virtual DbSet<vWaterQualityManagementPlanLGUAudit> vWaterQualityManagementPlanLGUAudits { get; set; }

        public object LoadType(Type type, int primaryKey)
        {
            switch (type.Name)
            {
                case "AuditLogEventType":
                    var auditLogEventType = AuditLogEventType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(auditLogEventType, "AuditLogEventType", primaryKey);
                    return auditLogEventType;

                case "AuditLog":
                    return AuditLogs.GetAuditLog(primaryKey);

                case "County":
                    return Counties.GetCounty(primaryKey);

                case "CustomAttributeDataType":
                    var customAttributeDataType = CustomAttributeDataType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(customAttributeDataType, "CustomAttributeDataType", primaryKey);
                    return customAttributeDataType;

                case "CustomAttribute":
                    return CustomAttributes.GetCustomAttribute(primaryKey);

                case "CustomAttributeTypePurpose":
                    var customAttributeTypePurpose = CustomAttributeTypePurpose.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(customAttributeTypePurpose, "CustomAttributeTypePurpose", primaryKey);
                    return customAttributeTypePurpose;

                case "CustomAttributeType":
                    return CustomAttributeTypes.GetCustomAttributeType(primaryKey);

                case "CustomAttributeValue":
                    return CustomAttributeValues.GetCustomAttributeValue(primaryKey);

                case "DelineationOverlap":
                    return DelineationOverlaps.GetDelineationOverlap(primaryKey);

                case "Delineation":
                    return Delineations.GetDelineation(primaryKey);

                case "DelineationStaging":
                    return DelineationStagings.GetDelineationStaging(primaryKey);

                case "DelineationType":
                    var delineationType = DelineationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(delineationType, "DelineationType", primaryKey);
                    return delineationType;

                case "DirtyModelNode":
                    return DirtyModelNodes.GetDirtyModelNode(primaryKey);

                case "DryWeatherFlowOverride":
                    var dryWeatherFlowOverride = DryWeatherFlowOverride.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(dryWeatherFlowOverride, "DryWeatherFlowOverride", primaryKey);
                    return dryWeatherFlowOverride;

                case "FieldDefinition":
                    return FieldDefinitions.GetFieldDefinition(primaryKey);

                case "FieldDefinitionType":
                    var fieldDefinitionType = FieldDefinitionType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fieldDefinitionType, "FieldDefinitionType", primaryKey);
                    return fieldDefinitionType;

                case "FieldVisit":
                    return FieldVisits.GetFieldVisit(primaryKey);

                case "FieldVisitSection":
                    var fieldVisitSection = FieldVisitSection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fieldVisitSection, "FieldVisitSection", primaryKey);
                    return fieldVisitSection;

                case "FieldVisitStatus":
                    var fieldVisitStatus = FieldVisitStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fieldVisitStatus, "FieldVisitStatus", primaryKey);
                    return fieldVisitStatus;

                case "FieldVisitType":
                    var fieldVisitType = FieldVisitType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fieldVisitType, "FieldVisitType", primaryKey);
                    return fieldVisitType;

                case "FileResourceMimeType":
                    var fileResourceMimeType = FileResourceMimeType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fileResourceMimeType, "FileResourceMimeType", primaryKey);
                    return fileResourceMimeType;

                case "FileResource":
                    return FileResources.GetFileResource(primaryKey);

                case "FundingEventFundingSource":
                    return FundingEventFundingSources.GetFundingEventFundingSource(primaryKey);

                case "FundingEvent":
                    return FundingEvents.GetFundingEvent(primaryKey);

                case "FundingEventType":
                    var fundingEventType = FundingEventType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fundingEventType, "FundingEventType", primaryKey);
                    return fundingEventType;

                case "FundingSource":
                    return FundingSources.GetFundingSource(primaryKey);

                case "GoogleChartType":
                    var googleChartType = GoogleChartType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(googleChartType, "GoogleChartType", primaryKey);
                    return googleChartType;

                case "HRUCharacteristicLandUseCode":
                    var hRUCharacteristicLandUseCode = HRUCharacteristicLandUseCode.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(hRUCharacteristicLandUseCode, "HRUCharacteristicLandUseCode", primaryKey);
                    return hRUCharacteristicLandUseCode;

                case "HRUCharacteristic":
                    return HRUCharacteristics.GetHRUCharacteristic(primaryKey);

                case "HydrologicSubarea":
                    return HydrologicSubareas.GetHydrologicSubarea(primaryKey);

                case "HydromodificationApplies":
                    var hydromodificationApplies = HydromodificationApplies.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(hydromodificationApplies, "HydromodificationApplies", primaryKey);
                    return hydromodificationApplies;

                case "LandUseBlock":
                    return LandUseBlocks.GetLandUseBlock(primaryKey);

                case "LandUseBlockStaging":
                    return LandUseBlockStagings.GetLandUseBlockStaging(primaryKey);

                case "LoadGeneratingUnitRefreshArea":
                    return LoadGeneratingUnitRefreshAreas.GetLoadGeneratingUnitRefreshArea(primaryKey);

                case "LoadGeneratingUnit":
                    return LoadGeneratingUnits.GetLoadGeneratingUnit(primaryKey);

                case "LSPCBasin":
                    return LSPCBasins.GetLSPCBasin(primaryKey);

                case "LSPCBasinStaging":
                    return LSPCBasinStagings.GetLSPCBasinStaging(primaryKey);

                case "MaintenanceRecordObservation":
                    return MaintenanceRecordObservations.GetMaintenanceRecordObservation(primaryKey);

                case "MaintenanceRecordObservationValue":
                    return MaintenanceRecordObservationValues.GetMaintenanceRecordObservationValue(primaryKey);

                case "MaintenanceRecord":
                    return MaintenanceRecords.GetMaintenanceRecord(primaryKey);

                case "MaintenanceRecordType":
                    var maintenanceRecordType = MaintenanceRecordType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(maintenanceRecordType, "MaintenanceRecordType", primaryKey);
                    return maintenanceRecordType;

                case "MeasurementUnitType":
                    var measurementUnitType = MeasurementUnitType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(measurementUnitType, "MeasurementUnitType", primaryKey);
                    return measurementUnitType;

                case "MonthsOfOperation":
                    var monthsOfOperation = MonthsOfOperation.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(monthsOfOperation, "MonthsOfOperation", primaryKey);
                    return monthsOfOperation;

                case "NeptuneArea":
                    var neptuneArea = NeptuneArea.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(neptuneArea, "NeptuneArea", primaryKey);
                    return neptuneArea;

                case "NeptuneHomePageImage":
                    return NeptuneHomePageImages.GetNeptuneHomePageImage(primaryKey);

                case "NeptunePageImage":
                    return NeptunePageImages.GetNeptunePageImage(primaryKey);

                case "NeptunePageRenderType":
                    var neptunePageRenderType = NeptunePageRenderType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(neptunePageRenderType, "NeptunePageRenderType", primaryKey);
                    return neptunePageRenderType;

                case "NeptunePage":
                    return NeptunePages.GetNeptunePage(primaryKey);

                case "NeptunePageType":
                    var neptunePageType = NeptunePageType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(neptunePageType, "NeptunePageType", primaryKey);
                    return neptunePageType;

                case "NereidResult":
                    return NereidResults.GetNereidResult(primaryKey);

                case "Notification":
                    return Notifications.GetNotification(primaryKey);

                case "NotificationType":
                    var notificationType = NotificationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(notificationType, "NotificationType", primaryKey);
                    return notificationType;

                case "ObservationTargetType":
                    var observationTargetType = ObservationTargetType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(observationTargetType, "ObservationTargetType", primaryKey);
                    return observationTargetType;

                case "ObservationThresholdType":
                    var observationThresholdType = ObservationThresholdType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(observationThresholdType, "ObservationThresholdType", primaryKey);
                    return observationThresholdType;

                case "ObservationTypeCollectionMethod":
                    var observationTypeCollectionMethod = ObservationTypeCollectionMethod.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(observationTypeCollectionMethod, "ObservationTypeCollectionMethod", primaryKey);
                    return observationTypeCollectionMethod;

                case "ObservationTypeSpecification":
                    var observationTypeSpecification = ObservationTypeSpecification.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(observationTypeSpecification, "ObservationTypeSpecification", primaryKey);
                    return observationTypeSpecification;

                case "OnlandVisualTrashAssessmentArea":
                    return OnlandVisualTrashAssessmentAreas.GetOnlandVisualTrashAssessmentArea(primaryKey);

                case "OnlandVisualTrashAssessmentObservationPhoto":
                    return OnlandVisualTrashAssessmentObservationPhotos.GetOnlandVisualTrashAssessmentObservationPhoto(primaryKey);

                case "OnlandVisualTrashAssessmentObservationPhotoStaging":
                    return OnlandVisualTrashAssessmentObservationPhotoStagings.GetOnlandVisualTrashAssessmentObservationPhotoStaging(primaryKey);

                case "OnlandVisualTrashAssessmentObservation":
                    return OnlandVisualTrashAssessmentObservations.GetOnlandVisualTrashAssessmentObservation(primaryKey);

                case "OnlandVisualTrashAssessmentPreliminarySourceIdentificationType":
                    return OnlandVisualTrashAssessmentPreliminarySourceIdentificationTypes.GetOnlandVisualTrashAssessmentPreliminarySourceIdentificationType(primaryKey);

                case "OnlandVisualTrashAssessment":
                    return OnlandVisualTrashAssessments.GetOnlandVisualTrashAssessment(primaryKey);

                case "OnlandVisualTrashAssessmentScore":
                    var onlandVisualTrashAssessmentScore = OnlandVisualTrashAssessmentScore.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(onlandVisualTrashAssessmentScore, "OnlandVisualTrashAssessmentScore", primaryKey);
                    return onlandVisualTrashAssessmentScore;

                case "OnlandVisualTrashAssessmentStatus":
                    var onlandVisualTrashAssessmentStatus = OnlandVisualTrashAssessmentStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(onlandVisualTrashAssessmentStatus, "OnlandVisualTrashAssessmentStatus", primaryKey);
                    return onlandVisualTrashAssessmentStatus;

                case "Organization":
                    return Organizations.GetOrganization(primaryKey);

                case "OrganizationType":
                    return OrganizationTypes.GetOrganizationType(primaryKey);

                case "OVTASection":
                    var oVTASection = OVTASection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(oVTASection, "OVTASection", primaryKey);
                    return oVTASection;

                case "Parcel":
                    return Parcels.GetParcel(primaryKey);

                case "Person":
                    return People.GetPerson(primaryKey);

                case "PermitType":
                    var permitType = PermitType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(permitType, "PermitType", primaryKey);
                    return permitType;

                case "PrecipitationZone":
                    return PrecipitationZones.GetPrecipitationZone(primaryKey);

                case "PrecipitationZoneStaging":
                    return PrecipitationZoneStagings.GetPrecipitationZoneStaging(primaryKey);

                case "PreliminarySourceIdentificationCategory":
                    var preliminarySourceIdentificationCategory = PreliminarySourceIdentificationCategory.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(preliminarySourceIdentificationCategory, "PreliminarySourceIdentificationCategory", primaryKey);
                    return preliminarySourceIdentificationCategory;

                case "PreliminarySourceIdentificationType":
                    var preliminarySourceIdentificationType = PreliminarySourceIdentificationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(preliminarySourceIdentificationType, "PreliminarySourceIdentificationType", primaryKey);
                    return preliminarySourceIdentificationType;

                case "PriorityLandUseType":
                    var priorityLandUseType = PriorityLandUseType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(priorityLandUseType, "PriorityLandUseType", primaryKey);
                    return priorityLandUseType;

                case "QuickBMP":
                    return QuickBMPs.GetQuickBMP(primaryKey);

                case "RegionalSubbasinRevisionRequest":
                    return RegionalSubbasinRevisionRequests.GetRegionalSubbasinRevisionRequest(primaryKey);

                case "RegionalSubbasinRevisionRequestStatus":
                    var regionalSubbasinRevisionRequestStatus = RegionalSubbasinRevisionRequestStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(regionalSubbasinRevisionRequestStatus, "RegionalSubbasinRevisionRequestStatus", primaryKey);
                    return regionalSubbasinRevisionRequestStatus;

                case "RegionalSubbasin":
                    return RegionalSubbasins.GetRegionalSubbasin(primaryKey);

                case "RegionalSubbasinStaging":
                    return RegionalSubbasinStagings.GetRegionalSubbasinStaging(primaryKey);

                case "Role":
                    var role = Role.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(role, "Role", primaryKey);
                    return role;

                case "RoutingConfiguration":
                    var routingConfiguration = RoutingConfiguration.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(routingConfiguration, "RoutingConfiguration", primaryKey);
                    return routingConfiguration;

                case "SizingBasisType":
                    var sizingBasisType = SizingBasisType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(sizingBasisType, "SizingBasisType", primaryKey);
                    return sizingBasisType;

                case "SourceControlBMPAttributeCategory":
                    return SourceControlBMPAttributeCategories.GetSourceControlBMPAttributeCategory(primaryKey);

                case "SourceControlBMPAttribute":
                    return SourceControlBMPAttributes.GetSourceControlBMPAttribute(primaryKey);

                case "SourceControlBMP":
                    return SourceControlBMPs.GetSourceControlBMP(primaryKey);

                case "StateProvince":
                    return StateProvinces.GetStateProvince(primaryKey);

                case "StormwaterBreadCrumbEntity":
                    var stormwaterBreadCrumbEntity = StormwaterBreadCrumbEntity.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(stormwaterBreadCrumbEntity, "StormwaterBreadCrumbEntity", primaryKey);
                    return stormwaterBreadCrumbEntity;

                case "StormwaterJurisdictionGeometry":
                    return StormwaterJurisdictionGeometries.GetStormwaterJurisdictionGeometry(primaryKey);

                case "StormwaterJurisdictionPerson":
                    return StormwaterJurisdictionPeople.GetStormwaterJurisdictionPerson(primaryKey);

                case "StormwaterJurisdictionPublicBMPVisibilityType":
                    var stormwaterJurisdictionPublicBMPVisibilityType = StormwaterJurisdictionPublicBMPVisibilityType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(stormwaterJurisdictionPublicBMPVisibilityType, "StormwaterJurisdictionPublicBMPVisibilityType", primaryKey);
                    return stormwaterJurisdictionPublicBMPVisibilityType;

                case "StormwaterJurisdictionPublicWQMPVisibilityType":
                    var stormwaterJurisdictionPublicWQMPVisibilityType = StormwaterJurisdictionPublicWQMPVisibilityType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(stormwaterJurisdictionPublicWQMPVisibilityType, "StormwaterJurisdictionPublicWQMPVisibilityType", primaryKey);
                    return stormwaterJurisdictionPublicWQMPVisibilityType;

                case "StormwaterJurisdiction":
                    return StormwaterJurisdictions.GetStormwaterJurisdiction(primaryKey);

                case "SupportRequestLog":
                    return SupportRequestLogs.GetSupportRequestLog(primaryKey);

                case "SupportRequestType":
                    var supportRequestType = SupportRequestType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(supportRequestType, "SupportRequestType", primaryKey);
                    return supportRequestType;

                case "TimeOfConcentration":
                    var timeOfConcentration = TimeOfConcentration.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(timeOfConcentration, "TimeOfConcentration", primaryKey);
                    return timeOfConcentration;

                case "TrainingVideo":
                    return TrainingVideos.GetTrainingVideo(primaryKey);

                case "TrashCaptureStatusType":
                    var trashCaptureStatusType = TrashCaptureStatusType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(trashCaptureStatusType, "TrashCaptureStatusType", primaryKey);
                    return trashCaptureStatusType;

                case "TrashGeneratingUnit4326":
                    return TrashGeneratingUnit4326s.GetTrashGeneratingUnit4326(primaryKey);

                case "TrashGeneratingUnitAdjustment":
                    return TrashGeneratingUnitAdjustments.GetTrashGeneratingUnitAdjustment(primaryKey);

                case "TrashGeneratingUnit":
                    return TrashGeneratingUnits.GetTrashGeneratingUnit(primaryKey);

                case "TreatmentBMPAssessmentObservationType":
                    return TreatmentBMPAssessmentObservationTypes.GetTreatmentBMPAssessmentObservationType(primaryKey);

                case "TreatmentBMPAssessmentPhoto":
                    return TreatmentBMPAssessmentPhotos.GetTreatmentBMPAssessmentPhoto(primaryKey);

                case "TreatmentBMPAssessment":
                    return TreatmentBMPAssessments.GetTreatmentBMPAssessment(primaryKey);

                case "TreatmentBMPAssessmentType":
                    var treatmentBMPAssessmentType = TreatmentBMPAssessmentType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(treatmentBMPAssessmentType, "TreatmentBMPAssessmentType", primaryKey);
                    return treatmentBMPAssessmentType;

                case "TreatmentBMPBenchmarkAndThreshold":
                    return TreatmentBMPBenchmarkAndThresholds.GetTreatmentBMPBenchmarkAndThreshold(primaryKey);

                case "TreatmentBMPDocument":
                    return TreatmentBMPDocuments.GetTreatmentBMPDocument(primaryKey);

                case "TreatmentBMPImage":
                    return TreatmentBMPImages.GetTreatmentBMPImage(primaryKey);

                case "TreatmentBMPLifespanType":
                    var treatmentBMPLifespanType = TreatmentBMPLifespanType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(treatmentBMPLifespanType, "TreatmentBMPLifespanType", primaryKey);
                    return treatmentBMPLifespanType;

                case "TreatmentBMPModelingAttribute":
                    return TreatmentBMPModelingAttributes.GetTreatmentBMPModelingAttribute(primaryKey);

                case "TreatmentBMPModelingType":
                    var treatmentBMPModelingType = TreatmentBMPModelingType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(treatmentBMPModelingType, "TreatmentBMPModelingType", primaryKey);
                    return treatmentBMPModelingType;

                case "TreatmentBMPObservation":
                    return TreatmentBMPObservations.GetTreatmentBMPObservation(primaryKey);

                case "TreatmentBMP":
                    return TreatmentBMPs.GetTreatmentBMP(primaryKey);

                case "TreatmentBMPTypeAssessmentObservationType":
                    return TreatmentBMPTypeAssessmentObservationTypes.GetTreatmentBMPTypeAssessmentObservationType(primaryKey);

                case "TreatmentBMPTypeCustomAttributeType":
                    return TreatmentBMPTypeCustomAttributeTypes.GetTreatmentBMPTypeCustomAttributeType(primaryKey);

                case "TreatmentBMPType":
                    return TreatmentBMPTypes.GetTreatmentBMPType(primaryKey);

                case "UnderlyingHydrologicSoilGroup":
                    var underlyingHydrologicSoilGroup = UnderlyingHydrologicSoilGroup.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(underlyingHydrologicSoilGroup, "UnderlyingHydrologicSoilGroup", primaryKey);
                    return underlyingHydrologicSoilGroup;

                case "WaterQualityManagementPlanDevelopmentType":
                    var waterQualityManagementPlanDevelopmentType = WaterQualityManagementPlanDevelopmentType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(waterQualityManagementPlanDevelopmentType, "WaterQualityManagementPlanDevelopmentType", primaryKey);
                    return waterQualityManagementPlanDevelopmentType;

                case "WaterQualityManagementPlanDocument":
                    return WaterQualityManagementPlanDocuments.GetWaterQualityManagementPlanDocument(primaryKey);

                case "WaterQualityManagementPlanDocumentType":
                    var waterQualityManagementPlanDocumentType = WaterQualityManagementPlanDocumentType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(waterQualityManagementPlanDocumentType, "WaterQualityManagementPlanDocumentType", primaryKey);
                    return waterQualityManagementPlanDocumentType;

                case "WaterQualityManagementPlanLandUse":
                    var waterQualityManagementPlanLandUse = WaterQualityManagementPlanLandUse.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(waterQualityManagementPlanLandUse, "WaterQualityManagementPlanLandUse", primaryKey);
                    return waterQualityManagementPlanLandUse;

                case "WaterQualityManagementPlanModelingApproach":
                    var waterQualityManagementPlanModelingApproach = WaterQualityManagementPlanModelingApproach.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(waterQualityManagementPlanModelingApproach, "WaterQualityManagementPlanModelingApproach", primaryKey);
                    return waterQualityManagementPlanModelingApproach;

                case "WaterQualityManagementPlanParcel":
                    return WaterQualityManagementPlanParcels.GetWaterQualityManagementPlanParcel(primaryKey);

                case "WaterQualityManagementPlanPermitTerm":
                    var waterQualityManagementPlanPermitTerm = WaterQualityManagementPlanPermitTerm.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(waterQualityManagementPlanPermitTerm, "WaterQualityManagementPlanPermitTerm", primaryKey);
                    return waterQualityManagementPlanPermitTerm;

                case "WaterQualityManagementPlanPhoto":
                    return WaterQualityManagementPlanPhotos.GetWaterQualityManagementPlanPhoto(primaryKey);

                case "WaterQualityManagementPlanPriority":
                    var waterQualityManagementPlanPriority = WaterQualityManagementPlanPriority.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(waterQualityManagementPlanPriority, "WaterQualityManagementPlanPriority", primaryKey);
                    return waterQualityManagementPlanPriority;

                case "WaterQualityManagementPlan":
                    return WaterQualityManagementPlans.GetWaterQualityManagementPlan(primaryKey);

                case "WaterQualityManagementPlanStatus":
                    var waterQualityManagementPlanStatus = WaterQualityManagementPlanStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(waterQualityManagementPlanStatus, "WaterQualityManagementPlanStatus", primaryKey);
                    return waterQualityManagementPlanStatus;

                case "WaterQualityManagementPlanVerify":
                    return WaterQualityManagementPlanVerifies.GetWaterQualityManagementPlanVerify(primaryKey);

                case "WaterQualityManagementPlanVerifyPhoto":
                    return WaterQualityManagementPlanVerifyPhotos.GetWaterQualityManagementPlanVerifyPhoto(primaryKey);

                case "WaterQualityManagementPlanVerifyQuickBMP":
                    return WaterQualityManagementPlanVerifyQuickBMPs.GetWaterQualityManagementPlanVerifyQuickBMP(primaryKey);

                case "WaterQualityManagementPlanVerifySourceControlBMP":
                    return WaterQualityManagementPlanVerifySourceControlBMPs.GetWaterQualityManagementPlanVerifySourceControlBMP(primaryKey);

                case "WaterQualityManagementPlanVerifyStatus":
                    return WaterQualityManagementPlanVerifyStatuses.GetWaterQualityManagementPlanVerifyStatus(primaryKey);

                case "WaterQualityManagementPlanVerifyTreatmentBMP":
                    return WaterQualityManagementPlanVerifyTreatmentBMPs.GetWaterQualityManagementPlanVerifyTreatmentBMP(primaryKey);

                case "WaterQualityManagementPlanVerifyType":
                    return WaterQualityManagementPlanVerifyTypes.GetWaterQualityManagementPlanVerifyType(primaryKey);

                case "WaterQualityManagementPlanVisitStatus":
                    return WaterQualityManagementPlanVisitStatuses.GetWaterQualityManagementPlanVisitStatus(primaryKey);

                case "Watershed":
                    return Watersheds.GetWatershed(primaryKey);
                default:
                    throw new NotImplementedException(string.Format("No loader for type \"{0}\"", type.FullName));
            }
        }
    }
}