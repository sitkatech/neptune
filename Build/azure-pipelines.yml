trigger: none

variables:
  team: 'h2o'
  projectNumber: 'D020211956.00'

  azureApplicationTFStateResourceGroup: 'esa-$(Environment)'
  TfStateStorageAccountName: 'esatfstate$(Environment)'
  TfStateStorageAccountContainerName: 'neptune'
  spokeKeyVaultName: 'aks-spoke-kv-esa-$(Environment)'

  resourceGroupName: 'neptune-$(Environment)'
  keyVaultName: 'neptune-keyvault-$(Environment)'
  storageAccountName: 'neptuneapp$(Environment)'
  storageAccountNameProd: 'neptuneappprod'

  databaseName: 'NeptuneDB'
  databaseEdition: 'Standard'
  databaseTier: 'ElasticPool'
  sqlApiUsername: 'NeptuneWeb'
  sqlGeoserverUsername: 'NeptuneGeo'

  # define these in the pipelines:
  # domainApi: 'api-neptune.esa-$(Environment).sitkatech.com'
  # domainWeb: 'neptune-web.esa-$(Environment).sitkatech.com'
  # domainPlanning: 'neptune-planning.esa-$(Environment).sitkatech.com'
  # domainGeoserver: 'geoserver-neptune.esa-$(Environment).sitkatech.com'
  # domainWebMvc: 'neptune.esa-$(Environment).sitkatech.com'

  nereidTag: 'v0.10.1'
  nereidDataTag: '2023.11.08'

resources:
  repositories:
  - repository: self
    type: git
    ref: develop
  - repository: BuildTemplates
    type: github
    name: sitkatech/BuildTemplates
    endpoint: "sitkatech"
  - repository: nereid
    name: Geosyntec/nereid
    type: github
    ref: refs/tags/$(nereidTag)
    endpoint: NereidGithubServiceConnection
  - repository: nereiddata
    name: Geosyntec/nereid-data
    type: github
    ref: refs/tags/$(nereidDataTag)
    endpoint: NereidGithubServiceConnection
   
stages:
- stage: BuildDB
  displayName: Build DB
  jobs:

  - template: azure-pipelines/templates/database/dacpac-template.yml@BuildTemplates 
    parameters:
      name: 'Database'
      solutionFile: 'Neptune.Database/Neptune.Database.sqlproj'
      additionalArgs: '/p:DSP=Microsoft.Data.Tools.Schema.Sql.SqlAzureV12DatabaseSchemaProvider'
      publishPath: 'Neptune.Database/bin/Debug/Neptune.Database.dacpac'
      artifactName: 'Database'

- stage: Test
  displayName: Test All
  condition: and(succeeded(), eq(variables['runTests'], 'true'))
  jobs:  
  - job: Tests
    displayName: 'Tests'
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: 'Neptune.Tests/Neptune.Tests.csproj'
        
    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: 'Neptune.Tests/Neptune.Tests.csproj'
        arguments: '--no-restore /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
        
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'


- stage: BuildWeb
  displayName: Build API/Web/WebMVC
  dependsOn: Test
  condition: in(dependencies.Test.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
  jobs:
  - job: BuildAPI
    displayName: Build API and WebMVC
    condition: eq(variables['build'], 'true')
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      fetchDepth: 0

    - task: AzureKeyVault@2
      inputs:
        azureSubscription: "$(azureSubscription)"
        KeyVaultName: '$(spokeKeyVaultName)'
        SecretsFilter: '*'
        RunAsPreJob: true

    - template: azure-pipelines/templates/docker/docker-template.yml@BuildTemplates 
      parameters:
        displayName: 'API'
        subscription: '$(azureSubscription)'
        containerRegistry: '$(kv-containerRegistry)'
        dockerComposeFile: 'docker-compose/docker-compose.yml'
        dockerComposeFileArgs: 'env=$(environment)'
        additionalImageTags: |
          $(Build.BuildNumber)-$(environment)
        includeLatestTag: true


  - job: BuildWeb
    displayName: Build Web
    condition: eq(variables['build'], 'true')
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      fetchDepth: 0

    - task: AzureKeyVault@2
      inputs:
        azureSubscription: "$(azureSubscription)"
        KeyVaultName: '$(spokeKeyVaultName)'
        SecretsFilter: '*'
        RunAsPreJob: true

    - template: azure-pipelines/templates/docker/docker-template.yml@BuildTemplates 
      parameters:
        displayName: 'Web'
        subscription: '$(azureSubscription)'
        containerRegistry: '$(kv-containerRegistry)'
        dockerComposeFile: 'Neptune.Web/docker-compose/docker-compose.yml'
        dockerComposeFileArgs: 'env=$(environment)'
        additionalImageTags: |
          $(Build.BuildNumber)-$(environment)
        includeLatestTag: true

  - job: BuildQGIS
    displayName: Build QGISApi
    condition: eq(variables['build'], 'true')
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
      fetchDepth: 0

    - task: AzureKeyVault@2
      inputs:
        azureSubscription: "$(azureSubscription)"
        KeyVaultName: '$(spokeKeyVaultName)'
        SecretsFilter: '*'
        RunAsPreJob: true

    - template: azure-pipelines/templates/docker/docker-template.yml@BuildTemplates 
      parameters:
        displayName: 'QGISApi'
        subscription: '$(azureSubscription)'
        containerRegistry: '$(kv-containerRegistry)'
        dockerComposeFile: 'docker-compose/docker-compose.qgisapi.yml'
        dockerComposeFileArgs: 'env=$(environment)'
        additionalImageTags: |
          $(Build.BuildNumber)-$(environment)
        includeLatestTag: true

- stage: BuildNereid
  displayName: Build Nereid
  dependsOn: Test
  condition: in(dependencies.Test.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
  jobs:
  - job: BuildNereid
    displayName: Build Nereid
    condition: eq(variables['buildNereid'], 'true')
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: nereid

    - task: AzureKeyVault@2
      inputs:
        azureSubscription: "$(azureSubscription)"
        KeyVaultName: '$(spokeKeyVaultName)'
        SecretsFilter: '*'
        RunAsPreJob: true

    - task: DockerCompose@0
      displayName: Build Nereid services
      inputs:
        azureSubscriptionEndpoint: '$(azureSubscription)'
        azureContainerRegistry: '$(kv-containerRegistry)'
        dockerComposeFile: docker-compose.build.yml
        additionalDockerComposeFiles: |
          docker-compose.image.yml
        dockerComposeFileArgs: |
          NEREID_ARTIFACT_REGISTRY_PATH=$(kv-containerRegistry)/neptune/
        action: Build services
        additionalImageTags: >-
          $(Build.BuildNumber)-$(environment)

          $(nereidTag)
        includeLatestTag: true

    - task: DockerCompose@0
      displayName: Push Nereid to Registry  
      condition: eq(variables['buildNereid'], 'true')
      inputs:
        azureSubscriptionEndpoint: '$(azureSubscription)'
        azureContainerRegistry: '$(kv-containerRegistry)'
        dockerComposeFile: docker-compose.build.yml
        additionalDockerComposeFiles: |
          docker-compose.image.yml
        dockerComposeFileArgs: |
          NEREID_ARTIFACT_REGISTRY_PATH=$(kv-containerRegistry)/neptune/
        action: Push services
        additionalImageTags: >-
          $(Build.BuildNumber)-$(environment)

          $(nereidTag)
        includeLatestTag: true

- stage: BuildTerraform
  displayName: Terraform Plan
  dependsOn: Test
  condition: in(dependencies.Test.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')  
  jobs:
  - job: Terraform
    displayName: Terraform Plan
    pool:
      vmImage: 'windows-latest'
      demands: msbuild
    steps:
    - checkout: self
      fetchDepth: 0

    - task: AzureKeyVault@2
      inputs:
        azureSubscription: "$(azureSubscription)"
        KeyVaultName: '$(spokeKeyVaultName)'
        SecretsFilter: '*'
        RunAsPreJob: true

    - template: azure-pipelines/templates/terraform/terraform.yml@BuildTemplates 
      parameters: 
        ServiceConnectionName: "$(azureSubscription)"
        TfStateStorageAccountName: "$(tfStateStorageAccountName)"
        TfStateStorageAccountContainerName: "$(TfStateStorageAccountContainerName)"
        TfStateStorageAccountResourceGroup: "$(azureApplicationTfStateResourceGroup)"
        WorkingDirectory: './'
        TerraformCommand: plan
        TerraformCommandOptions: |
          -var "keyVaultName=$(keyVaultName)" 
          -var "storageAccountName=$(storageAccountName)" 
          -var "resourceGroupName=$(resourceGroupName)" 
          -var "dbServerName=$(kv-dbServerName)" 
          -var "datadogApiKey=$(kv-datadogApiKey)" 
          -var "datadogAppKey=$(kv-datadogAppKey)" 
          -var "domainApi=$(domainApi)" 
          -var "domainWeb=$(domainWeb)" 
          -var "environment=$(Environment)" 
          -var "domainGeoserver=$(domainGeoserver)" 
          -var "domainWebMvc=$(domainWebMvc)" 
          -var "databaseName=$(databaseName)" 
          -var "databaseEdition=$(databaseEdition)" 
          -var "databaseTier=$(databaseTier)" 
          -var "sqlPassword=$(kv-sqlAdministratorPassword)" 
          -var "sqlUsername=$(kv-sqlAdministratorUsername)" 
          -var "azureClusterResourceGroup=$(kv-azureClusterResourceGroup)" 
          -var "databaseResourceGroup=$(kv-databaseResourceGroup)" 
          -var "sqlApiUsername=$(sqlApiUsername)" 
          -var "sqlGeoserverUsername=$(sqlGeoserverUsername)" 
          -var "storageAccountDevApplicationName=$(storageAccountDevApplicationName)" 
          -var "team=$(team)" 
          -var "projectNumber=$(projectNumber)" 
          -var "elasticPoolName=$(kv-elasticPoolName)" 

    - task: CopyFiles@2
      inputs:
        sourceFolder: 'charts/neptune'
        contents: '**'
        targetFolder: $(Build.ArtifactStagingDirectory)/chart
      condition: and(succeeded(), eq(variables['deploy'], 'true'))

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: ChartArtifacts
        pathtoPublish: $(Build.ArtifactStagingDirectory)
      condition: and(succeeded(), eq(variables['deploy'], 'true'))

    - task: PublishBuildArtifacts@1
      inputs:
        artifactName: GeoServerArtifacts
        pathtoPublish: 'Neptune.GeoServer/data_dir'
      condition: and(succeeded(), eq(variables['deploy'], 'true'))

- stage: DeployTerraform
  displayName: Deploy Terraform (with Approval)
  dependsOn: 
    - BuildWeb
    - BuildDB
    - BuildTerraform
    - BuildNereid
  condition: |
    and
    (
      in(dependencies.BuildWeb.result, 'Succeeded', 'SucceededWithIssues'),
      in(dependencies.BuildDB.result, 'Succeeded', 'SucceededWithIssues'),
      in(dependencies.BuildNereid.result, 'Succeeded', 'SucceededWithIssues', 'Skipped'),
      in(dependencies.BuildTerraform.result, 'Succeeded', 'SucceededWithIssues'),
      eq(variables['deploy'], 'true')
    )
  jobs:  
  - deployment: Terraform
    pool:
      vmImage: 'windows-latest'
      demands: msbuild
    # creates an environment if it doesn't exist
    environment: '$(Environment)-Approve' # this Environment has an Approval Gate attached to it in the Azure DevOps UI
    strategy:
      # default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
            - checkout: self
              fetchDepth: 0
                  
             # new
            - template: azure-pipelines/templates/terraform/terraform.yml@BuildTemplates 
              parameters: 
                ServiceConnectionName: "$(azureSubscription)"
                TfStateStorageAccountName: "$(tfStateStorageAccountName)"
                TfStateStorageAccountContainerName: "$(TfStateStorageAccountContainerName)"
                TfStateStorageAccountResourceGroup: "$(azureApplicationTfStateResourceGroup)"
                WorkingDirectory: './'
                TerraformCommand: apply

            - bash: |
                echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_SAS_KEY;isOutput=true;issecret=true]$(TF_OUT_STORAGE_ACCOUNT_SAS_KEY)"
                echo "##vso[task.setvariable variable=APPLICATION_STORAGE_ACCOUNT_KEY;isOutput=true;issecret=true]$(TF_OUT_APPLICATION_STORAGE_ACCOUNT_KEY)"
                echo "##vso[task.setvariable variable=SQL_API_PASSWORD;isOutput=true;issecret=true]$(TF_OUT_SQL_API_PASSWORD)"
                echo "##vso[task.setvariable variable=SQL_GEOSERVER_PASSWORD;isOutput=true;issecret=true]$(TF_OUT_SQL_GEOSERVER_PASSWORD)"
                echo "##vso[task.setvariable variable=GEOSERVER_ADMIN_PASSWORD;isOutput=true;issecret=true]$(TF_OUT_GEOSERVER_ADMIN_PASSWORD)"
                echo "##vso[task.setvariable variable=HANGFIRE_PASSWORD;isOutput=true;issecret=true]$(TF_OUT_HANGFIRE_PASSWORD)"
                echo "##vso[task.setvariable variable=DATABASE_ID;isOutput=true;issecret=true]$(TF_OUT_DATABASE_ID)"
            - bash: 'env | sort'

- stage: RestoreFiles
  displayName: Restore Files
  dependsOn: DeployTerraform
  condition: |
    and
    (
      in(dependencies.DeployTerraform.result, 'Succeeded', 'SucceededWithIssues'),
      eq(variables['restoreFiles'], 'true')
    )
  jobs:  
    - job: RestoreQABlobStorage
      displayName: Restore QA Blob Storage
      pool:
        vmImage: 'windows-latest'
      variables: 
        APPLICATION_STORAGE_ACCOUNT_KEY: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.APPLICATION_STORAGE_ACCOUNT_KEY'] ]
      steps:
      - template: azure-pipelines/templates/blob-storage-restore/blob-storage-restore.yml@BuildTemplates 
        parameters:
          subscription: '$(azureSubscription)'
          containers: '*'
          fromStorageAccountName: '$(storageAccountProdApplicationName)'
          fromStorageAccountKey: '$(storageAccountProdAccountKey)'
          toStorageAccountName: '$(storageAccountName)'
          toStorageAccountKey: '$(APPLICATION_STORAGE_ACCOUNT_KEY)'
            
- stage: DeployDB
  displayName: Deploy Database 
  dependsOn: DeployTerraform
  condition: |
    and
    (
      in(dependencies.DeployTerraform.result, 'Succeeded', 'SucceededWithIssues'),
      eq(variables['deploy'], 'true')
    )
  jobs:  
  - deployment: Database
    pool:
      vmImage: 'windows-latest'
      demands: msbuild
    variables: 
      SQL_API_PASSWORD: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.SQL_API_PASSWORD'] ]
      SQL_GEOSERVER_PASSWORD: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.SQL_GEOSERVER_PASSWORD'] ]
      DATABASE_ID: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.DATABASE_ID'] ]
    # creates an environment if it doesn't exist
    environment: $(Environment)
    timeoutInMinutes: 120
    strategy:
      # default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: Database 

          - task: AzureKeyVault@2
            inputs:
              azureSubscription: "$(azureSubscription)"
              KeyVaultName: '$(spokeKeyVaultName)'
              SecretsFilter: '*'
              RunAsPreJob: true
          
          - task: DownloadPipelineArtifact@2
            inputs:
              source: 'specific'
              project: 'Neptune'
              pipeline: 'NeptuneDB Backup Job'
              runVersion: 'latest'
              artifact: bacpac  
              path: '$(Pipeline.Workspace)/bacpac'
            condition: and(succeeded(), eq(variables['restoreDatabase'], true))

          - template: azure-pipelines/templates/database/db-deploy-template.yml@BuildTemplates 
            parameters:
              subscription: '$(azureSubscription)'
              serverName: '$(kv-dbServerName).database.windows.net'
              databaseName: '$(databaseName)'
              databaseEdition: '$(databaseEdition)'
              elasticPoolName: '$(kv-elasticPoolName)'
              sqlAdministratorUsername: '$(kv-sqlAdministratorUsername)'
              sqlAdministratorPassword: '$(kv-sqlAdministratorPassword)'
              sqlApiUsername: '$(sqlApiUsername)'
              bacpacFile: '$(Pipeline.Workspace)/bacpac/$(databaseName).bacpac'
              dacpacFile: '$(Pipeline.Workspace)/Database/Neptune.Database.dacpac'
              projectResourceGroupName: '$(resourceGroupName)'
              databaseID: '$(DATABASE_ID)'

          - template: azure-pipelines/templates/database/db-user.yml@BuildTemplates 
            parameters:
              subscription: '$(azureSubscription)'
              serverName: '$(kv-dbServerName).database.windows.net'
              databaseName: '$(databaseName)'
              sqlAdministratorUsername: '$(kv-sqlAdministratorUsername)'
              sqlAdministratorPassword: '$(kv-sqlAdministratorPassword)'
              desiredSqlUsername: '$(sqlApiUsername)'
              desiredSqlPassword: '$(SQL_API_PASSWORD)'
              roles: 'db_owner'

          - template: azure-pipelines/templates/database/db-user.yml@BuildTemplates 
            parameters:
              subscription: '$(azureSubscription)'
              serverName: '$(kv-dbServerName).database.windows.net'
              databaseName: '$(databaseName)'
              sqlAdministratorUsername: '$(kv-sqlAdministratorUsername)'
              sqlAdministratorPassword: '$(kv-sqlAdministratorPassword)'
              desiredSqlUsername: '$(sqlGeoserverUsername)'
              desiredSqlPassword: '$(SQL_GEOSERVER_PASSWORD)'
              roles: 'db_datareader'

- stage: DeployGeoServer
  displayName: Deploy GeoServer
  dependsOn: DeployTerraform
  condition: |
    and
    (
      in(dependencies.DeployTerraform.result, 'Succeeded', 'SucceededWithIssues'),
      eq(variables['deploy'], 'true')
    )
  jobs:  
  - deployment: GeoServer
    pool:
      vmImage: 'windows-latest'
    variables: 
      STORAGE_ACCOUNT_SAS_KEY: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.STORAGE_ACCOUNT_SAS_KEY'] ]
    # creates an environment if it doesn't exist
    environment: $(Environment)
    strategy:
      # default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:        
          - download: current
            artifact: GeoServerArtifacts

          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                azcopy copy "$(Pipeline.Workspace)\GeoServerArtifacts\*" "https://$(storageAccountName).file.core.windows.net/geoserver/data_dir/$(STORAGE_ACCOUNT_SAS_KEY)" --from-to=LocalFile --recursive

- stage: DeployNereid
  displayName: Deploy Nereid
  dependsOn: DeployTerraform
  condition: |
    and
    (
      in(dependencies.DeployTerraform.result, 'Succeeded', 'SucceededWithIssues'),
      eq(variables['buildNereid'], 'true')
    )
  jobs:  
  - deployment: Nereid
    pool:
      vmImage: 'windows-latest'
    variables: 
      STORAGE_ACCOUNT_SAS_KEY: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.STORAGE_ACCOUNT_SAS_KEY'] ]
    # creates an environment if it doesn't exist
    environment: $(Environment)
    strategy:
      # default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:        
          - checkout: nereiddata             
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'ps'
              scriptLocation: 'inlineScript'
              inlineScript: |
                azcopy copy "$(Build.SourcesDirectory)\*" "https://$(storageAccountName).file.core.windows.net/nereid/$(STORAGE_ACCOUNT_SAS_KEY)" --from-to=LocalFile --recursive

- stage: DeployHelm
  displayName: Deploy Helm
  dependsOn: 
  - DeployGeoServer
  - DeployDB
  - DeployTerraform
  condition: |
    and
    (
      in(dependencies.DeployGeoServer.result, 'Succeeded', 'SucceededWithIssues'),
      in(dependencies.DeployDB.result, 'Succeeded', 'SucceededWithIssues'),
      in(dependencies.DeployTerraform.result, 'Succeeded', 'SucceededWithIssues'),
      eq(variables['deploy'], 'true')
    )
  jobs:  
  - deployment: Helm
    pool:
      vmImage: 'ubuntu-latest'
    variables: 
      APPLICATION_STORAGE_ACCOUNT_KEY: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.APPLICATION_STORAGE_ACCOUNT_KEY'] ]
      SQL_API_PASSWORD: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.SQL_API_PASSWORD'] ]
      SQL_GEOSERVER_PASSWORD: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.SQL_GEOSERVER_PASSWORD'] ]
      GEOSERVER_ADMIN_PASSWORD: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.GEOSERVER_ADMIN_PASSWORD'] ]
      HANGFIRE_PASSWORD: $[ stageDependencies.DeployTerraform.Terraform.outputs['Terraform.Bash.HANGFIRE_PASSWORD'] ]
    # creates an environment if it doesn't exist
    environment: $(Environment)
    strategy:
      runOnce:
        preDeploy:
          steps:
            - task: AzureKeyVault@2
              inputs:
                azureSubscription: "$(azureSubscription)"
                KeyVaultName: '$(spokeKeyVaultName)'
                SecretsFilter: 'kv-AtlassianClientSecret'
                RunAsPreJob: true

            - template: azure-pipelines/templates/azure-jira-update/update-jira.yml@BuildTemplates 
              parameters: 
                JiraState: "Pending"
                JiraEnvironment: "$(aspNetEnvironment)"
                AtlassianClientSecret: "$(kv-AtlassianClientSecret)"
        on:
          failure:
            steps:
            - task: AzureKeyVault@2
              inputs:
                azureSubscription: "$(azureSubscription)"
                KeyVaultName: '$(spokeKeyVaultName)'
                SecretsFilter: 'kv-AtlassianClientSecret'
                RunAsPreJob: true

            - template: azure-pipelines/templates/azure-jira-update/update-jira.yml@BuildTemplates 
              parameters: 
                JiraState: "Failed"
                JiraEnvironment: "$(aspNetEnvironment)"
                AtlassianClientSecret: "$(kv-AtlassianClientSecret)"
          success: 
            steps:
            - task: AzureKeyVault@2
              inputs:
                azureSubscription: "$(azureSubscription)"
                KeyVaultName: '$(spokeKeyVaultName)'
                SecretsFilter: 'kv-AtlassianClientSecret'
                RunAsPreJob: true

            - template: azure-pipelines/templates/azure-jira-update/update-jira.yml@BuildTemplates 
              parameters: 
                JiraState: "Successful"
                JiraEnvironment: "$(aspNetEnvironment)"
                AtlassianClientSecret: "$(kv-AtlassianClientSecret)"
        deploy:
          steps:
          - task: AzureKeyVault@2
            inputs:
              azureSubscription: "$(azureSubscription)"
              KeyVaultName: '$(spokeKeyVaultName)'
              SecretsFilter: '*'
              RunAsPreJob: true

          - template: azure-pipelines/templates/azure-jira-update/update-jira.yml@BuildTemplates 
            parameters: 
              JiraState: "InProgress"
              JiraEnvironment: "$(aspNetEnvironment)"
              AtlassianClientSecret: "$(kv-AtlassianClientSecret)"
          - download: current
            artifact: ChartArtifacts
                        
          - task: HelmInstaller@0
            displayName: 'Install Helm 3.8.0'
            inputs:
              helmVersion: 3.8.0
              installKubectl: true

          - task: Kubernetes@1
            displayName: 'kubectl login'
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: '$(azureSubscription)'
              azureResourceGroup: '$(kv-azureClusterResourceGroup)'
              kubernetesCluster: '$(kv-kubernetesCluster)'
              command: login

          - task: HelmDeploy@0
            displayName: 'helm dependency update'
            inputs:
              connectionType: Azure Resource Manager
              azureSubscription: '$(azureSubscription)'
              azureResourceGroup: '$(kv-azureClusterResourceGroup)'
              kubernetesCluster: '$(kv-kubernetesCluster)'
              command: 'dependency'
              arguments: 'update $(Pipeline.Workspace)/ChartArtifacts/chart'

          - task: HelmDeploy@0
            displayName: 'helm upgrade neptune'
            inputs:
              connectionType: Azure Resource Manager
              azureSubscription: '$(azureSubscription)'
              azureResourceGroup: '$(kv-azureClusterResourceGroup)'
              kubernetesCluster: '$(kv-kubernetesCluster)'
              namespace: '$(team)'
              arguments: '--create-namespace'
              command: upgrade
              chartType: FilePath
              chartPath: '$(Pipeline.Workspace)/ChartArtifacts/chart'
              releaseName: 'neptune'
              overrideValues: |
                global.domains.api="$(domainApi)"
                global.domains.web="$(domainWeb)"
                global.domains.geoserver="$(domainGeoserver)"
                global.domains.webmvc="$(domainWebMvc)"
                global.domains.planning="$(domainPlanning)"
                global.env.name="$(Environment)"
                global.secrets.geoserverSqlServerPassword="$(SQL_GEOSERVER_PASSWORD)"
                global.secrets.geoserverAdminPassword="$(GEOSERVER_ADMIN_PASSWORD)"
                global.secrets.applicationStorageAccountName="$(storageAccountName)"
                global.secrets.applicationStorageAccountKey="$(APPLICATION_STORAGE_ACCOUNT_KEY)"
                global.env.dbServer=$(kv-dbServerName).database.windows.net
                global.env.databaseName=$(databaseName)
                global.env.sqlUsername=$(sqlApiUsername)
                global.env.sqlGeoserverUsername=$(sqlGeoserverUsername)
                global.secrets.hangfirePassword="$(HANGFIRE_PASSWORD)"
                global.secrets.keystoneOpenIDClientSecret="$(keystoneOpenIDClientSecret)"
                global.secrets.recaptchaV3SiteKey="$(recaptchaV3SiteKey)"
                global.secrets.recaptchaV3SecretKey="$(recaptchaV3SecretKey)"
                global.secrets.apiSqlPassword=$(SQL_API_PASSWORD)
                global.secrets.sendGridApiKey="$(kv-sendGridApiKey)"
                api.image.tag="$(Build.BuildNumber)-$(environment)"
                api.image.repository="$(kv-containerRegistry)/neptune/api"
                web.image.tag="$(Build.BuildNumber)-$(environment)"
                web.image.repository="$(kv-containerRegistry)/neptune/web"
                geoserver.image.repository="$(kv-containerRegistry)/kartoza/geoserver"
                webmvc.image.tag="$(Build.BuildNumber)-$(environment)"
                webmvc.image.repository="$(kv-containerRegistry)/neptune/webmvc"
                gdalapi.image.tag="$(Build.BuildNumber)-$(environment)"
                gdalapi.image.repository="$(kv-containerRegistry)/neptune/gdalapi"
                qgisapi.image.tag="$(Build.BuildNumber)-$(environment)"
                qgisapi.image.repository="$(kv-containerRegistry)/neptune/qgisapi"
                nereid.image.repository="$(kv-containerRegistry)/neptune/nereid"
                nereid.image.tag="$(nereidTag)"
                nereid-tests.image.repository="$(kv-containerRegistry)/neptune/nereid-tests"
                nereid-tests.image.tag="$(nereidTag)"
                nereid-redis.image.repository="$(kv-containerRegistry)/neptune/redis"
                nereid-redis.image.tag="$(nereidTag)"
                nereid-flower.image.repository="$(kv-containerRegistry)/neptune/flower"
                nereid-flower.image.tag="$(nereidTag)"
                nereid-celeryworker.image.repository="$(kv-containerRegistry)/neptune/celeryworker"
                nereid-celeryworker.image.tag="$(nereidTag)"
              force: false
